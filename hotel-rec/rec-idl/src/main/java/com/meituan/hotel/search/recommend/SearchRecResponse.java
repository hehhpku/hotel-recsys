/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.search.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchRecResponse implements org.apache.thrift.TBase<SearchRecResponse, SearchRecResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchRecResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POI_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("poiResult", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RECOMMEND_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendResult", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STID_FIELD_DESC = new org.apache.thrift.protocol.TField("stid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REDIRECT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectUri", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SWITCH_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("switchCity", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXTENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("extentions", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STID_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("stidInfo", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField EX_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("exData", org.apache.thrift.protocol.TType.MAP, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchRecResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchRecResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see PoiResponseStatus
   */
  public PoiResponseStatus status; // required
  public List<PoiRecEntry> poiResult; // optional
  public List<PoiRecEntry> recommendResult; // optional
  public String stid; // optional
  public String location; // optional
  public int totalCount; // optional
  public String redirectUri; // optional
  public String switchCity; // optional
  public String extentions; // optional
  public RerankStidInfo stidInfo; // optional
  public Map<String,String> exData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PoiResponseStatus
     */
    STATUS((short)1, "status"),
    POI_RESULT((short)2, "poiResult"),
    RECOMMEND_RESULT((short)3, "recommendResult"),
    STID((short)4, "stid"),
    LOCATION((short)5, "location"),
    TOTAL_COUNT((short)6, "totalCount"),
    REDIRECT_URI((short)10, "redirectUri"),
    SWITCH_CITY((short)11, "switchCity"),
    EXTENTIONS((short)12, "extentions"),
    STID_INFO((short)20, "stidInfo"),
    EX_DATA((short)30, "exData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // POI_RESULT
          return POI_RESULT;
        case 3: // RECOMMEND_RESULT
          return RECOMMEND_RESULT;
        case 4: // STID
          return STID;
        case 5: // LOCATION
          return LOCATION;
        case 6: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 10: // REDIRECT_URI
          return REDIRECT_URI;
        case 11: // SWITCH_CITY
          return SWITCH_CITY;
        case 12: // EXTENTIONS
          return EXTENTIONS;
        case 20: // STID_INFO
          return STID_INFO;
        case 30: // EX_DATA
          return EX_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCOUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.POI_RESULT,_Fields.RECOMMEND_RESULT,_Fields.STID,_Fields.LOCATION,_Fields.TOTAL_COUNT,_Fields.REDIRECT_URI,_Fields.SWITCH_CITY,_Fields.EXTENTIONS,_Fields.STID_INFO,_Fields.EX_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PoiResponseStatus.class)));
    tmpMap.put(_Fields.POI_RESULT, new org.apache.thrift.meta_data.FieldMetaData("poiResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoiRecEntry.class))));
    tmpMap.put(_Fields.RECOMMEND_RESULT, new org.apache.thrift.meta_data.FieldMetaData("recommendResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoiRecEntry.class))));
    tmpMap.put(_Fields.STID, new org.apache.thrift.meta_data.FieldMetaData("stid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REDIRECT_URI, new org.apache.thrift.meta_data.FieldMetaData("redirectUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SWITCH_CITY, new org.apache.thrift.meta_data.FieldMetaData("switchCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENTIONS, new org.apache.thrift.meta_data.FieldMetaData("extentions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STID_INFO, new org.apache.thrift.meta_data.FieldMetaData("stidInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RerankStidInfo.class)));
    tmpMap.put(_Fields.EX_DATA, new org.apache.thrift.meta_data.FieldMetaData("exData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchRecResponse.class, metaDataMap);
  }

  public SearchRecResponse() {
  }

  public SearchRecResponse(
    PoiResponseStatus status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchRecResponse(SearchRecResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPoiResult()) {
      List<PoiRecEntry> __this__poiResult = new ArrayList<PoiRecEntry>();
      for (PoiRecEntry other_element : other.poiResult) {
        __this__poiResult.add(new PoiRecEntry(other_element));
      }
      this.poiResult = __this__poiResult;
    }
    if (other.isSetRecommendResult()) {
      List<PoiRecEntry> __this__recommendResult = new ArrayList<PoiRecEntry>();
      for (PoiRecEntry other_element : other.recommendResult) {
        __this__recommendResult.add(new PoiRecEntry(other_element));
      }
      this.recommendResult = __this__recommendResult;
    }
    if (other.isSetStid()) {
      this.stid = other.stid;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.totalCount = other.totalCount;
    if (other.isSetRedirectUri()) {
      this.redirectUri = other.redirectUri;
    }
    if (other.isSetSwitchCity()) {
      this.switchCity = other.switchCity;
    }
    if (other.isSetExtentions()) {
      this.extentions = other.extentions;
    }
    if (other.isSetStidInfo()) {
      this.stidInfo = new RerankStidInfo(other.stidInfo);
    }
    if (other.isSetExData()) {
      Map<String,String> __this__exData = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.exData.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__exData_copy_key = other_element_key;

        String __this__exData_copy_value = other_element_value;

        __this__exData.put(__this__exData_copy_key, __this__exData_copy_value);
      }
      this.exData = __this__exData;
    }
  }

  public SearchRecResponse deepCopy() {
    return new SearchRecResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.poiResult = null;
    this.recommendResult = null;
    this.stid = null;
    this.location = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    this.redirectUri = null;
    this.switchCity = null;
    this.extentions = null;
    this.stidInfo = null;
    this.exData = null;
  }

  /**
   * 
   * @see PoiResponseStatus
   */
  public PoiResponseStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see PoiResponseStatus
   */
  public SearchRecResponse setStatus(PoiResponseStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getPoiResultSize() {
    return (this.poiResult == null) ? 0 : this.poiResult.size();
  }

  public java.util.Iterator<PoiRecEntry> getPoiResultIterator() {
    return (this.poiResult == null) ? null : this.poiResult.iterator();
  }

  public void addToPoiResult(PoiRecEntry elem) {
    if (this.poiResult == null) {
      this.poiResult = new ArrayList<PoiRecEntry>();
    }
    this.poiResult.add(elem);
  }

  public List<PoiRecEntry> getPoiResult() {
    return this.poiResult;
  }

  public SearchRecResponse setPoiResult(List<PoiRecEntry> poiResult) {
    this.poiResult = poiResult;
    return this;
  }

  public void unsetPoiResult() {
    this.poiResult = null;
  }

  /** Returns true if field poiResult is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiResult() {
    return this.poiResult != null;
  }

  public void setPoiResultIsSet(boolean value) {
    if (!value) {
      this.poiResult = null;
    }
  }

  public int getRecommendResultSize() {
    return (this.recommendResult == null) ? 0 : this.recommendResult.size();
  }

  public java.util.Iterator<PoiRecEntry> getRecommendResultIterator() {
    return (this.recommendResult == null) ? null : this.recommendResult.iterator();
  }

  public void addToRecommendResult(PoiRecEntry elem) {
    if (this.recommendResult == null) {
      this.recommendResult = new ArrayList<PoiRecEntry>();
    }
    this.recommendResult.add(elem);
  }

  public List<PoiRecEntry> getRecommendResult() {
    return this.recommendResult;
  }

  public SearchRecResponse setRecommendResult(List<PoiRecEntry> recommendResult) {
    this.recommendResult = recommendResult;
    return this;
  }

  public void unsetRecommendResult() {
    this.recommendResult = null;
  }

  /** Returns true if field recommendResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendResult() {
    return this.recommendResult != null;
  }

  public void setRecommendResultIsSet(boolean value) {
    if (!value) {
      this.recommendResult = null;
    }
  }

  public String getStid() {
    return this.stid;
  }

  public SearchRecResponse setStid(String stid) {
    this.stid = stid;
    return this;
  }

  public void unsetStid() {
    this.stid = null;
  }

  /** Returns true if field stid is set (has been assigned a value) and false otherwise */
  public boolean isSetStid() {
    return this.stid != null;
  }

  public void setStidIsSet(boolean value) {
    if (!value) {
      this.stid = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public SearchRecResponse setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public SearchRecResponse setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bit_vector.clear(__TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return __isset_bit_vector.get(__TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALCOUNT_ISSET_ID, value);
  }

  public String getRedirectUri() {
    return this.redirectUri;
  }

  public SearchRecResponse setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
    return this;
  }

  public void unsetRedirectUri() {
    this.redirectUri = null;
  }

  /** Returns true if field redirectUri is set (has been assigned a value) and false otherwise */
  public boolean isSetRedirectUri() {
    return this.redirectUri != null;
  }

  public void setRedirectUriIsSet(boolean value) {
    if (!value) {
      this.redirectUri = null;
    }
  }

  public String getSwitchCity() {
    return this.switchCity;
  }

  public SearchRecResponse setSwitchCity(String switchCity) {
    this.switchCity = switchCity;
    return this;
  }

  public void unsetSwitchCity() {
    this.switchCity = null;
  }

  /** Returns true if field switchCity is set (has been assigned a value) and false otherwise */
  public boolean isSetSwitchCity() {
    return this.switchCity != null;
  }

  public void setSwitchCityIsSet(boolean value) {
    if (!value) {
      this.switchCity = null;
    }
  }

  public String getExtentions() {
    return this.extentions;
  }

  public SearchRecResponse setExtentions(String extentions) {
    this.extentions = extentions;
    return this;
  }

  public void unsetExtentions() {
    this.extentions = null;
  }

  /** Returns true if field extentions is set (has been assigned a value) and false otherwise */
  public boolean isSetExtentions() {
    return this.extentions != null;
  }

  public void setExtentionsIsSet(boolean value) {
    if (!value) {
      this.extentions = null;
    }
  }

  public RerankStidInfo getStidInfo() {
    return this.stidInfo;
  }

  public SearchRecResponse setStidInfo(RerankStidInfo stidInfo) {
    this.stidInfo = stidInfo;
    return this;
  }

  public void unsetStidInfo() {
    this.stidInfo = null;
  }

  /** Returns true if field stidInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetStidInfo() {
    return this.stidInfo != null;
  }

  public void setStidInfoIsSet(boolean value) {
    if (!value) {
      this.stidInfo = null;
    }
  }

  public int getExDataSize() {
    return (this.exData == null) ? 0 : this.exData.size();
  }

  public void putToExData(String key, String val) {
    if (this.exData == null) {
      this.exData = new HashMap<String,String>();
    }
    this.exData.put(key, val);
  }

  public Map<String,String> getExData() {
    return this.exData;
  }

  public SearchRecResponse setExData(Map<String,String> exData) {
    this.exData = exData;
    return this;
  }

  public void unsetExData() {
    this.exData = null;
  }

  /** Returns true if field exData is set (has been assigned a value) and false otherwise */
  public boolean isSetExData() {
    return this.exData != null;
  }

  public void setExDataIsSet(boolean value) {
    if (!value) {
      this.exData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PoiResponseStatus)value);
      }
      break;

    case POI_RESULT:
      if (value == null) {
        unsetPoiResult();
      } else {
        setPoiResult((List<PoiRecEntry>)value);
      }
      break;

    case RECOMMEND_RESULT:
      if (value == null) {
        unsetRecommendResult();
      } else {
        setRecommendResult((List<PoiRecEntry>)value);
      }
      break;

    case STID:
      if (value == null) {
        unsetStid();
      } else {
        setStid((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case REDIRECT_URI:
      if (value == null) {
        unsetRedirectUri();
      } else {
        setRedirectUri((String)value);
      }
      break;

    case SWITCH_CITY:
      if (value == null) {
        unsetSwitchCity();
      } else {
        setSwitchCity((String)value);
      }
      break;

    case EXTENTIONS:
      if (value == null) {
        unsetExtentions();
      } else {
        setExtentions((String)value);
      }
      break;

    case STID_INFO:
      if (value == null) {
        unsetStidInfo();
      } else {
        setStidInfo((RerankStidInfo)value);
      }
      break;

    case EX_DATA:
      if (value == null) {
        unsetExData();
      } else {
        setExData((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case POI_RESULT:
      return getPoiResult();

    case RECOMMEND_RESULT:
      return getRecommendResult();

    case STID:
      return getStid();

    case LOCATION:
      return getLocation();

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case REDIRECT_URI:
      return getRedirectUri();

    case SWITCH_CITY:
      return getSwitchCity();

    case EXTENTIONS:
      return getExtentions();

    case STID_INFO:
      return getStidInfo();

    case EX_DATA:
      return getExData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case POI_RESULT:
      return isSetPoiResult();
    case RECOMMEND_RESULT:
      return isSetRecommendResult();
    case STID:
      return isSetStid();
    case LOCATION:
      return isSetLocation();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case REDIRECT_URI:
      return isSetRedirectUri();
    case SWITCH_CITY:
      return isSetSwitchCity();
    case EXTENTIONS:
      return isSetExtentions();
    case STID_INFO:
      return isSetStidInfo();
    case EX_DATA:
      return isSetExData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchRecResponse)
      return this.equals((SearchRecResponse)that);
    return false;
  }

  public boolean equals(SearchRecResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_poiResult = true && this.isSetPoiResult();
    boolean that_present_poiResult = true && that.isSetPoiResult();
    if (this_present_poiResult || that_present_poiResult) {
      if (!(this_present_poiResult && that_present_poiResult))
        return false;
      if (!this.poiResult.equals(that.poiResult))
        return false;
    }

    boolean this_present_recommendResult = true && this.isSetRecommendResult();
    boolean that_present_recommendResult = true && that.isSetRecommendResult();
    if (this_present_recommendResult || that_present_recommendResult) {
      if (!(this_present_recommendResult && that_present_recommendResult))
        return false;
      if (!this.recommendResult.equals(that.recommendResult))
        return false;
    }

    boolean this_present_stid = true && this.isSetStid();
    boolean that_present_stid = true && that.isSetStid();
    if (this_present_stid || that_present_stid) {
      if (!(this_present_stid && that_present_stid))
        return false;
      if (!this.stid.equals(that.stid))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_totalCount = true && this.isSetTotalCount();
    boolean that_present_totalCount = true && that.isSetTotalCount();
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_redirectUri = true && this.isSetRedirectUri();
    boolean that_present_redirectUri = true && that.isSetRedirectUri();
    if (this_present_redirectUri || that_present_redirectUri) {
      if (!(this_present_redirectUri && that_present_redirectUri))
        return false;
      if (!this.redirectUri.equals(that.redirectUri))
        return false;
    }

    boolean this_present_switchCity = true && this.isSetSwitchCity();
    boolean that_present_switchCity = true && that.isSetSwitchCity();
    if (this_present_switchCity || that_present_switchCity) {
      if (!(this_present_switchCity && that_present_switchCity))
        return false;
      if (!this.switchCity.equals(that.switchCity))
        return false;
    }

    boolean this_present_extentions = true && this.isSetExtentions();
    boolean that_present_extentions = true && that.isSetExtentions();
    if (this_present_extentions || that_present_extentions) {
      if (!(this_present_extentions && that_present_extentions))
        return false;
      if (!this.extentions.equals(that.extentions))
        return false;
    }

    boolean this_present_stidInfo = true && this.isSetStidInfo();
    boolean that_present_stidInfo = true && that.isSetStidInfo();
    if (this_present_stidInfo || that_present_stidInfo) {
      if (!(this_present_stidInfo && that_present_stidInfo))
        return false;
      if (!this.stidInfo.equals(that.stidInfo))
        return false;
    }

    boolean this_present_exData = true && this.isSetExData();
    boolean that_present_exData = true && that.isSetExData();
    if (this_present_exData || that_present_exData) {
      if (!(this_present_exData && that_present_exData))
        return false;
      if (!this.exData.equals(that.exData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SearchRecResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SearchRecResponse typedOther = (SearchRecResponse)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiResult()).compareTo(typedOther.isSetPoiResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiResult, typedOther.poiResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendResult()).compareTo(typedOther.isSetRecommendResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendResult, typedOther.recommendResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStid()).compareTo(typedOther.isSetStid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stid, typedOther.stid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(typedOther.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, typedOther.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedirectUri()).compareTo(typedOther.isSetRedirectUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedirectUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redirectUri, typedOther.redirectUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwitchCity()).compareTo(typedOther.isSetSwitchCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwitchCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.switchCity, typedOther.switchCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtentions()).compareTo(typedOther.isSetExtentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extentions, typedOther.extentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStidInfo()).compareTo(typedOther.isSetStidInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStidInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stidInfo, typedOther.stidInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExData()).compareTo(typedOther.isSetExData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exData, typedOther.exData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchRecResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetPoiResult()) {
      if (!first) sb.append(", ");
      sb.append("poiResult:");
      if (this.poiResult == null) {
        sb.append("null");
      } else {
        sb.append(this.poiResult);
      }
      first = false;
    }
    if (isSetRecommendResult()) {
      if (!first) sb.append(", ");
      sb.append("recommendResult:");
      if (this.recommendResult == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendResult);
      }
      first = false;
    }
    if (isSetStid()) {
      if (!first) sb.append(", ");
      sb.append("stid:");
      if (this.stid == null) {
        sb.append("null");
      } else {
        sb.append(this.stid);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetTotalCount()) {
      if (!first) sb.append(", ");
      sb.append("totalCount:");
      sb.append(this.totalCount);
      first = false;
    }
    if (isSetRedirectUri()) {
      if (!first) sb.append(", ");
      sb.append("redirectUri:");
      if (this.redirectUri == null) {
        sb.append("null");
      } else {
        sb.append(this.redirectUri);
      }
      first = false;
    }
    if (isSetSwitchCity()) {
      if (!first) sb.append(", ");
      sb.append("switchCity:");
      if (this.switchCity == null) {
        sb.append("null");
      } else {
        sb.append(this.switchCity);
      }
      first = false;
    }
    if (isSetExtentions()) {
      if (!first) sb.append(", ");
      sb.append("extentions:");
      if (this.extentions == null) {
        sb.append("null");
      } else {
        sb.append(this.extentions);
      }
      first = false;
    }
    if (isSetStidInfo()) {
      if (!first) sb.append(", ");
      sb.append("stidInfo:");
      if (this.stidInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.stidInfo);
      }
      first = false;
    }
    if (isSetExData()) {
      if (!first) sb.append(", ");
      sb.append("exData:");
      if (this.exData == null) {
        sb.append("null");
      } else {
        sb.append(this.exData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchRecResponseStandardSchemeFactory implements SchemeFactory {
    public SearchRecResponseStandardScheme getScheme() {
      return new SearchRecResponseStandardScheme();
    }
  }

  private static class SearchRecResponseStandardScheme extends StandardScheme<SearchRecResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchRecResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = PoiResponseStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POI_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.poiResult = new ArrayList<PoiRecEntry>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  PoiRecEntry _elem60; // required
                  _elem60 = new PoiRecEntry();
                  _elem60.read(iprot);
                  struct.poiResult.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setPoiResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECOMMEND_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.recommendResult = new ArrayList<PoiRecEntry>(_list61.size);
                for (int _i62 = 0; _i62 < _list61.size; ++_i62)
                {
                  PoiRecEntry _elem63; // required
                  _elem63 = new PoiRecEntry();
                  _elem63.read(iprot);
                  struct.recommendResult.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setRecommendResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stid = iprot.readString();
              struct.setStidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REDIRECT_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redirectUri = iprot.readString();
              struct.setRedirectUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SWITCH_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.switchCity = iprot.readString();
              struct.setSwitchCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXTENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extentions = iprot.readString();
              struct.setExtentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STID_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stidInfo = new RerankStidInfo();
              struct.stidInfo.read(iprot);
              struct.setStidInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EX_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.exData = new HashMap<String,String>(2*_map64.size);
                for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                {
                  String _key66; // required
                  String _val67; // required
                  _key66 = iprot.readString();
                  _val67 = iprot.readString();
                  struct.exData.put(_key66, _val67);
                }
                iprot.readMapEnd();
              }
              struct.setExDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchRecResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.poiResult != null) {
        if (struct.isSetPoiResult()) {
          oprot.writeFieldBegin(POI_RESULT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.poiResult.size()));
            for (PoiRecEntry _iter68 : struct.poiResult)
            {
              _iter68.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.recommendResult != null) {
        if (struct.isSetRecommendResult()) {
          oprot.writeFieldBegin(RECOMMEND_RESULT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recommendResult.size()));
            for (PoiRecEntry _iter69 : struct.recommendResult)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stid != null) {
        if (struct.isSetStid()) {
          oprot.writeFieldBegin(STID_FIELD_DESC);
          oprot.writeString(struct.stid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalCount()) {
        oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.totalCount);
        oprot.writeFieldEnd();
      }
      if (struct.redirectUri != null) {
        if (struct.isSetRedirectUri()) {
          oprot.writeFieldBegin(REDIRECT_URI_FIELD_DESC);
          oprot.writeString(struct.redirectUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.switchCity != null) {
        if (struct.isSetSwitchCity()) {
          oprot.writeFieldBegin(SWITCH_CITY_FIELD_DESC);
          oprot.writeString(struct.switchCity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extentions != null) {
        if (struct.isSetExtentions()) {
          oprot.writeFieldBegin(EXTENTIONS_FIELD_DESC);
          oprot.writeString(struct.extentions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stidInfo != null) {
        if (struct.isSetStidInfo()) {
          oprot.writeFieldBegin(STID_INFO_FIELD_DESC);
          struct.stidInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exData != null) {
        if (struct.isSetExData()) {
          oprot.writeFieldBegin(EX_DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.exData.size()));
            for (Map.Entry<String, String> _iter70 : struct.exData.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              oprot.writeString(_iter70.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchRecResponseTupleSchemeFactory implements SchemeFactory {
    public SearchRecResponseTupleScheme getScheme() {
      return new SearchRecResponseTupleScheme();
    }
  }

  private static class SearchRecResponseTupleScheme extends TupleScheme<SearchRecResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchRecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPoiResult()) {
        optionals.set(0);
      }
      if (struct.isSetRecommendResult()) {
        optionals.set(1);
      }
      if (struct.isSetStid()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetRedirectUri()) {
        optionals.set(5);
      }
      if (struct.isSetSwitchCity()) {
        optionals.set(6);
      }
      if (struct.isSetExtentions()) {
        optionals.set(7);
      }
      if (struct.isSetStidInfo()) {
        optionals.set(8);
      }
      if (struct.isSetExData()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPoiResult()) {
        {
          oprot.writeI32(struct.poiResult.size());
          for (PoiRecEntry _iter71 : struct.poiResult)
          {
            _iter71.write(oprot);
          }
        }
      }
      if (struct.isSetRecommendResult()) {
        {
          oprot.writeI32(struct.recommendResult.size());
          for (PoiRecEntry _iter72 : struct.recommendResult)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetStid()) {
        oprot.writeString(struct.stid);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetRedirectUri()) {
        oprot.writeString(struct.redirectUri);
      }
      if (struct.isSetSwitchCity()) {
        oprot.writeString(struct.switchCity);
      }
      if (struct.isSetExtentions()) {
        oprot.writeString(struct.extentions);
      }
      if (struct.isSetStidInfo()) {
        struct.stidInfo.write(oprot);
      }
      if (struct.isSetExData()) {
        {
          oprot.writeI32(struct.exData.size());
          for (Map.Entry<String, String> _iter73 : struct.exData.entrySet())
          {
            oprot.writeString(_iter73.getKey());
            oprot.writeString(_iter73.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchRecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = PoiResponseStatus.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.poiResult = new ArrayList<PoiRecEntry>(_list74.size);
          for (int _i75 = 0; _i75 < _list74.size; ++_i75)
          {
            PoiRecEntry _elem76; // required
            _elem76 = new PoiRecEntry();
            _elem76.read(iprot);
            struct.poiResult.add(_elem76);
          }
        }
        struct.setPoiResultIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recommendResult = new ArrayList<PoiRecEntry>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            PoiRecEntry _elem79; // required
            _elem79 = new PoiRecEntry();
            _elem79.read(iprot);
            struct.recommendResult.add(_elem79);
          }
        }
        struct.setRecommendResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stid = iprot.readString();
        struct.setStidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.redirectUri = iprot.readString();
        struct.setRedirectUriIsSet(true);
      }
      if (incoming.get(6)) {
        struct.switchCity = iprot.readString();
        struct.setSwitchCityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.extentions = iprot.readString();
        struct.setExtentionsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stidInfo = new RerankStidInfo();
        struct.stidInfo.read(iprot);
        struct.setStidInfoIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.exData = new HashMap<String,String>(2*_map80.size);
          for (int _i81 = 0; _i81 < _map80.size; ++_i81)
          {
            String _key82; // required
            String _val83; // required
            _key82 = iprot.readString();
            _val83 = iprot.readString();
            struct.exData.put(_key82, _val83);
          }
        }
        struct.setExDataIsSet(true);
      }
    }
  }

}

