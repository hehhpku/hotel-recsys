/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HotelRecResponse implements org.apache.thrift.TBase<HotelRecResponse, HotelRecResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HotelRecResponse");

  private static final org.apache.thrift.protocol.TField SERVICE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceStatus", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POI_REC_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("PoiRecList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("recNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HotelRecResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HotelRecResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see RecServiceStatus
   */
  public RecServiceStatus serviceStatus; // required
  public List<PoiRecInfo> PoiRecList; // required
  public int recNum; // optional
  public String strategy; // optional
  public String algorithm; // optional
  public Map<String,String> extraDataMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RecServiceStatus
     */
    SERVICE_STATUS((short)1, "serviceStatus"),
    POI_REC_LIST((short)2, "PoiRecList"),
    REC_NUM((short)3, "recNum"),
    STRATEGY((short)4, "strategy"),
    ALGORITHM((short)5, "algorithm"),
    EXTRA_DATA_MAP((short)6, "extraDataMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_STATUS
          return SERVICE_STATUS;
        case 2: // POI_REC_LIST
          return POI_REC_LIST;
        case 3: // REC_NUM
          return REC_NUM;
        case 4: // STRATEGY
          return STRATEGY;
        case 5: // ALGORITHM
          return ALGORITHM;
        case 6: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.REC_NUM,_Fields.STRATEGY,_Fields.ALGORITHM,_Fields.EXTRA_DATA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("serviceStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecServiceStatus.class)));
    tmpMap.put(_Fields.POI_REC_LIST, new org.apache.thrift.meta_data.FieldMetaData("PoiRecList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoiRecInfo.class))));
    tmpMap.put(_Fields.REC_NUM, new org.apache.thrift.meta_data.FieldMetaData("recNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HotelRecResponse.class, metaDataMap);
  }

  public HotelRecResponse() {
  }

  public HotelRecResponse(
    RecServiceStatus serviceStatus,
    List<PoiRecInfo> PoiRecList)
  {
    this();
    this.serviceStatus = serviceStatus;
    this.PoiRecList = PoiRecList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HotelRecResponse(HotelRecResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetServiceStatus()) {
      this.serviceStatus = other.serviceStatus;
    }
    if (other.isSetPoiRecList()) {
      List<PoiRecInfo> __this__PoiRecList = new ArrayList<PoiRecInfo>();
      for (PoiRecInfo other_element : other.PoiRecList) {
        __this__PoiRecList.add(new PoiRecInfo(other_element));
      }
      this.PoiRecList = __this__PoiRecList;
    }
    this.recNum = other.recNum;
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    if (other.isSetAlgorithm()) {
      this.algorithm = other.algorithm;
    }
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
  }

  public HotelRecResponse deepCopy() {
    return new HotelRecResponse(this);
  }

  @Override
  public void clear() {
    this.serviceStatus = null;
    this.PoiRecList = null;
    setRecNumIsSet(false);
    this.recNum = 0;
    this.strategy = null;
    this.algorithm = null;
    this.extraDataMap = null;
  }

  /**
   * 
   * @see RecServiceStatus
   */
  public RecServiceStatus getServiceStatus() {
    return this.serviceStatus;
  }

  /**
   * 
   * @see RecServiceStatus
   */
  public HotelRecResponse setServiceStatus(RecServiceStatus serviceStatus) {
    this.serviceStatus = serviceStatus;
    return this;
  }

  public void unsetServiceStatus() {
    this.serviceStatus = null;
  }

  /** Returns true if field serviceStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceStatus() {
    return this.serviceStatus != null;
  }

  public void setServiceStatusIsSet(boolean value) {
    if (!value) {
      this.serviceStatus = null;
    }
  }

  public int getPoiRecListSize() {
    return (this.PoiRecList == null) ? 0 : this.PoiRecList.size();
  }

  public java.util.Iterator<PoiRecInfo> getPoiRecListIterator() {
    return (this.PoiRecList == null) ? null : this.PoiRecList.iterator();
  }

  public void addToPoiRecList(PoiRecInfo elem) {
    if (this.PoiRecList == null) {
      this.PoiRecList = new ArrayList<PoiRecInfo>();
    }
    this.PoiRecList.add(elem);
  }

  public List<PoiRecInfo> getPoiRecList() {
    return this.PoiRecList;
  }

  public HotelRecResponse setPoiRecList(List<PoiRecInfo> PoiRecList) {
    this.PoiRecList = PoiRecList;
    return this;
  }

  public void unsetPoiRecList() {
    this.PoiRecList = null;
  }

  /** Returns true if field PoiRecList is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiRecList() {
    return this.PoiRecList != null;
  }

  public void setPoiRecListIsSet(boolean value) {
    if (!value) {
      this.PoiRecList = null;
    }
  }

  public int getRecNum() {
    return this.recNum;
  }

  public HotelRecResponse setRecNum(int recNum) {
    this.recNum = recNum;
    setRecNumIsSet(true);
    return this;
  }

  public void unsetRecNum() {
    __isset_bit_vector.clear(__RECNUM_ISSET_ID);
  }

  /** Returns true if field recNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRecNum() {
    return __isset_bit_vector.get(__RECNUM_ISSET_ID);
  }

  public void setRecNumIsSet(boolean value) {
    __isset_bit_vector.set(__RECNUM_ISSET_ID, value);
  }

  public String getStrategy() {
    return this.strategy;
  }

  public HotelRecResponse setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public String getAlgorithm() {
    return this.algorithm;
  }

  public HotelRecResponse setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  public void unsetAlgorithm() {
    this.algorithm = null;
  }

  /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithm() {
    return this.algorithm != null;
  }

  public void setAlgorithmIsSet(boolean value) {
    if (!value) {
      this.algorithm = null;
    }
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public HotelRecResponse setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_STATUS:
      if (value == null) {
        unsetServiceStatus();
      } else {
        setServiceStatus((RecServiceStatus)value);
      }
      break;

    case POI_REC_LIST:
      if (value == null) {
        unsetPoiRecList();
      } else {
        setPoiRecList((List<PoiRecInfo>)value);
      }
      break;

    case REC_NUM:
      if (value == null) {
        unsetRecNum();
      } else {
        setRecNum((Integer)value);
      }
      break;

    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case ALGORITHM:
      if (value == null) {
        unsetAlgorithm();
      } else {
        setAlgorithm((String)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_STATUS:
      return getServiceStatus();

    case POI_REC_LIST:
      return getPoiRecList();

    case REC_NUM:
      return Integer.valueOf(getRecNum());

    case STRATEGY:
      return getStrategy();

    case ALGORITHM:
      return getAlgorithm();

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_STATUS:
      return isSetServiceStatus();
    case POI_REC_LIST:
      return isSetPoiRecList();
    case REC_NUM:
      return isSetRecNum();
    case STRATEGY:
      return isSetStrategy();
    case ALGORITHM:
      return isSetAlgorithm();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HotelRecResponse)
      return this.equals((HotelRecResponse)that);
    return false;
  }

  public boolean equals(HotelRecResponse that) {
    if (that == null)
      return false;

    boolean this_present_serviceStatus = true && this.isSetServiceStatus();
    boolean that_present_serviceStatus = true && that.isSetServiceStatus();
    if (this_present_serviceStatus || that_present_serviceStatus) {
      if (!(this_present_serviceStatus && that_present_serviceStatus))
        return false;
      if (!this.serviceStatus.equals(that.serviceStatus))
        return false;
    }

    boolean this_present_PoiRecList = true && this.isSetPoiRecList();
    boolean that_present_PoiRecList = true && that.isSetPoiRecList();
    if (this_present_PoiRecList || that_present_PoiRecList) {
      if (!(this_present_PoiRecList && that_present_PoiRecList))
        return false;
      if (!this.PoiRecList.equals(that.PoiRecList))
        return false;
    }

    boolean this_present_recNum = true && this.isSetRecNum();
    boolean that_present_recNum = true && that.isSetRecNum();
    if (this_present_recNum || that_present_recNum) {
      if (!(this_present_recNum && that_present_recNum))
        return false;
      if (this.recNum != that.recNum)
        return false;
    }

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_algorithm = true && this.isSetAlgorithm();
    boolean that_present_algorithm = true && that.isSetAlgorithm();
    if (this_present_algorithm || that_present_algorithm) {
      if (!(this_present_algorithm && that_present_algorithm))
        return false;
      if (!this.algorithm.equals(that.algorithm))
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HotelRecResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HotelRecResponse typedOther = (HotelRecResponse)other;

    lastComparison = Boolean.valueOf(isSetServiceStatus()).compareTo(typedOther.isSetServiceStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceStatus, typedOther.serviceStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiRecList()).compareTo(typedOther.isSetPoiRecList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiRecList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PoiRecList, typedOther.PoiRecList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecNum()).compareTo(typedOther.isSetRecNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recNum, typedOther.recNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithm()).compareTo(typedOther.isSetAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, typedOther.algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HotelRecResponse(");
    boolean first = true;

    sb.append("serviceStatus:");
    if (this.serviceStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PoiRecList:");
    if (this.PoiRecList == null) {
      sb.append("null");
    } else {
      sb.append(this.PoiRecList);
    }
    first = false;
    if (isSetRecNum()) {
      if (!first) sb.append(", ");
      sb.append("recNum:");
      sb.append(this.recNum);
      first = false;
    }
    if (isSetStrategy()) {
      if (!first) sb.append(", ");
      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
    }
    if (isSetAlgorithm()) {
      if (!first) sb.append(", ");
      sb.append("algorithm:");
      if (this.algorithm == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithm);
      }
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceStatus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceStatus' was not present! Struct: " + toString());
    }
    if (PoiRecList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PoiRecList' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HotelRecResponseStandardSchemeFactory implements SchemeFactory {
    public HotelRecResponseStandardScheme getScheme() {
      return new HotelRecResponseStandardScheme();
    }
  }

  private static class HotelRecResponseStandardScheme extends StandardScheme<HotelRecResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HotelRecResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceStatus = RecServiceStatus.findByValue(iprot.readI32());
              struct.setServiceStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POI_REC_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.PoiRecList = new ArrayList<PoiRecInfo>(_list128.size);
                for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                {
                  PoiRecInfo _elem130; // required
                  _elem130 = new PoiRecInfo();
                  _elem130.read(iprot);
                  struct.PoiRecList.add(_elem130);
                }
                iprot.readListEnd();
              }
              struct.setPoiRecListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recNum = iprot.readI32();
              struct.setRecNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithm = iprot.readString();
              struct.setAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map131.size);
                for (int _i132 = 0; _i132 < _map131.size; ++_i132)
                {
                  String _key133; // required
                  String _val134; // required
                  _key133 = iprot.readString();
                  _val134 = iprot.readString();
                  struct.extraDataMap.put(_key133, _val134);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HotelRecResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceStatus != null) {
        oprot.writeFieldBegin(SERVICE_STATUS_FIELD_DESC);
        oprot.writeI32(struct.serviceStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.PoiRecList != null) {
        oprot.writeFieldBegin(POI_REC_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.PoiRecList.size()));
          for (PoiRecInfo _iter135 : struct.PoiRecList)
          {
            _iter135.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecNum()) {
        oprot.writeFieldBegin(REC_NUM_FIELD_DESC);
        oprot.writeI32(struct.recNum);
        oprot.writeFieldEnd();
      }
      if (struct.strategy != null) {
        if (struct.isSetStrategy()) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithm != null) {
        if (struct.isSetAlgorithm()) {
          oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
          oprot.writeString(struct.algorithm);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter136 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter136.getKey());
              oprot.writeString(_iter136.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HotelRecResponseTupleSchemeFactory implements SchemeFactory {
    public HotelRecResponseTupleScheme getScheme() {
      return new HotelRecResponseTupleScheme();
    }
  }

  private static class HotelRecResponseTupleScheme extends TupleScheme<HotelRecResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HotelRecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceStatus.getValue());
      {
        oprot.writeI32(struct.PoiRecList.size());
        for (PoiRecInfo _iter137 : struct.PoiRecList)
        {
          _iter137.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRecNum()) {
        optionals.set(0);
      }
      if (struct.isSetStrategy()) {
        optionals.set(1);
      }
      if (struct.isSetAlgorithm()) {
        optionals.set(2);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRecNum()) {
        oprot.writeI32(struct.recNum);
      }
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetAlgorithm()) {
        oprot.writeString(struct.algorithm);
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter138 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter138.getKey());
            oprot.writeString(_iter138.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HotelRecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceStatus = RecServiceStatus.findByValue(iprot.readI32());
      struct.setServiceStatusIsSet(true);
      {
        org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.PoiRecList = new ArrayList<PoiRecInfo>(_list139.size);
        for (int _i140 = 0; _i140 < _list139.size; ++_i140)
        {
          PoiRecInfo _elem141; // required
          _elem141 = new PoiRecInfo();
          _elem141.read(iprot);
          struct.PoiRecList.add(_elem141);
        }
      }
      struct.setPoiRecListIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.recNum = iprot.readI32();
        struct.setRecNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.algorithm = iprot.readString();
        struct.setAlgorithmIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map142.size);
          for (int _i143 = 0; _i143 < _map142.size; ++_i143)
          {
            String _key144; // required
            String _val145; // required
            _key144 = iprot.readString();
            _val145 = iprot.readString();
            struct.extraDataMap.put(_key144, _val145);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
    }
  }

}

