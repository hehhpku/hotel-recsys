/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SelectRecExtraMsg implements org.apache.thrift.TBase<SelectRecExtraMsg, SelectRecExtraMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SelectRecExtraMsg");

  private static final org.apache.thrift.protocol.TField ROOM_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("roomTypeList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HOTEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelType", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandId", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("priceLow", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("priceHigh", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLocation", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("locationType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECEIPT_PROVIDED_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptProvided", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SelectRecExtraMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SelectRecExtraMsgTupleSchemeFactory());
  }

  public List<Integer> roomTypeList; // optional
  public List<Integer> hotelType; // optional
  public List<Integer> brandId; // optional
  public double priceLow; // optional
  public double priceHigh; // optional
  public Location requestLocation; // optional
  public int locationType; // optional
  public int businessType; // optional
  public int receiptProvided; // optional
  public Map<String,String> extraDataMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROOM_TYPE_LIST((short)1, "roomTypeList"),
    HOTEL_TYPE((short)2, "hotelType"),
    BRAND_ID((short)3, "brandId"),
    PRICE_LOW((short)4, "priceLow"),
    PRICE_HIGH((short)5, "priceHigh"),
    REQUEST_LOCATION((short)6, "requestLocation"),
    LOCATION_TYPE((short)7, "locationType"),
    BUSINESS_TYPE((short)8, "businessType"),
    RECEIPT_PROVIDED((short)9, "receiptProvided"),
    EXTRA_DATA_MAP((short)10, "extraDataMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOM_TYPE_LIST
          return ROOM_TYPE_LIST;
        case 2: // HOTEL_TYPE
          return HOTEL_TYPE;
        case 3: // BRAND_ID
          return BRAND_ID;
        case 4: // PRICE_LOW
          return PRICE_LOW;
        case 5: // PRICE_HIGH
          return PRICE_HIGH;
        case 6: // REQUEST_LOCATION
          return REQUEST_LOCATION;
        case 7: // LOCATION_TYPE
          return LOCATION_TYPE;
        case 8: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 9: // RECEIPT_PROVIDED
          return RECEIPT_PROVIDED;
        case 10: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICELOW_ISSET_ID = 0;
  private static final int __PRICEHIGH_ISSET_ID = 1;
  private static final int __LOCATIONTYPE_ISSET_ID = 2;
  private static final int __BUSINESSTYPE_ISSET_ID = 3;
  private static final int __RECEIPTPROVIDED_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.ROOM_TYPE_LIST,_Fields.HOTEL_TYPE,_Fields.BRAND_ID,_Fields.PRICE_LOW,_Fields.PRICE_HIGH,_Fields.REQUEST_LOCATION,_Fields.LOCATION_TYPE,_Fields.BUSINESS_TYPE,_Fields.RECEIPT_PROVIDED,_Fields.EXTRA_DATA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOM_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("roomTypeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOTEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hotelType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brandId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRICE_LOW, new org.apache.thrift.meta_data.FieldMetaData("priceLow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_HIGH, new org.apache.thrift.meta_data.FieldMetaData("priceHigh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("requestLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.LOCATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("locationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIPT_PROVIDED, new org.apache.thrift.meta_data.FieldMetaData("receiptProvided", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SelectRecExtraMsg.class, metaDataMap);
  }

  public SelectRecExtraMsg() {
    this.priceLow = -1;

    this.priceHigh = -1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SelectRecExtraMsg(SelectRecExtraMsg other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRoomTypeList()) {
      List<Integer> __this__roomTypeList = new ArrayList<Integer>();
      for (Integer other_element : other.roomTypeList) {
        __this__roomTypeList.add(other_element);
      }
      this.roomTypeList = __this__roomTypeList;
    }
    if (other.isSetHotelType()) {
      List<Integer> __this__hotelType = new ArrayList<Integer>();
      for (Integer other_element : other.hotelType) {
        __this__hotelType.add(other_element);
      }
      this.hotelType = __this__hotelType;
    }
    if (other.isSetBrandId()) {
      List<Integer> __this__brandId = new ArrayList<Integer>();
      for (Integer other_element : other.brandId) {
        __this__brandId.add(other_element);
      }
      this.brandId = __this__brandId;
    }
    this.priceLow = other.priceLow;
    this.priceHigh = other.priceHigh;
    if (other.isSetRequestLocation()) {
      this.requestLocation = new Location(other.requestLocation);
    }
    this.locationType = other.locationType;
    this.businessType = other.businessType;
    this.receiptProvided = other.receiptProvided;
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
  }

  public SelectRecExtraMsg deepCopy() {
    return new SelectRecExtraMsg(this);
  }

  @Override
  public void clear() {
    this.roomTypeList = null;
    this.hotelType = null;
    this.brandId = null;
    this.priceLow = -1;

    this.priceHigh = -1;

    this.requestLocation = null;
    setLocationTypeIsSet(false);
    this.locationType = 0;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    setReceiptProvidedIsSet(false);
    this.receiptProvided = 0;
    this.extraDataMap = null;
  }

  public int getRoomTypeListSize() {
    return (this.roomTypeList == null) ? 0 : this.roomTypeList.size();
  }

  public java.util.Iterator<Integer> getRoomTypeListIterator() {
    return (this.roomTypeList == null) ? null : this.roomTypeList.iterator();
  }

  public void addToRoomTypeList(int elem) {
    if (this.roomTypeList == null) {
      this.roomTypeList = new ArrayList<Integer>();
    }
    this.roomTypeList.add(elem);
  }

  public List<Integer> getRoomTypeList() {
    return this.roomTypeList;
  }

  public SelectRecExtraMsg setRoomTypeList(List<Integer> roomTypeList) {
    this.roomTypeList = roomTypeList;
    return this;
  }

  public void unsetRoomTypeList() {
    this.roomTypeList = null;
  }

  /** Returns true if field roomTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomTypeList() {
    return this.roomTypeList != null;
  }

  public void setRoomTypeListIsSet(boolean value) {
    if (!value) {
      this.roomTypeList = null;
    }
  }

  public int getHotelTypeSize() {
    return (this.hotelType == null) ? 0 : this.hotelType.size();
  }

  public java.util.Iterator<Integer> getHotelTypeIterator() {
    return (this.hotelType == null) ? null : this.hotelType.iterator();
  }

  public void addToHotelType(int elem) {
    if (this.hotelType == null) {
      this.hotelType = new ArrayList<Integer>();
    }
    this.hotelType.add(elem);
  }

  public List<Integer> getHotelType() {
    return this.hotelType;
  }

  public SelectRecExtraMsg setHotelType(List<Integer> hotelType) {
    this.hotelType = hotelType;
    return this;
  }

  public void unsetHotelType() {
    this.hotelType = null;
  }

  /** Returns true if field hotelType is set (has been assigned a value) and false otherwise */
  public boolean isSetHotelType() {
    return this.hotelType != null;
  }

  public void setHotelTypeIsSet(boolean value) {
    if (!value) {
      this.hotelType = null;
    }
  }

  public int getBrandIdSize() {
    return (this.brandId == null) ? 0 : this.brandId.size();
  }

  public java.util.Iterator<Integer> getBrandIdIterator() {
    return (this.brandId == null) ? null : this.brandId.iterator();
  }

  public void addToBrandId(int elem) {
    if (this.brandId == null) {
      this.brandId = new ArrayList<Integer>();
    }
    this.brandId.add(elem);
  }

  public List<Integer> getBrandId() {
    return this.brandId;
  }

  public SelectRecExtraMsg setBrandId(List<Integer> brandId) {
    this.brandId = brandId;
    return this;
  }

  public void unsetBrandId() {
    this.brandId = null;
  }

  /** Returns true if field brandId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return this.brandId != null;
  }

  public void setBrandIdIsSet(boolean value) {
    if (!value) {
      this.brandId = null;
    }
  }

  public double getPriceLow() {
    return this.priceLow;
  }

  public SelectRecExtraMsg setPriceLow(double priceLow) {
    this.priceLow = priceLow;
    setPriceLowIsSet(true);
    return this;
  }

  public void unsetPriceLow() {
    __isset_bit_vector.clear(__PRICELOW_ISSET_ID);
  }

  /** Returns true if field priceLow is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceLow() {
    return __isset_bit_vector.get(__PRICELOW_ISSET_ID);
  }

  public void setPriceLowIsSet(boolean value) {
    __isset_bit_vector.set(__PRICELOW_ISSET_ID, value);
  }

  public double getPriceHigh() {
    return this.priceHigh;
  }

  public SelectRecExtraMsg setPriceHigh(double priceHigh) {
    this.priceHigh = priceHigh;
    setPriceHighIsSet(true);
    return this;
  }

  public void unsetPriceHigh() {
    __isset_bit_vector.clear(__PRICEHIGH_ISSET_ID);
  }

  /** Returns true if field priceHigh is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceHigh() {
    return __isset_bit_vector.get(__PRICEHIGH_ISSET_ID);
  }

  public void setPriceHighIsSet(boolean value) {
    __isset_bit_vector.set(__PRICEHIGH_ISSET_ID, value);
  }

  public Location getRequestLocation() {
    return this.requestLocation;
  }

  public SelectRecExtraMsg setRequestLocation(Location requestLocation) {
    this.requestLocation = requestLocation;
    return this;
  }

  public void unsetRequestLocation() {
    this.requestLocation = null;
  }

  /** Returns true if field requestLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLocation() {
    return this.requestLocation != null;
  }

  public void setRequestLocationIsSet(boolean value) {
    if (!value) {
      this.requestLocation = null;
    }
  }

  public int getLocationType() {
    return this.locationType;
  }

  public SelectRecExtraMsg setLocationType(int locationType) {
    this.locationType = locationType;
    setLocationTypeIsSet(true);
    return this;
  }

  public void unsetLocationType() {
    __isset_bit_vector.clear(__LOCATIONTYPE_ISSET_ID);
  }

  /** Returns true if field locationType is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationType() {
    return __isset_bit_vector.get(__LOCATIONTYPE_ISSET_ID);
  }

  public void setLocationTypeIsSet(boolean value) {
    __isset_bit_vector.set(__LOCATIONTYPE_ISSET_ID, value);
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public SelectRecExtraMsg setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bit_vector.clear(__BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return __isset_bit_vector.get(__BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSTYPE_ISSET_ID, value);
  }

  public int getReceiptProvided() {
    return this.receiptProvided;
  }

  public SelectRecExtraMsg setReceiptProvided(int receiptProvided) {
    this.receiptProvided = receiptProvided;
    setReceiptProvidedIsSet(true);
    return this;
  }

  public void unsetReceiptProvided() {
    __isset_bit_vector.clear(__RECEIPTPROVIDED_ISSET_ID);
  }

  /** Returns true if field receiptProvided is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiptProvided() {
    return __isset_bit_vector.get(__RECEIPTPROVIDED_ISSET_ID);
  }

  public void setReceiptProvidedIsSet(boolean value) {
    __isset_bit_vector.set(__RECEIPTPROVIDED_ISSET_ID, value);
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public SelectRecExtraMsg setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROOM_TYPE_LIST:
      if (value == null) {
        unsetRoomTypeList();
      } else {
        setRoomTypeList((List<Integer>)value);
      }
      break;

    case HOTEL_TYPE:
      if (value == null) {
        unsetHotelType();
      } else {
        setHotelType((List<Integer>)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((List<Integer>)value);
      }
      break;

    case PRICE_LOW:
      if (value == null) {
        unsetPriceLow();
      } else {
        setPriceLow((Double)value);
      }
      break;

    case PRICE_HIGH:
      if (value == null) {
        unsetPriceHigh();
      } else {
        setPriceHigh((Double)value);
      }
      break;

    case REQUEST_LOCATION:
      if (value == null) {
        unsetRequestLocation();
      } else {
        setRequestLocation((Location)value);
      }
      break;

    case LOCATION_TYPE:
      if (value == null) {
        unsetLocationType();
      } else {
        setLocationType((Integer)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case RECEIPT_PROVIDED:
      if (value == null) {
        unsetReceiptProvided();
      } else {
        setReceiptProvided((Integer)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOM_TYPE_LIST:
      return getRoomTypeList();

    case HOTEL_TYPE:
      return getHotelType();

    case BRAND_ID:
      return getBrandId();

    case PRICE_LOW:
      return Double.valueOf(getPriceLow());

    case PRICE_HIGH:
      return Double.valueOf(getPriceHigh());

    case REQUEST_LOCATION:
      return getRequestLocation();

    case LOCATION_TYPE:
      return Integer.valueOf(getLocationType());

    case BUSINESS_TYPE:
      return Integer.valueOf(getBusinessType());

    case RECEIPT_PROVIDED:
      return Integer.valueOf(getReceiptProvided());

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROOM_TYPE_LIST:
      return isSetRoomTypeList();
    case HOTEL_TYPE:
      return isSetHotelType();
    case BRAND_ID:
      return isSetBrandId();
    case PRICE_LOW:
      return isSetPriceLow();
    case PRICE_HIGH:
      return isSetPriceHigh();
    case REQUEST_LOCATION:
      return isSetRequestLocation();
    case LOCATION_TYPE:
      return isSetLocationType();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case RECEIPT_PROVIDED:
      return isSetReceiptProvided();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SelectRecExtraMsg)
      return this.equals((SelectRecExtraMsg)that);
    return false;
  }

  public boolean equals(SelectRecExtraMsg that) {
    if (that == null)
      return false;

    boolean this_present_roomTypeList = true && this.isSetRoomTypeList();
    boolean that_present_roomTypeList = true && that.isSetRoomTypeList();
    if (this_present_roomTypeList || that_present_roomTypeList) {
      if (!(this_present_roomTypeList && that_present_roomTypeList))
        return false;
      if (!this.roomTypeList.equals(that.roomTypeList))
        return false;
    }

    boolean this_present_hotelType = true && this.isSetHotelType();
    boolean that_present_hotelType = true && that.isSetHotelType();
    if (this_present_hotelType || that_present_hotelType) {
      if (!(this_present_hotelType && that_present_hotelType))
        return false;
      if (!this.hotelType.equals(that.hotelType))
        return false;
    }

    boolean this_present_brandId = true && this.isSetBrandId();
    boolean that_present_brandId = true && that.isSetBrandId();
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (!this.brandId.equals(that.brandId))
        return false;
    }

    boolean this_present_priceLow = true && this.isSetPriceLow();
    boolean that_present_priceLow = true && that.isSetPriceLow();
    if (this_present_priceLow || that_present_priceLow) {
      if (!(this_present_priceLow && that_present_priceLow))
        return false;
      if (this.priceLow != that.priceLow)
        return false;
    }

    boolean this_present_priceHigh = true && this.isSetPriceHigh();
    boolean that_present_priceHigh = true && that.isSetPriceHigh();
    if (this_present_priceHigh || that_present_priceHigh) {
      if (!(this_present_priceHigh && that_present_priceHigh))
        return false;
      if (this.priceHigh != that.priceHigh)
        return false;
    }

    boolean this_present_requestLocation = true && this.isSetRequestLocation();
    boolean that_present_requestLocation = true && that.isSetRequestLocation();
    if (this_present_requestLocation || that_present_requestLocation) {
      if (!(this_present_requestLocation && that_present_requestLocation))
        return false;
      if (!this.requestLocation.equals(that.requestLocation))
        return false;
    }

    boolean this_present_locationType = true && this.isSetLocationType();
    boolean that_present_locationType = true && that.isSetLocationType();
    if (this_present_locationType || that_present_locationType) {
      if (!(this_present_locationType && that_present_locationType))
        return false;
      if (this.locationType != that.locationType)
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_receiptProvided = true && this.isSetReceiptProvided();
    boolean that_present_receiptProvided = true && that.isSetReceiptProvided();
    if (this_present_receiptProvided || that_present_receiptProvided) {
      if (!(this_present_receiptProvided && that_present_receiptProvided))
        return false;
      if (this.receiptProvided != that.receiptProvided)
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SelectRecExtraMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SelectRecExtraMsg typedOther = (SelectRecExtraMsg)other;

    lastComparison = Boolean.valueOf(isSetRoomTypeList()).compareTo(typedOther.isSetRoomTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomTypeList, typedOther.roomTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotelType()).compareTo(typedOther.isSetHotelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelType, typedOther.hotelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(typedOther.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandId, typedOther.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceLow()).compareTo(typedOther.isSetPriceLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceLow, typedOther.priceLow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceHigh()).compareTo(typedOther.isSetPriceHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceHigh, typedOther.priceHigh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLocation()).compareTo(typedOther.isSetRequestLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLocation, typedOther.requestLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationType()).compareTo(typedOther.isSetLocationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationType, typedOther.locationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(typedOther.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, typedOther.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiptProvided()).compareTo(typedOther.isSetReceiptProvided());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiptProvided()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptProvided, typedOther.receiptProvided);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SelectRecExtraMsg(");
    boolean first = true;

    if (isSetRoomTypeList()) {
      sb.append("roomTypeList:");
      if (this.roomTypeList == null) {
        sb.append("null");
      } else {
        sb.append(this.roomTypeList);
      }
      first = false;
    }
    if (isSetHotelType()) {
      if (!first) sb.append(", ");
      sb.append("hotelType:");
      if (this.hotelType == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelType);
      }
      first = false;
    }
    if (isSetBrandId()) {
      if (!first) sb.append(", ");
      sb.append("brandId:");
      if (this.brandId == null) {
        sb.append("null");
      } else {
        sb.append(this.brandId);
      }
      first = false;
    }
    if (isSetPriceLow()) {
      if (!first) sb.append(", ");
      sb.append("priceLow:");
      sb.append(this.priceLow);
      first = false;
    }
    if (isSetPriceHigh()) {
      if (!first) sb.append(", ");
      sb.append("priceHigh:");
      sb.append(this.priceHigh);
      first = false;
    }
    if (isSetRequestLocation()) {
      if (!first) sb.append(", ");
      sb.append("requestLocation:");
      if (this.requestLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.requestLocation);
      }
      first = false;
    }
    if (isSetLocationType()) {
      if (!first) sb.append(", ");
      sb.append("locationType:");
      sb.append(this.locationType);
      first = false;
    }
    if (isSetBusinessType()) {
      if (!first) sb.append(", ");
      sb.append("businessType:");
      sb.append(this.businessType);
      first = false;
    }
    if (isSetReceiptProvided()) {
      if (!first) sb.append(", ");
      sb.append("receiptProvided:");
      sb.append(this.receiptProvided);
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SelectRecExtraMsgStandardSchemeFactory implements SchemeFactory {
    public SelectRecExtraMsgStandardScheme getScheme() {
      return new SelectRecExtraMsgStandardScheme();
    }
  }

  private static class SelectRecExtraMsgStandardScheme extends StandardScheme<SelectRecExtraMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SelectRecExtraMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOM_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.roomTypeList = new ArrayList<Integer>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  int _elem48; // required
                  _elem48 = iprot.readI32();
                  struct.roomTypeList.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setRoomTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOTEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.hotelType = new ArrayList<Integer>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  int _elem51; // required
                  _elem51 = iprot.readI32();
                  struct.hotelType.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setHotelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.brandId = new ArrayList<Integer>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  int _elem54; // required
                  _elem54 = iprot.readI32();
                  struct.brandId.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setBrandIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE_LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceLow = iprot.readDouble();
              struct.setPriceLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE_HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceHigh = iprot.readDouble();
              struct.setPriceHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestLocation = new Location();
              struct.requestLocation.read(iprot);
              struct.setRequestLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationType = iprot.readI32();
              struct.setLocationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECEIPT_PROVIDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiptProvided = iprot.readI32();
              struct.setReceiptProvidedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map55.size);
                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
                {
                  String _key57; // required
                  String _val58; // required
                  _key57 = iprot.readString();
                  _val58 = iprot.readString();
                  struct.extraDataMap.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SelectRecExtraMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.roomTypeList != null) {
        if (struct.isSetRoomTypeList()) {
          oprot.writeFieldBegin(ROOM_TYPE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.roomTypeList.size()));
            for (int _iter59 : struct.roomTypeList)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hotelType != null) {
        if (struct.isSetHotelType()) {
          oprot.writeFieldBegin(HOTEL_TYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.hotelType.size()));
            for (int _iter60 : struct.hotelType)
            {
              oprot.writeI32(_iter60);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.brandId != null) {
        if (struct.isSetBrandId()) {
          oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brandId.size()));
            for (int _iter61 : struct.brandId)
            {
              oprot.writeI32(_iter61);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPriceLow()) {
        oprot.writeFieldBegin(PRICE_LOW_FIELD_DESC);
        oprot.writeDouble(struct.priceLow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceHigh()) {
        oprot.writeFieldBegin(PRICE_HIGH_FIELD_DESC);
        oprot.writeDouble(struct.priceHigh);
        oprot.writeFieldEnd();
      }
      if (struct.requestLocation != null) {
        if (struct.isSetRequestLocation()) {
          oprot.writeFieldBegin(REQUEST_LOCATION_FIELD_DESC);
          struct.requestLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLocationType()) {
        oprot.writeFieldBegin(LOCATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.locationType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBusinessType()) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReceiptProvided()) {
        oprot.writeFieldBegin(RECEIPT_PROVIDED_FIELD_DESC);
        oprot.writeI32(struct.receiptProvided);
        oprot.writeFieldEnd();
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter62 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SelectRecExtraMsgTupleSchemeFactory implements SchemeFactory {
    public SelectRecExtraMsgTupleScheme getScheme() {
      return new SelectRecExtraMsgTupleScheme();
    }
  }

  private static class SelectRecExtraMsgTupleScheme extends TupleScheme<SelectRecExtraMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SelectRecExtraMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoomTypeList()) {
        optionals.set(0);
      }
      if (struct.isSetHotelType()) {
        optionals.set(1);
      }
      if (struct.isSetBrandId()) {
        optionals.set(2);
      }
      if (struct.isSetPriceLow()) {
        optionals.set(3);
      }
      if (struct.isSetPriceHigh()) {
        optionals.set(4);
      }
      if (struct.isSetRequestLocation()) {
        optionals.set(5);
      }
      if (struct.isSetLocationType()) {
        optionals.set(6);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(7);
      }
      if (struct.isSetReceiptProvided()) {
        optionals.set(8);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRoomTypeList()) {
        {
          oprot.writeI32(struct.roomTypeList.size());
          for (int _iter63 : struct.roomTypeList)
          {
            oprot.writeI32(_iter63);
          }
        }
      }
      if (struct.isSetHotelType()) {
        {
          oprot.writeI32(struct.hotelType.size());
          for (int _iter64 : struct.hotelType)
          {
            oprot.writeI32(_iter64);
          }
        }
      }
      if (struct.isSetBrandId()) {
        {
          oprot.writeI32(struct.brandId.size());
          for (int _iter65 : struct.brandId)
          {
            oprot.writeI32(_iter65);
          }
        }
      }
      if (struct.isSetPriceLow()) {
        oprot.writeDouble(struct.priceLow);
      }
      if (struct.isSetPriceHigh()) {
        oprot.writeDouble(struct.priceHigh);
      }
      if (struct.isSetRequestLocation()) {
        struct.requestLocation.write(oprot);
      }
      if (struct.isSetLocationType()) {
        oprot.writeI32(struct.locationType);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetReceiptProvided()) {
        oprot.writeI32(struct.receiptProvided);
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter66 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter66.getKey());
            oprot.writeString(_iter66.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SelectRecExtraMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.roomTypeList = new ArrayList<Integer>(_list67.size);
          for (int _i68 = 0; _i68 < _list67.size; ++_i68)
          {
            int _elem69; // required
            _elem69 = iprot.readI32();
            struct.roomTypeList.add(_elem69);
          }
        }
        struct.setRoomTypeListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.hotelType = new ArrayList<Integer>(_list70.size);
          for (int _i71 = 0; _i71 < _list70.size; ++_i71)
          {
            int _elem72; // required
            _elem72 = iprot.readI32();
            struct.hotelType.add(_elem72);
          }
        }
        struct.setHotelTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brandId = new ArrayList<Integer>(_list73.size);
          for (int _i74 = 0; _i74 < _list73.size; ++_i74)
          {
            int _elem75; // required
            _elem75 = iprot.readI32();
            struct.brandId.add(_elem75);
          }
        }
        struct.setBrandIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.priceLow = iprot.readDouble();
        struct.setPriceLowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priceHigh = iprot.readDouble();
        struct.setPriceHighIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestLocation = new Location();
        struct.requestLocation.read(iprot);
        struct.setRequestLocationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.locationType = iprot.readI32();
        struct.setLocationTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.receiptProvided = iprot.readI32();
        struct.setReceiptProvidedIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map76.size);
          for (int _i77 = 0; _i77 < _map76.size; ++_i77)
          {
            String _key78; // required
            String _val79; // required
            _key78 = iprot.readString();
            _val79 = iprot.readString();
            struct.extraDataMap.put(_key78, _val79);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
    }
  }

}

