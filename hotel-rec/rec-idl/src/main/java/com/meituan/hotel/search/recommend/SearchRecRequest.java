/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.search.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchRecRequest implements org.apache.thrift.TBase<SearchRecRequest, SearchRecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchRecRequest");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDERBY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderby", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cateId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NEW_CATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("newCateSystem", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField EXTENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensions", org.apache.thrift.protocol.TType.MAP, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchRecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchRecRequestTupleSchemeFactory());
  }

  public String query; // required
  public String city; // required
  public int offset; // optional
  public int limit; // optional
  public String orderby; // optional
  public String location; // optional
  public int distance; // optional
  public Map<String,String> filters; // optional
  public String uuid; // optional
  public String cateId; // optional
  public String areaId; // optional
  public boolean newCateSystem; // optional
  /**
   * 
   * @see PoiSearchSource
   */
  public PoiSearchSource source; // optional
  public long beginTime; // optional
  public long endTime; // optional
  public Map<String,String> extensions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    CITY((short)2, "city"),
    OFFSET((short)5, "offset"),
    LIMIT((short)6, "limit"),
    ORDERBY((short)7, "orderby"),
    LOCATION((short)8, "location"),
    DISTANCE((short)9, "distance"),
    FILTERS((short)10, "filters"),
    UUID((short)11, "uuid"),
    CATE_ID((short)12, "cateId"),
    AREA_ID((short)13, "areaId"),
    NEW_CATE_SYSTEM((short)14, "newCateSystem"),
    /**
     * 
     * @see PoiSearchSource
     */
    SOURCE((short)15, "source"),
    BEGIN_TIME((short)16, "beginTime"),
    END_TIME((short)17, "endTime"),
    EXTENSIONS((short)30, "extensions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // CITY
          return CITY;
        case 5: // OFFSET
          return OFFSET;
        case 6: // LIMIT
          return LIMIT;
        case 7: // ORDERBY
          return ORDERBY;
        case 8: // LOCATION
          return LOCATION;
        case 9: // DISTANCE
          return DISTANCE;
        case 10: // FILTERS
          return FILTERS;
        case 11: // UUID
          return UUID;
        case 12: // CATE_ID
          return CATE_ID;
        case 13: // AREA_ID
          return AREA_ID;
        case 14: // NEW_CATE_SYSTEM
          return NEW_CATE_SYSTEM;
        case 15: // SOURCE
          return SOURCE;
        case 16: // BEGIN_TIME
          return BEGIN_TIME;
        case 17: // END_TIME
          return END_TIME;
        case 30: // EXTENSIONS
          return EXTENSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __LIMIT_ISSET_ID = 1;
  private static final int __DISTANCE_ISSET_ID = 2;
  private static final int __NEWCATESYSTEM_ISSET_ID = 3;
  private static final int __BEGINTIME_ISSET_ID = 4;
  private static final int __ENDTIME_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.OFFSET,_Fields.LIMIT,_Fields.ORDERBY,_Fields.LOCATION,_Fields.DISTANCE,_Fields.FILTERS,_Fields.UUID,_Fields.CATE_ID,_Fields.AREA_ID,_Fields.NEW_CATE_SYSTEM,_Fields.SOURCE,_Fields.BEGIN_TIME,_Fields.END_TIME,_Fields.EXTENSIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDERBY, new org.apache.thrift.meta_data.FieldMetaData("orderby", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATE_ID, new org.apache.thrift.meta_data.FieldMetaData("cateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_CATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("newCateSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PoiSearchSource.class)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTENSIONS, new org.apache.thrift.meta_data.FieldMetaData("extensions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchRecRequest.class, metaDataMap);
  }

  public SearchRecRequest() {
    this.query = "";

    this.city = "";

    this.offset = 0;

    this.limit = 1000;

    this.orderby = "";

    this.location = "";

    this.uuid = "";

    this.cateId = "";

    this.areaId = "";

    this.newCateSystem = false;

    this.source = com.meituan.hotel.search.recommend.PoiSearchSource.DEFAULT;

    this.beginTime = 0L;

    this.endTime = 0L;

  }

  public SearchRecRequest(
    String query,
    String city)
  {
    this();
    this.query = query;
    this.city = city;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchRecRequest(SearchRecRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.offset = other.offset;
    this.limit = other.limit;
    if (other.isSetOrderby()) {
      this.orderby = other.orderby;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.distance = other.distance;
    if (other.isSetFilters()) {
      Map<String,String> __this__filters = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.filters.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__filters_copy_key = other_element_key;

        String __this__filters_copy_value = other_element_value;

        __this__filters.put(__this__filters_copy_key, __this__filters_copy_value);
      }
      this.filters = __this__filters;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetCateId()) {
      this.cateId = other.cateId;
    }
    if (other.isSetAreaId()) {
      this.areaId = other.areaId;
    }
    this.newCateSystem = other.newCateSystem;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.beginTime = other.beginTime;
    this.endTime = other.endTime;
    if (other.isSetExtensions()) {
      Map<String,String> __this__extensions = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extensions.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extensions_copy_key = other_element_key;

        String __this__extensions_copy_value = other_element_value;

        __this__extensions.put(__this__extensions_copy_key, __this__extensions_copy_value);
      }
      this.extensions = __this__extensions;
    }
  }

  public SearchRecRequest deepCopy() {
    return new SearchRecRequest(this);
  }

  @Override
  public void clear() {
    this.query = "";

    this.city = "";

    this.offset = 0;

    this.limit = 1000;

    this.orderby = "";

    this.location = "";

    setDistanceIsSet(false);
    this.distance = 0;
    this.filters = null;
    this.uuid = "";

    this.cateId = "";

    this.areaId = "";

    this.newCateSystem = false;

    this.source = com.meituan.hotel.search.recommend.PoiSearchSource.DEFAULT;

    this.beginTime = 0L;

    this.endTime = 0L;

    this.extensions = null;
  }

  public String getQuery() {
    return this.query;
  }

  public SearchRecRequest setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public SearchRecRequest setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public SearchRecRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bit_vector.clear(__OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return __isset_bit_vector.get(__OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public SearchRecRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bit_vector.clear(__LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return __isset_bit_vector.get(__LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bit_vector.set(__LIMIT_ISSET_ID, value);
  }

  public String getOrderby() {
    return this.orderby;
  }

  public SearchRecRequest setOrderby(String orderby) {
    this.orderby = orderby;
    return this;
  }

  public void unsetOrderby() {
    this.orderby = null;
  }

  /** Returns true if field orderby is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderby() {
    return this.orderby != null;
  }

  public void setOrderbyIsSet(boolean value) {
    if (!value) {
      this.orderby = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public SearchRecRequest setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getDistance() {
    return this.distance;
  }

  public SearchRecRequest setDistance(int distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bit_vector.clear(__DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return __isset_bit_vector.get(__DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCE_ISSET_ID, value);
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  public void putToFilters(String key, String val) {
    if (this.filters == null) {
      this.filters = new HashMap<String,String>();
    }
    this.filters.put(key, val);
  }

  public Map<String,String> getFilters() {
    return this.filters;
  }

  public SearchRecRequest setFilters(Map<String,String> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public String getUuid() {
    return this.uuid;
  }

  public SearchRecRequest setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getCateId() {
    return this.cateId;
  }

  public SearchRecRequest setCateId(String cateId) {
    this.cateId = cateId;
    return this;
  }

  public void unsetCateId() {
    this.cateId = null;
  }

  /** Returns true if field cateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCateId() {
    return this.cateId != null;
  }

  public void setCateIdIsSet(boolean value) {
    if (!value) {
      this.cateId = null;
    }
  }

  public String getAreaId() {
    return this.areaId;
  }

  public SearchRecRequest setAreaId(String areaId) {
    this.areaId = areaId;
    return this;
  }

  public void unsetAreaId() {
    this.areaId = null;
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return this.areaId != null;
  }

  public void setAreaIdIsSet(boolean value) {
    if (!value) {
      this.areaId = null;
    }
  }

  public boolean isNewCateSystem() {
    return this.newCateSystem;
  }

  public SearchRecRequest setNewCateSystem(boolean newCateSystem) {
    this.newCateSystem = newCateSystem;
    setNewCateSystemIsSet(true);
    return this;
  }

  public void unsetNewCateSystem() {
    __isset_bit_vector.clear(__NEWCATESYSTEM_ISSET_ID);
  }

  /** Returns true if field newCateSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetNewCateSystem() {
    return __isset_bit_vector.get(__NEWCATESYSTEM_ISSET_ID);
  }

  public void setNewCateSystemIsSet(boolean value) {
    __isset_bit_vector.set(__NEWCATESYSTEM_ISSET_ID, value);
  }

  /**
   * 
   * @see PoiSearchSource
   */
  public PoiSearchSource getSource() {
    return this.source;
  }

  /**
   * 
   * @see PoiSearchSource
   */
  public SearchRecRequest setSource(PoiSearchSource source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getBeginTime() {
    return this.beginTime;
  }

  public SearchRecRequest setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bit_vector.clear(__BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return __isset_bit_vector.get(__BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bit_vector.set(__BEGINTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public SearchRecRequest setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
  }

  public int getExtensionsSize() {
    return (this.extensions == null) ? 0 : this.extensions.size();
  }

  public void putToExtensions(String key, String val) {
    if (this.extensions == null) {
      this.extensions = new HashMap<String,String>();
    }
    this.extensions.put(key, val);
  }

  public Map<String,String> getExtensions() {
    return this.extensions;
  }

  public SearchRecRequest setExtensions(Map<String,String> extensions) {
    this.extensions = extensions;
    return this;
  }

  public void unsetExtensions() {
    this.extensions = null;
  }

  /** Returns true if field extensions is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensions() {
    return this.extensions != null;
  }

  public void setExtensionsIsSet(boolean value) {
    if (!value) {
      this.extensions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case ORDERBY:
      if (value == null) {
        unsetOrderby();
      } else {
        setOrderby((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Integer)value);
      }
      break;

    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((Map<String,String>)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case CATE_ID:
      if (value == null) {
        unsetCateId();
      } else {
        setCateId((String)value);
      }
      break;

    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((String)value);
      }
      break;

    case NEW_CATE_SYSTEM:
      if (value == null) {
        unsetNewCateSystem();
      } else {
        setNewCateSystem((Boolean)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((PoiSearchSource)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case EXTENSIONS:
      if (value == null) {
        unsetExtensions();
      } else {
        setExtensions((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case CITY:
      return getCity();

    case OFFSET:
      return Integer.valueOf(getOffset());

    case LIMIT:
      return Integer.valueOf(getLimit());

    case ORDERBY:
      return getOrderby();

    case LOCATION:
      return getLocation();

    case DISTANCE:
      return Integer.valueOf(getDistance());

    case FILTERS:
      return getFilters();

    case UUID:
      return getUuid();

    case CATE_ID:
      return getCateId();

    case AREA_ID:
      return getAreaId();

    case NEW_CATE_SYSTEM:
      return Boolean.valueOf(isNewCateSystem());

    case SOURCE:
      return getSource();

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case EXTENSIONS:
      return getExtensions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case CITY:
      return isSetCity();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    case ORDERBY:
      return isSetOrderby();
    case LOCATION:
      return isSetLocation();
    case DISTANCE:
      return isSetDistance();
    case FILTERS:
      return isSetFilters();
    case UUID:
      return isSetUuid();
    case CATE_ID:
      return isSetCateId();
    case AREA_ID:
      return isSetAreaId();
    case NEW_CATE_SYSTEM:
      return isSetNewCateSystem();
    case SOURCE:
      return isSetSource();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case EXTENSIONS:
      return isSetExtensions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchRecRequest)
      return this.equals((SearchRecRequest)that);
    return false;
  }

  public boolean equals(SearchRecRequest that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_orderby = true && this.isSetOrderby();
    boolean that_present_orderby = true && that.isSetOrderby();
    if (this_present_orderby || that_present_orderby) {
      if (!(this_present_orderby && that_present_orderby))
        return false;
      if (!this.orderby.equals(that.orderby))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_distance = true && this.isSetDistance();
    boolean that_present_distance = true && that.isSetDistance();
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_cateId = true && this.isSetCateId();
    boolean that_present_cateId = true && that.isSetCateId();
    if (this_present_cateId || that_present_cateId) {
      if (!(this_present_cateId && that_present_cateId))
        return false;
      if (!this.cateId.equals(that.cateId))
        return false;
    }

    boolean this_present_areaId = true && this.isSetAreaId();
    boolean that_present_areaId = true && that.isSetAreaId();
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (!this.areaId.equals(that.areaId))
        return false;
    }

    boolean this_present_newCateSystem = true && this.isSetNewCateSystem();
    boolean that_present_newCateSystem = true && that.isSetNewCateSystem();
    if (this_present_newCateSystem || that_present_newCateSystem) {
      if (!(this_present_newCateSystem && that_present_newCateSystem))
        return false;
      if (this.newCateSystem != that.newCateSystem)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_beginTime = true && this.isSetBeginTime();
    boolean that_present_beginTime = true && that.isSetBeginTime();
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_extensions = true && this.isSetExtensions();
    boolean that_present_extensions = true && that.isSetExtensions();
    if (this_present_extensions || that_present_extensions) {
      if (!(this_present_extensions && that_present_extensions))
        return false;
      if (!this.extensions.equals(that.extensions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SearchRecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SearchRecRequest typedOther = (SearchRecRequest)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderby()).compareTo(typedOther.isSetOrderby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderby, typedOther.orderby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(typedOther.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, typedOther.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters()).compareTo(typedOther.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, typedOther.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCateId()).compareTo(typedOther.isSetCateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cateId, typedOther.cateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(typedOther.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, typedOther.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewCateSystem()).compareTo(typedOther.isSetNewCateSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewCateSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCateSystem, typedOther.newCateSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensions()).compareTo(typedOther.isSetExtensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensions, typedOther.extensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchRecRequest(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetOrderby()) {
      if (!first) sb.append(", ");
      sb.append("orderby:");
      if (this.orderby == null) {
        sb.append("null");
      } else {
        sb.append(this.orderby);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetDistance()) {
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
    }
    if (isSetFilters()) {
      if (!first) sb.append(", ");
      sb.append("filters:");
      if (this.filters == null) {
        sb.append("null");
      } else {
        sb.append(this.filters);
      }
      first = false;
    }
    if (isSetUuid()) {
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    if (isSetCateId()) {
      if (!first) sb.append(", ");
      sb.append("cateId:");
      if (this.cateId == null) {
        sb.append("null");
      } else {
        sb.append(this.cateId);
      }
      first = false;
    }
    if (isSetAreaId()) {
      if (!first) sb.append(", ");
      sb.append("areaId:");
      if (this.areaId == null) {
        sb.append("null");
      } else {
        sb.append(this.areaId);
      }
      first = false;
    }
    if (isSetNewCateSystem()) {
      if (!first) sb.append(", ");
      sb.append("newCateSystem:");
      sb.append(this.newCateSystem);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetBeginTime()) {
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      sb.append(this.beginTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (isSetExtensions()) {
      if (!first) sb.append(", ");
      sb.append("extensions:");
      if (this.extensions == null) {
        sb.append("null");
      } else {
        sb.append(this.extensions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchRecRequestStandardSchemeFactory implements SchemeFactory {
    public SearchRecRequestStandardScheme getScheme() {
      return new SearchRecRequestStandardScheme();
    }
  }

  private static class SearchRecRequestStandardScheme extends StandardScheme<SearchRecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchRecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDERBY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderby = iprot.readString();
              struct.setOrderbyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distance = iprot.readI32();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.filters = new HashMap<String,String>(2*_map38.size);
                for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                {
                  String _key40; // required
                  String _val41; // required
                  _key40 = iprot.readString();
                  _val41 = iprot.readString();
                  struct.filters.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cateId = iprot.readString();
              struct.setCateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaId = iprot.readString();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NEW_CATE_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.newCateSystem = iprot.readBool();
              struct.setNewCateSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = PoiSearchSource.findByValue(iprot.readI32());
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXTENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.extensions = new HashMap<String,String>(2*_map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                {
                  String _key44; // required
                  String _val45; // required
                  _key44 = iprot.readString();
                  _val45 = iprot.readString();
                  struct.extensions.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
              struct.setExtensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchRecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.orderby != null) {
        if (struct.isSetOrderby()) {
          oprot.writeFieldBegin(ORDERBY_FIELD_DESC);
          oprot.writeString(struct.orderby);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeI32(struct.distance);
        oprot.writeFieldEnd();
      }
      if (struct.filters != null) {
        if (struct.isSetFilters()) {
          oprot.writeFieldBegin(FILTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.filters.size()));
            for (Map.Entry<String, String> _iter46 : struct.filters.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeString(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.uuid != null) {
        if (struct.isSetUuid()) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cateId != null) {
        if (struct.isSetCateId()) {
          oprot.writeFieldBegin(CATE_ID_FIELD_DESC);
          oprot.writeString(struct.cateId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.areaId != null) {
        if (struct.isSetAreaId()) {
          oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
          oprot.writeString(struct.areaId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNewCateSystem()) {
        oprot.writeFieldBegin(NEW_CATE_SYSTEM_FIELD_DESC);
        oprot.writeBool(struct.newCateSystem);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeI32(struct.source.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBeginTime()) {
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeI64(struct.beginTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.extensions != null) {
        if (struct.isSetExtensions()) {
          oprot.writeFieldBegin(EXTENSIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extensions.size()));
            for (Map.Entry<String, String> _iter47 : struct.extensions.entrySet())
            {
              oprot.writeString(_iter47.getKey());
              oprot.writeString(_iter47.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchRecRequestTupleSchemeFactory implements SchemeFactory {
    public SearchRecRequestTupleScheme getScheme() {
      return new SearchRecRequestTupleScheme();
    }
  }

  private static class SearchRecRequestTupleScheme extends TupleScheme<SearchRecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query);
      oprot.writeString(struct.city);
      BitSet optionals = new BitSet();
      if (struct.isSetOffset()) {
        optionals.set(0);
      }
      if (struct.isSetLimit()) {
        optionals.set(1);
      }
      if (struct.isSetOrderby()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetDistance()) {
        optionals.set(4);
      }
      if (struct.isSetFilters()) {
        optionals.set(5);
      }
      if (struct.isSetUuid()) {
        optionals.set(6);
      }
      if (struct.isSetCateId()) {
        optionals.set(7);
      }
      if (struct.isSetAreaId()) {
        optionals.set(8);
      }
      if (struct.isSetNewCateSystem()) {
        optionals.set(9);
      }
      if (struct.isSetSource()) {
        optionals.set(10);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(11);
      }
      if (struct.isSetEndTime()) {
        optionals.set(12);
      }
      if (struct.isSetExtensions()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetOrderby()) {
        oprot.writeString(struct.orderby);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetDistance()) {
        oprot.writeI32(struct.distance);
      }
      if (struct.isSetFilters()) {
        {
          oprot.writeI32(struct.filters.size());
          for (Map.Entry<String, String> _iter48 : struct.filters.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
        }
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetCateId()) {
        oprot.writeString(struct.cateId);
      }
      if (struct.isSetAreaId()) {
        oprot.writeString(struct.areaId);
      }
      if (struct.isSetNewCateSystem()) {
        oprot.writeBool(struct.newCateSystem);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source.getValue());
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetExtensions()) {
        {
          oprot.writeI32(struct.extensions.size());
          for (Map.Entry<String, String> _iter49 : struct.extensions.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeString(_iter49.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderby = iprot.readString();
        struct.setOrderbyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.distance = iprot.readI32();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filters = new HashMap<String,String>(2*_map50.size);
          for (int _i51 = 0; _i51 < _map50.size; ++_i51)
          {
            String _key52; // required
            String _val53; // required
            _key52 = iprot.readString();
            _val53 = iprot.readString();
            struct.filters.put(_key52, _val53);
          }
        }
        struct.setFiltersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cateId = iprot.readString();
        struct.setCateIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.areaId = iprot.readString();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.newCateSystem = iprot.readBool();
        struct.setNewCateSystemIsSet(true);
      }
      if (incoming.get(10)) {
        struct.source = PoiSearchSource.findByValue(iprot.readI32());
        struct.setSourceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extensions = new HashMap<String,String>(2*_map54.size);
          for (int _i55 = 0; _i55 < _map54.size; ++_i55)
          {
            String _key56; // required
            String _val57; // required
            _key56 = iprot.readString();
            _val57 = iprot.readString();
            struct.extensions.put(_key56, _val57);
          }
        }
        struct.setExtensionsIsSet(true);
      }
    }
  }

}

