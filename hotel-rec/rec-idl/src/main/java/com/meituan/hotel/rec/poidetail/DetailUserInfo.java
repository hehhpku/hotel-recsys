/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.poidetail;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DetailUserInfo implements org.apache.thrift.TBase<DetailUserInfo, DetailUserInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetailUserInfo");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOMMODATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accommodationType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("userLat", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("userLng", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_CHECK_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCheckIn", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_CHECK_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCheckOut", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userCityId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField APP_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCityId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCityId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DetailUserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DetailUserInfoTupleSchemeFactory());
  }

  public String uuid; // required
  public long userId; // optional
  public String accommodationType; // optional
  public double userLat; // optional
  public double userLng; // optional
  public int dateCheckIn; // optional
  public int dateCheckOut; // optional
  public String clientType; // optional
  public String appVersion; // optional
  public int userCityId; // optional
  public int appCityId; // optional
  public int channelCityId; // optional
  public long actionTime; // optional
  public Map<String,String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    USER_ID((short)2, "userId"),
    ACCOMMODATION_TYPE((short)3, "accommodationType"),
    USER_LAT((short)4, "userLat"),
    USER_LNG((short)5, "userLng"),
    DATE_CHECK_IN((short)6, "dateCheckIn"),
    DATE_CHECK_OUT((short)7, "dateCheckOut"),
    CLIENT_TYPE((short)8, "clientType"),
    APP_VERSION((short)9, "appVersion"),
    USER_CITY_ID((short)10, "userCityId"),
    APP_CITY_ID((short)11, "appCityId"),
    CHANNEL_CITY_ID((short)12, "channelCityId"),
    ACTION_TIME((short)13, "actionTime"),
    EXTRA_MAP((short)14, "extraMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // ACCOMMODATION_TYPE
          return ACCOMMODATION_TYPE;
        case 4: // USER_LAT
          return USER_LAT;
        case 5: // USER_LNG
          return USER_LNG;
        case 6: // DATE_CHECK_IN
          return DATE_CHECK_IN;
        case 7: // DATE_CHECK_OUT
          return DATE_CHECK_OUT;
        case 8: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 9: // APP_VERSION
          return APP_VERSION;
        case 10: // USER_CITY_ID
          return USER_CITY_ID;
        case 11: // APP_CITY_ID
          return APP_CITY_ID;
        case 12: // CHANNEL_CITY_ID
          return CHANNEL_CITY_ID;
        case 13: // ACTION_TIME
          return ACTION_TIME;
        case 14: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __USERLAT_ISSET_ID = 1;
  private static final int __USERLNG_ISSET_ID = 2;
  private static final int __DATECHECKIN_ISSET_ID = 3;
  private static final int __DATECHECKOUT_ISSET_ID = 4;
  private static final int __USERCITYID_ISSET_ID = 5;
  private static final int __APPCITYID_ISSET_ID = 6;
  private static final int __CHANNELCITYID_ISSET_ID = 7;
  private static final int __ACTIONTIME_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  private _Fields optionals[] = {_Fields.USER_ID,_Fields.ACCOMMODATION_TYPE,_Fields.USER_LAT,_Fields.USER_LNG,_Fields.DATE_CHECK_IN,_Fields.DATE_CHECK_OUT,_Fields.CLIENT_TYPE,_Fields.APP_VERSION,_Fields.USER_CITY_ID,_Fields.APP_CITY_ID,_Fields.CHANNEL_CITY_ID,_Fields.ACTION_TIME,_Fields.EXTRA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOMMODATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accommodationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LAT, new org.apache.thrift.meta_data.FieldMetaData("userLat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_LNG, new org.apache.thrift.meta_data.FieldMetaData("userLng", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE_CHECK_IN, new org.apache.thrift.meta_data.FieldMetaData("dateCheckIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_CHECK_OUT, new org.apache.thrift.meta_data.FieldMetaData("dateCheckOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("userCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("appCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("channelCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetailUserInfo.class, metaDataMap);
  }

  public DetailUserInfo() {
    this.userId = -1L;

    this.accommodationType = "DR";

  }

  public DetailUserInfo(
    String uuid)
  {
    this();
    this.uuid = uuid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetailUserInfo(DetailUserInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    this.userId = other.userId;
    if (other.isSetAccommodationType()) {
      this.accommodationType = other.accommodationType;
    }
    this.userLat = other.userLat;
    this.userLng = other.userLng;
    this.dateCheckIn = other.dateCheckIn;
    this.dateCheckOut = other.dateCheckOut;
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    this.userCityId = other.userCityId;
    this.appCityId = other.appCityId;
    this.channelCityId = other.channelCityId;
    this.actionTime = other.actionTime;
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraMap_copy_key = other_element_key;

        String __this__extraMap_copy_value = other_element_value;

        __this__extraMap.put(__this__extraMap_copy_key, __this__extraMap_copy_value);
      }
      this.extraMap = __this__extraMap;
    }
  }

  public DetailUserInfo deepCopy() {
    return new DetailUserInfo(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.userId = -1L;

    this.accommodationType = "DR";

    setUserLatIsSet(false);
    this.userLat = 0.0;
    setUserLngIsSet(false);
    this.userLng = 0.0;
    setDateCheckInIsSet(false);
    this.dateCheckIn = 0;
    setDateCheckOutIsSet(false);
    this.dateCheckOut = 0;
    this.clientType = null;
    this.appVersion = null;
    setUserCityIdIsSet(false);
    this.userCityId = 0;
    setAppCityIdIsSet(false);
    this.appCityId = 0;
    setChannelCityIdIsSet(false);
    this.channelCityId = 0;
    setActionTimeIsSet(false);
    this.actionTime = 0;
    this.extraMap = null;
  }

  public String getUuid() {
    return this.uuid;
  }

  public DetailUserInfo setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public DetailUserInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getAccommodationType() {
    return this.accommodationType;
  }

  public DetailUserInfo setAccommodationType(String accommodationType) {
    this.accommodationType = accommodationType;
    return this;
  }

  public void unsetAccommodationType() {
    this.accommodationType = null;
  }

  /** Returns true if field accommodationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccommodationType() {
    return this.accommodationType != null;
  }

  public void setAccommodationTypeIsSet(boolean value) {
    if (!value) {
      this.accommodationType = null;
    }
  }

  public double getUserLat() {
    return this.userLat;
  }

  public DetailUserInfo setUserLat(double userLat) {
    this.userLat = userLat;
    setUserLatIsSet(true);
    return this;
  }

  public void unsetUserLat() {
    __isset_bit_vector.clear(__USERLAT_ISSET_ID);
  }

  /** Returns true if field userLat is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLat() {
    return __isset_bit_vector.get(__USERLAT_ISSET_ID);
  }

  public void setUserLatIsSet(boolean value) {
    __isset_bit_vector.set(__USERLAT_ISSET_ID, value);
  }

  public double getUserLng() {
    return this.userLng;
  }

  public DetailUserInfo setUserLng(double userLng) {
    this.userLng = userLng;
    setUserLngIsSet(true);
    return this;
  }

  public void unsetUserLng() {
    __isset_bit_vector.clear(__USERLNG_ISSET_ID);
  }

  /** Returns true if field userLng is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLng() {
    return __isset_bit_vector.get(__USERLNG_ISSET_ID);
  }

  public void setUserLngIsSet(boolean value) {
    __isset_bit_vector.set(__USERLNG_ISSET_ID, value);
  }

  public int getDateCheckIn() {
    return this.dateCheckIn;
  }

  public DetailUserInfo setDateCheckIn(int dateCheckIn) {
    this.dateCheckIn = dateCheckIn;
    setDateCheckInIsSet(true);
    return this;
  }

  public void unsetDateCheckIn() {
    __isset_bit_vector.clear(__DATECHECKIN_ISSET_ID);
  }

  /** Returns true if field dateCheckIn is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCheckIn() {
    return __isset_bit_vector.get(__DATECHECKIN_ISSET_ID);
  }

  public void setDateCheckInIsSet(boolean value) {
    __isset_bit_vector.set(__DATECHECKIN_ISSET_ID, value);
  }

  public int getDateCheckOut() {
    return this.dateCheckOut;
  }

  public DetailUserInfo setDateCheckOut(int dateCheckOut) {
    this.dateCheckOut = dateCheckOut;
    setDateCheckOutIsSet(true);
    return this;
  }

  public void unsetDateCheckOut() {
    __isset_bit_vector.clear(__DATECHECKOUT_ISSET_ID);
  }

  /** Returns true if field dateCheckOut is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCheckOut() {
    return __isset_bit_vector.get(__DATECHECKOUT_ISSET_ID);
  }

  public void setDateCheckOutIsSet(boolean value) {
    __isset_bit_vector.set(__DATECHECKOUT_ISSET_ID, value);
  }

  public String getClientType() {
    return this.clientType;
  }

  public DetailUserInfo setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public DetailUserInfo setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public int getUserCityId() {
    return this.userCityId;
  }

  public DetailUserInfo setUserCityId(int userCityId) {
    this.userCityId = userCityId;
    setUserCityIdIsSet(true);
    return this;
  }

  public void unsetUserCityId() {
    __isset_bit_vector.clear(__USERCITYID_ISSET_ID);
  }

  /** Returns true if field userCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCityId() {
    return __isset_bit_vector.get(__USERCITYID_ISSET_ID);
  }

  public void setUserCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERCITYID_ISSET_ID, value);
  }

  public int getAppCityId() {
    return this.appCityId;
  }

  public DetailUserInfo setAppCityId(int appCityId) {
    this.appCityId = appCityId;
    setAppCityIdIsSet(true);
    return this;
  }

  public void unsetAppCityId() {
    __isset_bit_vector.clear(__APPCITYID_ISSET_ID);
  }

  /** Returns true if field appCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCityId() {
    return __isset_bit_vector.get(__APPCITYID_ISSET_ID);
  }

  public void setAppCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__APPCITYID_ISSET_ID, value);
  }

  public int getChannelCityId() {
    return this.channelCityId;
  }

  public DetailUserInfo setChannelCityId(int channelCityId) {
    this.channelCityId = channelCityId;
    setChannelCityIdIsSet(true);
    return this;
  }

  public void unsetChannelCityId() {
    __isset_bit_vector.clear(__CHANNELCITYID_ISSET_ID);
  }

  /** Returns true if field channelCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCityId() {
    return __isset_bit_vector.get(__CHANNELCITYID_ISSET_ID);
  }

  public void setChannelCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CHANNELCITYID_ISSET_ID, value);
  }

  public long getActionTime() {
    return this.actionTime;
  }

  public DetailUserInfo setActionTime(long actionTime) {
    this.actionTime = actionTime;
    setActionTimeIsSet(true);
    return this;
  }

  public void unsetActionTime() {
    __isset_bit_vector.clear(__ACTIONTIME_ISSET_ID);
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTime() {
    return __isset_bit_vector.get(__ACTIONTIME_ISSET_ID);
  }

  public void setActionTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIONTIME_ISSET_ID, value);
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public DetailUserInfo setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ACCOMMODATION_TYPE:
      if (value == null) {
        unsetAccommodationType();
      } else {
        setAccommodationType((String)value);
      }
      break;

    case USER_LAT:
      if (value == null) {
        unsetUserLat();
      } else {
        setUserLat((Double)value);
      }
      break;

    case USER_LNG:
      if (value == null) {
        unsetUserLng();
      } else {
        setUserLng((Double)value);
      }
      break;

    case DATE_CHECK_IN:
      if (value == null) {
        unsetDateCheckIn();
      } else {
        setDateCheckIn((Integer)value);
      }
      break;

    case DATE_CHECK_OUT:
      if (value == null) {
        unsetDateCheckOut();
      } else {
        setDateCheckOut((Integer)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case USER_CITY_ID:
      if (value == null) {
        unsetUserCityId();
      } else {
        setUserCityId((Integer)value);
      }
      break;

    case APP_CITY_ID:
      if (value == null) {
        unsetAppCityId();
      } else {
        setAppCityId((Integer)value);
      }
      break;

    case CHANNEL_CITY_ID:
      if (value == null) {
        unsetChannelCityId();
      } else {
        setChannelCityId((Integer)value);
      }
      break;

    case ACTION_TIME:
      if (value == null) {
        unsetActionTime();
      } else {
        setActionTime((Long)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case USER_ID:
      return Long.valueOf(getUserId());

    case ACCOMMODATION_TYPE:
      return getAccommodationType();

    case USER_LAT:
      return Double.valueOf(getUserLat());

    case USER_LNG:
      return Double.valueOf(getUserLng());

    case DATE_CHECK_IN:
      return Integer.valueOf(getDateCheckIn());

    case DATE_CHECK_OUT:
      return Integer.valueOf(getDateCheckOut());

    case CLIENT_TYPE:
      return getClientType();

    case APP_VERSION:
      return getAppVersion();

    case USER_CITY_ID:
      return Integer.valueOf(getUserCityId());

    case APP_CITY_ID:
      return Integer.valueOf(getAppCityId());

    case CHANNEL_CITY_ID:
      return Integer.valueOf(getChannelCityId());

    case ACTION_TIME:
      return Long.valueOf(getActionTime());

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case USER_ID:
      return isSetUserId();
    case ACCOMMODATION_TYPE:
      return isSetAccommodationType();
    case USER_LAT:
      return isSetUserLat();
    case USER_LNG:
      return isSetUserLng();
    case DATE_CHECK_IN:
      return isSetDateCheckIn();
    case DATE_CHECK_OUT:
      return isSetDateCheckOut();
    case CLIENT_TYPE:
      return isSetClientType();
    case APP_VERSION:
      return isSetAppVersion();
    case USER_CITY_ID:
      return isSetUserCityId();
    case APP_CITY_ID:
      return isSetAppCityId();
    case CHANNEL_CITY_ID:
      return isSetChannelCityId();
    case ACTION_TIME:
      return isSetActionTime();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetailUserInfo)
      return this.equals((DetailUserInfo)that);
    return false;
  }

  public boolean equals(DetailUserInfo that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_accommodationType = true && this.isSetAccommodationType();
    boolean that_present_accommodationType = true && that.isSetAccommodationType();
    if (this_present_accommodationType || that_present_accommodationType) {
      if (!(this_present_accommodationType && that_present_accommodationType))
        return false;
      if (!this.accommodationType.equals(that.accommodationType))
        return false;
    }

    boolean this_present_userLat = true && this.isSetUserLat();
    boolean that_present_userLat = true && that.isSetUserLat();
    if (this_present_userLat || that_present_userLat) {
      if (!(this_present_userLat && that_present_userLat))
        return false;
      if (this.userLat != that.userLat)
        return false;
    }

    boolean this_present_userLng = true && this.isSetUserLng();
    boolean that_present_userLng = true && that.isSetUserLng();
    if (this_present_userLng || that_present_userLng) {
      if (!(this_present_userLng && that_present_userLng))
        return false;
      if (this.userLng != that.userLng)
        return false;
    }

    boolean this_present_dateCheckIn = true && this.isSetDateCheckIn();
    boolean that_present_dateCheckIn = true && that.isSetDateCheckIn();
    if (this_present_dateCheckIn || that_present_dateCheckIn) {
      if (!(this_present_dateCheckIn && that_present_dateCheckIn))
        return false;
      if (this.dateCheckIn != that.dateCheckIn)
        return false;
    }

    boolean this_present_dateCheckOut = true && this.isSetDateCheckOut();
    boolean that_present_dateCheckOut = true && that.isSetDateCheckOut();
    if (this_present_dateCheckOut || that_present_dateCheckOut) {
      if (!(this_present_dateCheckOut && that_present_dateCheckOut))
        return false;
      if (this.dateCheckOut != that.dateCheckOut)
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_userCityId = true && this.isSetUserCityId();
    boolean that_present_userCityId = true && that.isSetUserCityId();
    if (this_present_userCityId || that_present_userCityId) {
      if (!(this_present_userCityId && that_present_userCityId))
        return false;
      if (this.userCityId != that.userCityId)
        return false;
    }

    boolean this_present_appCityId = true && this.isSetAppCityId();
    boolean that_present_appCityId = true && that.isSetAppCityId();
    if (this_present_appCityId || that_present_appCityId) {
      if (!(this_present_appCityId && that_present_appCityId))
        return false;
      if (this.appCityId != that.appCityId)
        return false;
    }

    boolean this_present_channelCityId = true && this.isSetChannelCityId();
    boolean that_present_channelCityId = true && that.isSetChannelCityId();
    if (this_present_channelCityId || that_present_channelCityId) {
      if (!(this_present_channelCityId && that_present_channelCityId))
        return false;
      if (this.channelCityId != that.channelCityId)
        return false;
    }

    boolean this_present_actionTime = true && this.isSetActionTime();
    boolean that_present_actionTime = true && that.isSetActionTime();
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (this.actionTime != that.actionTime)
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DetailUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DetailUserInfo typedOther = (DetailUserInfo)other;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccommodationType()).compareTo(typedOther.isSetAccommodationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccommodationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accommodationType, typedOther.accommodationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLat()).compareTo(typedOther.isSetUserLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLat, typedOther.userLat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLng()).compareTo(typedOther.isSetUserLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLng, typedOther.userLng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCheckIn()).compareTo(typedOther.isSetDateCheckIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCheckIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCheckIn, typedOther.dateCheckIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCheckOut()).compareTo(typedOther.isSetDateCheckOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCheckOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCheckOut, typedOther.dateCheckOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCityId()).compareTo(typedOther.isSetUserCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCityId, typedOther.userCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCityId()).compareTo(typedOther.isSetAppCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCityId, typedOther.appCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCityId()).compareTo(typedOther.isSetChannelCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCityId, typedOther.channelCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTime()).compareTo(typedOther.isSetActionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, typedOther.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(typedOther.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, typedOther.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetailUserInfo(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetAccommodationType()) {
      if (!first) sb.append(", ");
      sb.append("accommodationType:");
      if (this.accommodationType == null) {
        sb.append("null");
      } else {
        sb.append(this.accommodationType);
      }
      first = false;
    }
    if (isSetUserLat()) {
      if (!first) sb.append(", ");
      sb.append("userLat:");
      sb.append(this.userLat);
      first = false;
    }
    if (isSetUserLng()) {
      if (!first) sb.append(", ");
      sb.append("userLng:");
      sb.append(this.userLng);
      first = false;
    }
    if (isSetDateCheckIn()) {
      if (!first) sb.append(", ");
      sb.append("dateCheckIn:");
      sb.append(this.dateCheckIn);
      first = false;
    }
    if (isSetDateCheckOut()) {
      if (!first) sb.append(", ");
      sb.append("dateCheckOut:");
      sb.append(this.dateCheckOut);
      first = false;
    }
    if (isSetClientType()) {
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetUserCityId()) {
      if (!first) sb.append(", ");
      sb.append("userCityId:");
      sb.append(this.userCityId);
      first = false;
    }
    if (isSetAppCityId()) {
      if (!first) sb.append(", ");
      sb.append("appCityId:");
      sb.append(this.appCityId);
      first = false;
    }
    if (isSetChannelCityId()) {
      if (!first) sb.append(", ");
      sb.append("channelCityId:");
      sb.append(this.channelCityId);
      first = false;
    }
    if (isSetActionTime()) {
      if (!first) sb.append(", ");
      sb.append("actionTime:");
      sb.append(this.actionTime);
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetailUserInfoStandardSchemeFactory implements SchemeFactory {
    public DetailUserInfoStandardScheme getScheme() {
      return new DetailUserInfoStandardScheme();
    }
  }

  private static class DetailUserInfoStandardScheme extends StandardScheme<DetailUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetailUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOMMODATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accommodationType = iprot.readString();
              struct.setAccommodationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userLat = iprot.readDouble();
              struct.setUserLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userLng = iprot.readDouble();
              struct.setUserLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE_CHECK_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateCheckIn = iprot.readI32();
              struct.setDateCheckInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE_CHECK_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateCheckOut = iprot.readI32();
              struct.setDateCheckOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userCityId = iprot.readI32();
              struct.setUserCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APP_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appCityId = iprot.readI32();
              struct.setAppCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelCityId = iprot.readI32();
              struct.setChannelCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actionTime = iprot.readI64();
              struct.setActionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map36.size);
                for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                {
                  String _key38; // required
                  String _val39; // required
                  _key38 = iprot.readString();
                  _val39 = iprot.readString();
                  struct.extraMap.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetailUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.accommodationType != null) {
        if (struct.isSetAccommodationType()) {
          oprot.writeFieldBegin(ACCOMMODATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.accommodationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserLat()) {
        oprot.writeFieldBegin(USER_LAT_FIELD_DESC);
        oprot.writeDouble(struct.userLat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserLng()) {
        oprot.writeFieldBegin(USER_LNG_FIELD_DESC);
        oprot.writeDouble(struct.userLng);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDateCheckIn()) {
        oprot.writeFieldBegin(DATE_CHECK_IN_FIELD_DESC);
        oprot.writeI32(struct.dateCheckIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDateCheckOut()) {
        oprot.writeFieldBegin(DATE_CHECK_OUT_FIELD_DESC);
        oprot.writeI32(struct.dateCheckOut);
        oprot.writeFieldEnd();
      }
      if (struct.clientType != null) {
        if (struct.isSetClientType()) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserCityId()) {
        oprot.writeFieldBegin(USER_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.userCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppCityId()) {
        oprot.writeFieldBegin(APP_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.appCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChannelCityId()) {
        oprot.writeFieldBegin(CHANNEL_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.channelCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActionTime()) {
        oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
        oprot.writeI64(struct.actionTime);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter40 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              oprot.writeString(_iter40.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetailUserInfoTupleSchemeFactory implements SchemeFactory {
    public DetailUserInfoTupleScheme getScheme() {
      return new DetailUserInfoTupleScheme();
    }
  }

  private static class DetailUserInfoTupleScheme extends TupleScheme<DetailUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetailUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuid);
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetAccommodationType()) {
        optionals.set(1);
      }
      if (struct.isSetUserLat()) {
        optionals.set(2);
      }
      if (struct.isSetUserLng()) {
        optionals.set(3);
      }
      if (struct.isSetDateCheckIn()) {
        optionals.set(4);
      }
      if (struct.isSetDateCheckOut()) {
        optionals.set(5);
      }
      if (struct.isSetClientType()) {
        optionals.set(6);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(7);
      }
      if (struct.isSetUserCityId()) {
        optionals.set(8);
      }
      if (struct.isSetAppCityId()) {
        optionals.set(9);
      }
      if (struct.isSetChannelCityId()) {
        optionals.set(10);
      }
      if (struct.isSetActionTime()) {
        optionals.set(11);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetAccommodationType()) {
        oprot.writeString(struct.accommodationType);
      }
      if (struct.isSetUserLat()) {
        oprot.writeDouble(struct.userLat);
      }
      if (struct.isSetUserLng()) {
        oprot.writeDouble(struct.userLng);
      }
      if (struct.isSetDateCheckIn()) {
        oprot.writeI32(struct.dateCheckIn);
      }
      if (struct.isSetDateCheckOut()) {
        oprot.writeI32(struct.dateCheckOut);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetUserCityId()) {
        oprot.writeI32(struct.userCityId);
      }
      if (struct.isSetAppCityId()) {
        oprot.writeI32(struct.appCityId);
      }
      if (struct.isSetChannelCityId()) {
        oprot.writeI32(struct.channelCityId);
      }
      if (struct.isSetActionTime()) {
        oprot.writeI64(struct.actionTime);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter41 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter41.getKey());
            oprot.writeString(_iter41.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetailUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = iprot.readString();
      struct.setUuidIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accommodationType = iprot.readString();
        struct.setAccommodationTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userLat = iprot.readDouble();
        struct.setUserLatIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userLng = iprot.readDouble();
        struct.setUserLngIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dateCheckIn = iprot.readI32();
        struct.setDateCheckInIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dateCheckOut = iprot.readI32();
        struct.setDateCheckOutIsSet(true);
      }
      if (incoming.get(6)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userCityId = iprot.readI32();
        struct.setUserCityIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.appCityId = iprot.readI32();
        struct.setAppCityIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.channelCityId = iprot.readI32();
        struct.setChannelCityIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.actionTime = iprot.readI64();
        struct.setActionTimeIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map42.size);
          for (int _i43 = 0; _i43 < _map42.size; ++_i43)
          {
            String _key44; // required
            String _val45; // required
            _key44 = iprot.readString();
            _val45 = iprot.readString();
            struct.extraMap.put(_key44, _val45);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

}

