/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchRecExtraMsg implements org.apache.thrift.TBase<SearchRecExtraMsg, SearchRecExtraMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchRecExtraMsg");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedLocation", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField INTENTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("intentionType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchRecExtraMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchRecExtraMsgTupleSchemeFactory());
  }

  public String query; // required
  public String cityName; // required
  public int sceneId; // optional
  public Map<String,String> extraDataMap; // optional
  public Location identifiedLocation; // optional
  public int intentionType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    CITY_NAME((short)2, "cityName"),
    SCENE_ID((short)3, "sceneId"),
    EXTRA_DATA_MAP((short)4, "extraDataMap"),
    IDENTIFIED_LOCATION((short)5, "identifiedLocation"),
    INTENTION_TYPE((short)6, "intentionType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // CITY_NAME
          return CITY_NAME;
        case 3: // SCENE_ID
          return SCENE_ID;
        case 4: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        case 5: // IDENTIFIED_LOCATION
          return IDENTIFIED_LOCATION;
        case 6: // INTENTION_TYPE
          return INTENTION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCENEID_ISSET_ID = 0;
  private static final int __INTENTIONTYPE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.SCENE_ID,_Fields.EXTRA_DATA_MAP,_Fields.IDENTIFIED_LOCATION,_Fields.INTENTION_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IDENTIFIED_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("identifiedLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.INTENTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("intentionType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchRecExtraMsg.class, metaDataMap);
  }

  public SearchRecExtraMsg() {
    this.query = "";

    this.cityName = "";

  }

  public SearchRecExtraMsg(
    String query,
    String cityName)
  {
    this();
    this.query = query;
    this.cityName = cityName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchRecExtraMsg(SearchRecExtraMsg other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.sceneId = other.sceneId;
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
    if (other.isSetIdentifiedLocation()) {
      this.identifiedLocation = new Location(other.identifiedLocation);
    }
    this.intentionType = other.intentionType;
  }

  public SearchRecExtraMsg deepCopy() {
    return new SearchRecExtraMsg(this);
  }

  @Override
  public void clear() {
    this.query = "";

    this.cityName = "";

    setSceneIdIsSet(false);
    this.sceneId = 0;
    this.extraDataMap = null;
    this.identifiedLocation = null;
    setIntentionTypeIsSet(false);
    this.intentionType = 0;
  }

  public String getQuery() {
    return this.query;
  }

  public SearchRecExtraMsg setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public SearchRecExtraMsg setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getSceneId() {
    return this.sceneId;
  }

  public SearchRecExtraMsg setSceneId(int sceneId) {
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    return this;
  }

  public void unsetSceneId() {
    __isset_bit_vector.clear(__SCENEID_ISSET_ID);
  }

  /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneId() {
    return __isset_bit_vector.get(__SCENEID_ISSET_ID);
  }

  public void setSceneIdIsSet(boolean value) {
    __isset_bit_vector.set(__SCENEID_ISSET_ID, value);
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public SearchRecExtraMsg setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public Location getIdentifiedLocation() {
    return this.identifiedLocation;
  }

  public SearchRecExtraMsg setIdentifiedLocation(Location identifiedLocation) {
    this.identifiedLocation = identifiedLocation;
    return this;
  }

  public void unsetIdentifiedLocation() {
    this.identifiedLocation = null;
  }

  /** Returns true if field identifiedLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedLocation() {
    return this.identifiedLocation != null;
  }

  public void setIdentifiedLocationIsSet(boolean value) {
    if (!value) {
      this.identifiedLocation = null;
    }
  }

  public int getIntentionType() {
    return this.intentionType;
  }

  public SearchRecExtraMsg setIntentionType(int intentionType) {
    this.intentionType = intentionType;
    setIntentionTypeIsSet(true);
    return this;
  }

  public void unsetIntentionType() {
    __isset_bit_vector.clear(__INTENTIONTYPE_ISSET_ID);
  }

  /** Returns true if field intentionType is set (has been assigned a value) and false otherwise */
  public boolean isSetIntentionType() {
    return __isset_bit_vector.get(__INTENTIONTYPE_ISSET_ID);
  }

  public void setIntentionTypeIsSet(boolean value) {
    __isset_bit_vector.set(__INTENTIONTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case SCENE_ID:
      if (value == null) {
        unsetSceneId();
      } else {
        setSceneId((Integer)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    case IDENTIFIED_LOCATION:
      if (value == null) {
        unsetIdentifiedLocation();
      } else {
        setIdentifiedLocation((Location)value);
      }
      break;

    case INTENTION_TYPE:
      if (value == null) {
        unsetIntentionType();
      } else {
        setIntentionType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case CITY_NAME:
      return getCityName();

    case SCENE_ID:
      return Integer.valueOf(getSceneId());

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    case IDENTIFIED_LOCATION:
      return getIdentifiedLocation();

    case INTENTION_TYPE:
      return Integer.valueOf(getIntentionType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case CITY_NAME:
      return isSetCityName();
    case SCENE_ID:
      return isSetSceneId();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    case IDENTIFIED_LOCATION:
      return isSetIdentifiedLocation();
    case INTENTION_TYPE:
      return isSetIntentionType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchRecExtraMsg)
      return this.equals((SearchRecExtraMsg)that);
    return false;
  }

  public boolean equals(SearchRecExtraMsg that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_sceneId = true && this.isSetSceneId();
    boolean that_present_sceneId = true && that.isSetSceneId();
    if (this_present_sceneId || that_present_sceneId) {
      if (!(this_present_sceneId && that_present_sceneId))
        return false;
      if (this.sceneId != that.sceneId)
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    boolean this_present_identifiedLocation = true && this.isSetIdentifiedLocation();
    boolean that_present_identifiedLocation = true && that.isSetIdentifiedLocation();
    if (this_present_identifiedLocation || that_present_identifiedLocation) {
      if (!(this_present_identifiedLocation && that_present_identifiedLocation))
        return false;
      if (!this.identifiedLocation.equals(that.identifiedLocation))
        return false;
    }

    boolean this_present_intentionType = true && this.isSetIntentionType();
    boolean that_present_intentionType = true && that.isSetIntentionType();
    if (this_present_intentionType || that_present_intentionType) {
      if (!(this_present_intentionType && that_present_intentionType))
        return false;
      if (this.intentionType != that.intentionType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SearchRecExtraMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SearchRecExtraMsg typedOther = (SearchRecExtraMsg)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneId()).compareTo(typedOther.isSetSceneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, typedOther.sceneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedLocation()).compareTo(typedOther.isSetIdentifiedLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedLocation, typedOther.identifiedLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntentionType()).compareTo(typedOther.isSetIntentionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntentionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intentionType, typedOther.intentionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchRecExtraMsg(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (isSetSceneId()) {
      if (!first) sb.append(", ");
      sb.append("sceneId:");
      sb.append(this.sceneId);
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    if (isSetIdentifiedLocation()) {
      if (!first) sb.append(", ");
      sb.append("identifiedLocation:");
      if (this.identifiedLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.identifiedLocation);
      }
      first = false;
    }
    if (isSetIntentionType()) {
      if (!first) sb.append(", ");
      sb.append("intentionType:");
      sb.append(this.intentionType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    if (cityName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cityName' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchRecExtraMsgStandardSchemeFactory implements SchemeFactory {
    public SearchRecExtraMsgStandardScheme getScheme() {
      return new SearchRecExtraMsgStandardScheme();
    }
  }

  private static class SearchRecExtraMsgStandardScheme extends StandardScheme<SearchRecExtraMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchRecExtraMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCENE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sceneId = iprot.readI32();
              struct.setSceneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map80.size);
                for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                {
                  String _key82; // required
                  String _val83; // required
                  _key82 = iprot.readString();
                  _val83 = iprot.readString();
                  struct.extraDataMap.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTIFIED_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.identifiedLocation = new Location();
              struct.identifiedLocation.read(iprot);
              struct.setIdentifiedLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTENTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intentionType = iprot.readI32();
              struct.setIntentionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchRecExtraMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSceneId()) {
        oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
        oprot.writeI32(struct.sceneId);
        oprot.writeFieldEnd();
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter84 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter84.getKey());
              oprot.writeString(_iter84.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.identifiedLocation != null) {
        if (struct.isSetIdentifiedLocation()) {
          oprot.writeFieldBegin(IDENTIFIED_LOCATION_FIELD_DESC);
          struct.identifiedLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntentionType()) {
        oprot.writeFieldBegin(INTENTION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.intentionType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchRecExtraMsgTupleSchemeFactory implements SchemeFactory {
    public SearchRecExtraMsgTupleScheme getScheme() {
      return new SearchRecExtraMsgTupleScheme();
    }
  }

  private static class SearchRecExtraMsgTupleScheme extends TupleScheme<SearchRecExtraMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchRecExtraMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query);
      oprot.writeString(struct.cityName);
      BitSet optionals = new BitSet();
      if (struct.isSetSceneId()) {
        optionals.set(0);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(1);
      }
      if (struct.isSetIdentifiedLocation()) {
        optionals.set(2);
      }
      if (struct.isSetIntentionType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSceneId()) {
        oprot.writeI32(struct.sceneId);
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter85 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter85.getKey());
            oprot.writeString(_iter85.getValue());
          }
        }
      }
      if (struct.isSetIdentifiedLocation()) {
        struct.identifiedLocation.write(oprot);
      }
      if (struct.isSetIntentionType()) {
        oprot.writeI32(struct.intentionType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchRecExtraMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.cityName = iprot.readString();
      struct.setCityNameIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sceneId = iprot.readI32();
        struct.setSceneIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map86.size);
          for (int _i87 = 0; _i87 < _map86.size; ++_i87)
          {
            String _key88; // required
            String _val89; // required
            _key88 = iprot.readString();
            _val89 = iprot.readString();
            struct.extraDataMap.put(_key88, _val89);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
      if (incoming.get(2)) {
        struct.identifiedLocation = new Location();
        struct.identifiedLocation.read(iprot);
        struct.setIdentifiedLocationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intentionType = iprot.readI32();
        struct.setIntentionTypeIsSet(true);
      }
    }
  }

}

