/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.search.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DealEntry implements org.apache.thrift.TBase<DealEntry, DealEntry._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DealEntry");

  private static final org.apache.thrift.protocol.TField DEAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HIDDEN_FIELD_DESC = new org.apache.thrift.protocol.TField("hidden", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField DEAL_STID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealStid", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DealEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DealEntryTupleSchemeFactory());
  }

  public int dealId; // required
  public boolean hidden; // required
  public String dealStid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEAL_ID((short)1, "dealId"),
    HIDDEN((short)2, "hidden"),
    DEAL_STID((short)3, "dealStid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEAL_ID
          return DEAL_ID;
        case 2: // HIDDEN
          return HIDDEN;
        case 3: // DEAL_STID
          return DEAL_STID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEALID_ISSET_ID = 0;
  private static final int __HIDDEN_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.DEAL_STID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEAL_ID, new org.apache.thrift.meta_data.FieldMetaData("dealId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIDDEN, new org.apache.thrift.meta_data.FieldMetaData("hidden", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEAL_STID, new org.apache.thrift.meta_data.FieldMetaData("dealStid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DealEntry.class, metaDataMap);
  }

  public DealEntry() {
    this.hidden = false;

    this.dealStid = "";

  }

  public DealEntry(
    int dealId,
    boolean hidden)
  {
    this();
    this.dealId = dealId;
    setDealIdIsSet(true);
    this.hidden = hidden;
    setHiddenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DealEntry(DealEntry other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.dealId = other.dealId;
    this.hidden = other.hidden;
    if (other.isSetDealStid()) {
      this.dealStid = other.dealStid;
    }
  }

  public DealEntry deepCopy() {
    return new DealEntry(this);
  }

  @Override
  public void clear() {
    setDealIdIsSet(false);
    this.dealId = 0;
    this.hidden = false;

    this.dealStid = "";

  }

  public int getDealId() {
    return this.dealId;
  }

  public DealEntry setDealId(int dealId) {
    this.dealId = dealId;
    setDealIdIsSet(true);
    return this;
  }

  public void unsetDealId() {
    __isset_bit_vector.clear(__DEALID_ISSET_ID);
  }

  /** Returns true if field dealId is set (has been assigned a value) and false otherwise */
  public boolean isSetDealId() {
    return __isset_bit_vector.get(__DEALID_ISSET_ID);
  }

  public void setDealIdIsSet(boolean value) {
    __isset_bit_vector.set(__DEALID_ISSET_ID, value);
  }

  public boolean isHidden() {
    return this.hidden;
  }

  public DealEntry setHidden(boolean hidden) {
    this.hidden = hidden;
    setHiddenIsSet(true);
    return this;
  }

  public void unsetHidden() {
    __isset_bit_vector.clear(__HIDDEN_ISSET_ID);
  }

  /** Returns true if field hidden is set (has been assigned a value) and false otherwise */
  public boolean isSetHidden() {
    return __isset_bit_vector.get(__HIDDEN_ISSET_ID);
  }

  public void setHiddenIsSet(boolean value) {
    __isset_bit_vector.set(__HIDDEN_ISSET_ID, value);
  }

  public String getDealStid() {
    return this.dealStid;
  }

  public DealEntry setDealStid(String dealStid) {
    this.dealStid = dealStid;
    return this;
  }

  public void unsetDealStid() {
    this.dealStid = null;
  }

  /** Returns true if field dealStid is set (has been assigned a value) and false otherwise */
  public boolean isSetDealStid() {
    return this.dealStid != null;
  }

  public void setDealStidIsSet(boolean value) {
    if (!value) {
      this.dealStid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEAL_ID:
      if (value == null) {
        unsetDealId();
      } else {
        setDealId((Integer)value);
      }
      break;

    case HIDDEN:
      if (value == null) {
        unsetHidden();
      } else {
        setHidden((Boolean)value);
      }
      break;

    case DEAL_STID:
      if (value == null) {
        unsetDealStid();
      } else {
        setDealStid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEAL_ID:
      return Integer.valueOf(getDealId());

    case HIDDEN:
      return Boolean.valueOf(isHidden());

    case DEAL_STID:
      return getDealStid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEAL_ID:
      return isSetDealId();
    case HIDDEN:
      return isSetHidden();
    case DEAL_STID:
      return isSetDealStid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DealEntry)
      return this.equals((DealEntry)that);
    return false;
  }

  public boolean equals(DealEntry that) {
    if (that == null)
      return false;

    boolean this_present_dealId = true;
    boolean that_present_dealId = true;
    if (this_present_dealId || that_present_dealId) {
      if (!(this_present_dealId && that_present_dealId))
        return false;
      if (this.dealId != that.dealId)
        return false;
    }

    boolean this_present_hidden = true;
    boolean that_present_hidden = true;
    if (this_present_hidden || that_present_hidden) {
      if (!(this_present_hidden && that_present_hidden))
        return false;
      if (this.hidden != that.hidden)
        return false;
    }

    boolean this_present_dealStid = true && this.isSetDealStid();
    boolean that_present_dealStid = true && that.isSetDealStid();
    if (this_present_dealStid || that_present_dealStid) {
      if (!(this_present_dealStid && that_present_dealStid))
        return false;
      if (!this.dealStid.equals(that.dealStid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DealEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DealEntry typedOther = (DealEntry)other;

    lastComparison = Boolean.valueOf(isSetDealId()).compareTo(typedOther.isSetDealId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealId, typedOther.dealId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHidden()).compareTo(typedOther.isSetHidden());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHidden()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hidden, typedOther.hidden);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealStid()).compareTo(typedOther.isSetDealStid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealStid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealStid, typedOther.dealStid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DealEntry(");
    boolean first = true;

    sb.append("dealId:");
    sb.append(this.dealId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hidden:");
    sb.append(this.hidden);
    first = false;
    if (isSetDealStid()) {
      if (!first) sb.append(", ");
      sb.append("dealStid:");
      if (this.dealStid == null) {
        sb.append("null");
      } else {
        sb.append(this.dealStid);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'dealId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'hidden' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DealEntryStandardSchemeFactory implements SchemeFactory {
    public DealEntryStandardScheme getScheme() {
      return new DealEntryStandardScheme();
    }
  }

  private static class DealEntryStandardScheme extends StandardScheme<DealEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DealEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dealId = iprot.readI32();
              struct.setDealIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIDDEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hidden = iprot.readBool();
              struct.setHiddenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEAL_STID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dealStid = iprot.readString();
              struct.setDealStidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDealId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dealId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHidden()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hidden' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DealEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEAL_ID_FIELD_DESC);
      oprot.writeI32(struct.dealId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIDDEN_FIELD_DESC);
      oprot.writeBool(struct.hidden);
      oprot.writeFieldEnd();
      if (struct.dealStid != null) {
        if (struct.isSetDealStid()) {
          oprot.writeFieldBegin(DEAL_STID_FIELD_DESC);
          oprot.writeString(struct.dealStid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DealEntryTupleSchemeFactory implements SchemeFactory {
    public DealEntryTupleScheme getScheme() {
      return new DealEntryTupleScheme();
    }
  }

  private static class DealEntryTupleScheme extends TupleScheme<DealEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DealEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.dealId);
      oprot.writeBool(struct.hidden);
      BitSet optionals = new BitSet();
      if (struct.isSetDealStid()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDealStid()) {
        oprot.writeString(struct.dealStid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DealEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dealId = iprot.readI32();
      struct.setDealIdIsSet(true);
      struct.hidden = iprot.readBool();
      struct.setHiddenIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.dealStid = iprot.readString();
        struct.setDealStidIsSet(true);
      }
    }
  }

}

