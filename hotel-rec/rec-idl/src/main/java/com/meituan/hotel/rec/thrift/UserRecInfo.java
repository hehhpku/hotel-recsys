/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserRecInfo implements org.apache.thrift.TBase<UserRecInfo, UserRecInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserRecInfo");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userLocation", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField USER_LOCATION_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userLocationCityId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APP_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCityId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCityId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CHECK_IN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkInDate", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CHECK_OUT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkOutDate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserRecInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserRecInfoTupleSchemeFactory());
  }

  public String uuid; // required
  public long userId; // optional
  public Location userLocation; // optional
  public int userLocationCityId; // optional
  public int appCityId; // optional
  public int channelCityId; // optional
  public int checkInDate; // optional
  public int checkOutDate; // optional
  public String clientType; // optional
  public String appVersion; // optional
  /**
   * 
   * @see AccommodationType
   */
  public AccommodationType accType; // optional
  public Map<String,String> extraDataMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    USER_ID((short)2, "userId"),
    USER_LOCATION((short)3, "userLocation"),
    USER_LOCATION_CITY_ID((short)4, "userLocationCityId"),
    APP_CITY_ID((short)5, "appCityId"),
    CHANNEL_CITY_ID((short)6, "channelCityId"),
    CHECK_IN_DATE((short)7, "checkInDate"),
    CHECK_OUT_DATE((short)8, "checkOutDate"),
    CLIENT_TYPE((short)9, "clientType"),
    APP_VERSION((short)10, "appVersion"),
    /**
     * 
     * @see AccommodationType
     */
    ACC_TYPE((short)11, "accType"),
    EXTRA_DATA_MAP((short)12, "extraDataMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // USER_LOCATION
          return USER_LOCATION;
        case 4: // USER_LOCATION_CITY_ID
          return USER_LOCATION_CITY_ID;
        case 5: // APP_CITY_ID
          return APP_CITY_ID;
        case 6: // CHANNEL_CITY_ID
          return CHANNEL_CITY_ID;
        case 7: // CHECK_IN_DATE
          return CHECK_IN_DATE;
        case 8: // CHECK_OUT_DATE
          return CHECK_OUT_DATE;
        case 9: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 10: // APP_VERSION
          return APP_VERSION;
        case 11: // ACC_TYPE
          return ACC_TYPE;
        case 12: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __USERLOCATIONCITYID_ISSET_ID = 1;
  private static final int __APPCITYID_ISSET_ID = 2;
  private static final int __CHANNELCITYID_ISSET_ID = 3;
  private static final int __CHECKINDATE_ISSET_ID = 4;
  private static final int __CHECKOUTDATE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.USER_ID,_Fields.USER_LOCATION,_Fields.USER_LOCATION_CITY_ID,_Fields.APP_CITY_ID,_Fields.CHANNEL_CITY_ID,_Fields.CHECK_IN_DATE,_Fields.CHECK_OUT_DATE,_Fields.CLIENT_TYPE,_Fields.APP_VERSION,_Fields.ACC_TYPE,_Fields.EXTRA_DATA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("userLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.USER_LOCATION_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("userLocationCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("appCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("channelCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_IN_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkInDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_OUT_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkOutDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccommodationType.class)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRecInfo.class, metaDataMap);
  }

  public UserRecInfo() {
    this.uuid = "";

    this.userId = -1L;

    this.userLocationCityId = 0;

    this.appCityId = 0;

    this.channelCityId = 0;

    this.clientType = "NULL";

    this.appVersion = "0";

    this.accType = com.meituan.hotel.rec.thrift.AccommodationType.DR;

  }

  public UserRecInfo(
    String uuid)
  {
    this();
    this.uuid = uuid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserRecInfo(UserRecInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    this.userId = other.userId;
    if (other.isSetUserLocation()) {
      this.userLocation = new Location(other.userLocation);
    }
    this.userLocationCityId = other.userLocationCityId;
    this.appCityId = other.appCityId;
    this.channelCityId = other.channelCityId;
    this.checkInDate = other.checkInDate;
    this.checkOutDate = other.checkOutDate;
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    if (other.isSetAccType()) {
      this.accType = other.accType;
    }
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
  }

  public UserRecInfo deepCopy() {
    return new UserRecInfo(this);
  }

  @Override
  public void clear() {
    this.uuid = "";

    this.userId = -1L;

    this.userLocation = null;
    this.userLocationCityId = 0;

    this.appCityId = 0;

    this.channelCityId = 0;

    setCheckInDateIsSet(false);
    this.checkInDate = 0;
    setCheckOutDateIsSet(false);
    this.checkOutDate = 0;
    this.clientType = "NULL";

    this.appVersion = "0";

    this.accType = com.meituan.hotel.rec.thrift.AccommodationType.DR;

    this.extraDataMap = null;
  }

  public String getUuid() {
    return this.uuid;
  }

  public UserRecInfo setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public UserRecInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public Location getUserLocation() {
    return this.userLocation;
  }

  public UserRecInfo setUserLocation(Location userLocation) {
    this.userLocation = userLocation;
    return this;
  }

  public void unsetUserLocation() {
    this.userLocation = null;
  }

  /** Returns true if field userLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLocation() {
    return this.userLocation != null;
  }

  public void setUserLocationIsSet(boolean value) {
    if (!value) {
      this.userLocation = null;
    }
  }

  public int getUserLocationCityId() {
    return this.userLocationCityId;
  }

  public UserRecInfo setUserLocationCityId(int userLocationCityId) {
    this.userLocationCityId = userLocationCityId;
    setUserLocationCityIdIsSet(true);
    return this;
  }

  public void unsetUserLocationCityId() {
    __isset_bit_vector.clear(__USERLOCATIONCITYID_ISSET_ID);
  }

  /** Returns true if field userLocationCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLocationCityId() {
    return __isset_bit_vector.get(__USERLOCATIONCITYID_ISSET_ID);
  }

  public void setUserLocationCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERLOCATIONCITYID_ISSET_ID, value);
  }

  public int getAppCityId() {
    return this.appCityId;
  }

  public UserRecInfo setAppCityId(int appCityId) {
    this.appCityId = appCityId;
    setAppCityIdIsSet(true);
    return this;
  }

  public void unsetAppCityId() {
    __isset_bit_vector.clear(__APPCITYID_ISSET_ID);
  }

  /** Returns true if field appCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCityId() {
    return __isset_bit_vector.get(__APPCITYID_ISSET_ID);
  }

  public void setAppCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__APPCITYID_ISSET_ID, value);
  }

  public int getChannelCityId() {
    return this.channelCityId;
  }

  public UserRecInfo setChannelCityId(int channelCityId) {
    this.channelCityId = channelCityId;
    setChannelCityIdIsSet(true);
    return this;
  }

  public void unsetChannelCityId() {
    __isset_bit_vector.clear(__CHANNELCITYID_ISSET_ID);
  }

  /** Returns true if field channelCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCityId() {
    return __isset_bit_vector.get(__CHANNELCITYID_ISSET_ID);
  }

  public void setChannelCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CHANNELCITYID_ISSET_ID, value);
  }

  public int getCheckInDate() {
    return this.checkInDate;
  }

  public UserRecInfo setCheckInDate(int checkInDate) {
    this.checkInDate = checkInDate;
    setCheckInDateIsSet(true);
    return this;
  }

  public void unsetCheckInDate() {
    __isset_bit_vector.clear(__CHECKINDATE_ISSET_ID);
  }

  /** Returns true if field checkInDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckInDate() {
    return __isset_bit_vector.get(__CHECKINDATE_ISSET_ID);
  }

  public void setCheckInDateIsSet(boolean value) {
    __isset_bit_vector.set(__CHECKINDATE_ISSET_ID, value);
  }

  public int getCheckOutDate() {
    return this.checkOutDate;
  }

  public UserRecInfo setCheckOutDate(int checkOutDate) {
    this.checkOutDate = checkOutDate;
    setCheckOutDateIsSet(true);
    return this;
  }

  public void unsetCheckOutDate() {
    __isset_bit_vector.clear(__CHECKOUTDATE_ISSET_ID);
  }

  /** Returns true if field checkOutDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckOutDate() {
    return __isset_bit_vector.get(__CHECKOUTDATE_ISSET_ID);
  }

  public void setCheckOutDateIsSet(boolean value) {
    __isset_bit_vector.set(__CHECKOUTDATE_ISSET_ID, value);
  }

  public String getClientType() {
    return this.clientType;
  }

  public UserRecInfo setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public UserRecInfo setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  /**
   * 
   * @see AccommodationType
   */
  public AccommodationType getAccType() {
    return this.accType;
  }

  /**
   * 
   * @see AccommodationType
   */
  public UserRecInfo setAccType(AccommodationType accType) {
    this.accType = accType;
    return this;
  }

  public void unsetAccType() {
    this.accType = null;
  }

  /** Returns true if field accType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccType() {
    return this.accType != null;
  }

  public void setAccTypeIsSet(boolean value) {
    if (!value) {
      this.accType = null;
    }
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public UserRecInfo setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case USER_LOCATION:
      if (value == null) {
        unsetUserLocation();
      } else {
        setUserLocation((Location)value);
      }
      break;

    case USER_LOCATION_CITY_ID:
      if (value == null) {
        unsetUserLocationCityId();
      } else {
        setUserLocationCityId((Integer)value);
      }
      break;

    case APP_CITY_ID:
      if (value == null) {
        unsetAppCityId();
      } else {
        setAppCityId((Integer)value);
      }
      break;

    case CHANNEL_CITY_ID:
      if (value == null) {
        unsetChannelCityId();
      } else {
        setChannelCityId((Integer)value);
      }
      break;

    case CHECK_IN_DATE:
      if (value == null) {
        unsetCheckInDate();
      } else {
        setCheckInDate((Integer)value);
      }
      break;

    case CHECK_OUT_DATE:
      if (value == null) {
        unsetCheckOutDate();
      } else {
        setCheckOutDate((Integer)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case ACC_TYPE:
      if (value == null) {
        unsetAccType();
      } else {
        setAccType((AccommodationType)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case USER_ID:
      return Long.valueOf(getUserId());

    case USER_LOCATION:
      return getUserLocation();

    case USER_LOCATION_CITY_ID:
      return Integer.valueOf(getUserLocationCityId());

    case APP_CITY_ID:
      return Integer.valueOf(getAppCityId());

    case CHANNEL_CITY_ID:
      return Integer.valueOf(getChannelCityId());

    case CHECK_IN_DATE:
      return Integer.valueOf(getCheckInDate());

    case CHECK_OUT_DATE:
      return Integer.valueOf(getCheckOutDate());

    case CLIENT_TYPE:
      return getClientType();

    case APP_VERSION:
      return getAppVersion();

    case ACC_TYPE:
      return getAccType();

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case USER_ID:
      return isSetUserId();
    case USER_LOCATION:
      return isSetUserLocation();
    case USER_LOCATION_CITY_ID:
      return isSetUserLocationCityId();
    case APP_CITY_ID:
      return isSetAppCityId();
    case CHANNEL_CITY_ID:
      return isSetChannelCityId();
    case CHECK_IN_DATE:
      return isSetCheckInDate();
    case CHECK_OUT_DATE:
      return isSetCheckOutDate();
    case CLIENT_TYPE:
      return isSetClientType();
    case APP_VERSION:
      return isSetAppVersion();
    case ACC_TYPE:
      return isSetAccType();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserRecInfo)
      return this.equals((UserRecInfo)that);
    return false;
  }

  public boolean equals(UserRecInfo that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userLocation = true && this.isSetUserLocation();
    boolean that_present_userLocation = true && that.isSetUserLocation();
    if (this_present_userLocation || that_present_userLocation) {
      if (!(this_present_userLocation && that_present_userLocation))
        return false;
      if (!this.userLocation.equals(that.userLocation))
        return false;
    }

    boolean this_present_userLocationCityId = true && this.isSetUserLocationCityId();
    boolean that_present_userLocationCityId = true && that.isSetUserLocationCityId();
    if (this_present_userLocationCityId || that_present_userLocationCityId) {
      if (!(this_present_userLocationCityId && that_present_userLocationCityId))
        return false;
      if (this.userLocationCityId != that.userLocationCityId)
        return false;
    }

    boolean this_present_appCityId = true && this.isSetAppCityId();
    boolean that_present_appCityId = true && that.isSetAppCityId();
    if (this_present_appCityId || that_present_appCityId) {
      if (!(this_present_appCityId && that_present_appCityId))
        return false;
      if (this.appCityId != that.appCityId)
        return false;
    }

    boolean this_present_channelCityId = true && this.isSetChannelCityId();
    boolean that_present_channelCityId = true && that.isSetChannelCityId();
    if (this_present_channelCityId || that_present_channelCityId) {
      if (!(this_present_channelCityId && that_present_channelCityId))
        return false;
      if (this.channelCityId != that.channelCityId)
        return false;
    }

    boolean this_present_checkInDate = true && this.isSetCheckInDate();
    boolean that_present_checkInDate = true && that.isSetCheckInDate();
    if (this_present_checkInDate || that_present_checkInDate) {
      if (!(this_present_checkInDate && that_present_checkInDate))
        return false;
      if (this.checkInDate != that.checkInDate)
        return false;
    }

    boolean this_present_checkOutDate = true && this.isSetCheckOutDate();
    boolean that_present_checkOutDate = true && that.isSetCheckOutDate();
    if (this_present_checkOutDate || that_present_checkOutDate) {
      if (!(this_present_checkOutDate && that_present_checkOutDate))
        return false;
      if (this.checkOutDate != that.checkOutDate)
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_accType = true && this.isSetAccType();
    boolean that_present_accType = true && that.isSetAccType();
    if (this_present_accType || that_present_accType) {
      if (!(this_present_accType && that_present_accType))
        return false;
      if (!this.accType.equals(that.accType))
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserRecInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserRecInfo typedOther = (UserRecInfo)other;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLocation()).compareTo(typedOther.isSetUserLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLocation, typedOther.userLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLocationCityId()).compareTo(typedOther.isSetUserLocationCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLocationCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLocationCityId, typedOther.userLocationCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCityId()).compareTo(typedOther.isSetAppCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCityId, typedOther.appCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCityId()).compareTo(typedOther.isSetChannelCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCityId, typedOther.channelCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckInDate()).compareTo(typedOther.isSetCheckInDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckInDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkInDate, typedOther.checkInDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckOutDate()).compareTo(typedOther.isSetCheckOutDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckOutDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkOutDate, typedOther.checkOutDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccType()).compareTo(typedOther.isSetAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accType, typedOther.accType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserRecInfo(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetUserLocation()) {
      if (!first) sb.append(", ");
      sb.append("userLocation:");
      if (this.userLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.userLocation);
      }
      first = false;
    }
    if (isSetUserLocationCityId()) {
      if (!first) sb.append(", ");
      sb.append("userLocationCityId:");
      sb.append(this.userLocationCityId);
      first = false;
    }
    if (isSetAppCityId()) {
      if (!first) sb.append(", ");
      sb.append("appCityId:");
      sb.append(this.appCityId);
      first = false;
    }
    if (isSetChannelCityId()) {
      if (!first) sb.append(", ");
      sb.append("channelCityId:");
      sb.append(this.channelCityId);
      first = false;
    }
    if (isSetCheckInDate()) {
      if (!first) sb.append(", ");
      sb.append("checkInDate:");
      sb.append(this.checkInDate);
      first = false;
    }
    if (isSetCheckOutDate()) {
      if (!first) sb.append(", ");
      sb.append("checkOutDate:");
      sb.append(this.checkOutDate);
      first = false;
    }
    if (isSetClientType()) {
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetAccType()) {
      if (!first) sb.append(", ");
      sb.append("accType:");
      if (this.accType == null) {
        sb.append("null");
      } else {
        sb.append(this.accType);
      }
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserRecInfoStandardSchemeFactory implements SchemeFactory {
    public UserRecInfoStandardScheme getScheme() {
      return new UserRecInfoStandardScheme();
    }
  }

  private static class UserRecInfoStandardScheme extends StandardScheme<UserRecInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserRecInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userLocation = new Location();
              struct.userLocation.read(iprot);
              struct.setUserLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_LOCATION_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userLocationCityId = iprot.readI32();
              struct.setUserLocationCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appCityId = iprot.readI32();
              struct.setAppCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelCityId = iprot.readI32();
              struct.setChannelCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECK_IN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkInDate = iprot.readI32();
              struct.setCheckInDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHECK_OUT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkOutDate = iprot.readI32();
              struct.setCheckOutDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accType = AccommodationType.findByValue(iprot.readI32());
              struct.setAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map36.size);
                for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                {
                  String _key38; // required
                  String _val39; // required
                  _key38 = iprot.readString();
                  _val39 = iprot.readString();
                  struct.extraDataMap.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserRecInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userLocation != null) {
        if (struct.isSetUserLocation()) {
          oprot.writeFieldBegin(USER_LOCATION_FIELD_DESC);
          struct.userLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserLocationCityId()) {
        oprot.writeFieldBegin(USER_LOCATION_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.userLocationCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppCityId()) {
        oprot.writeFieldBegin(APP_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.appCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChannelCityId()) {
        oprot.writeFieldBegin(CHANNEL_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.channelCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckInDate()) {
        oprot.writeFieldBegin(CHECK_IN_DATE_FIELD_DESC);
        oprot.writeI32(struct.checkInDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckOutDate()) {
        oprot.writeFieldBegin(CHECK_OUT_DATE_FIELD_DESC);
        oprot.writeI32(struct.checkOutDate);
        oprot.writeFieldEnd();
      }
      if (struct.clientType != null) {
        if (struct.isSetClientType()) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accType != null) {
        if (struct.isSetAccType()) {
          oprot.writeFieldBegin(ACC_TYPE_FIELD_DESC);
          oprot.writeI32(struct.accType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter40 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              oprot.writeString(_iter40.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserRecInfoTupleSchemeFactory implements SchemeFactory {
    public UserRecInfoTupleScheme getScheme() {
      return new UserRecInfoTupleScheme();
    }
  }

  private static class UserRecInfoTupleScheme extends TupleScheme<UserRecInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserRecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuid);
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserLocation()) {
        optionals.set(1);
      }
      if (struct.isSetUserLocationCityId()) {
        optionals.set(2);
      }
      if (struct.isSetAppCityId()) {
        optionals.set(3);
      }
      if (struct.isSetChannelCityId()) {
        optionals.set(4);
      }
      if (struct.isSetCheckInDate()) {
        optionals.set(5);
      }
      if (struct.isSetCheckOutDate()) {
        optionals.set(6);
      }
      if (struct.isSetClientType()) {
        optionals.set(7);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(8);
      }
      if (struct.isSetAccType()) {
        optionals.set(9);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetUserLocation()) {
        struct.userLocation.write(oprot);
      }
      if (struct.isSetUserLocationCityId()) {
        oprot.writeI32(struct.userLocationCityId);
      }
      if (struct.isSetAppCityId()) {
        oprot.writeI32(struct.appCityId);
      }
      if (struct.isSetChannelCityId()) {
        oprot.writeI32(struct.channelCityId);
      }
      if (struct.isSetCheckInDate()) {
        oprot.writeI32(struct.checkInDate);
      }
      if (struct.isSetCheckOutDate()) {
        oprot.writeI32(struct.checkOutDate);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetAccType()) {
        oprot.writeI32(struct.accType.getValue());
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter41 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter41.getKey());
            oprot.writeString(_iter41.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserRecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = iprot.readString();
      struct.setUuidIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userLocation = new Location();
        struct.userLocation.read(iprot);
        struct.setUserLocationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userLocationCityId = iprot.readI32();
        struct.setUserLocationCityIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appCityId = iprot.readI32();
        struct.setAppCityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channelCityId = iprot.readI32();
        struct.setChannelCityIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.checkInDate = iprot.readI32();
        struct.setCheckInDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.checkOutDate = iprot.readI32();
        struct.setCheckOutDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accType = AccommodationType.findByValue(iprot.readI32());
        struct.setAccTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map42.size);
          for (int _i43 = 0; _i43 < _map42.size; ++_i43)
          {
            String _key44; // required
            String _val45; // required
            _key44 = iprot.readString();
            _val45 = iprot.readString();
            struct.extraDataMap.put(_key44, _val45);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
    }
  }

}

