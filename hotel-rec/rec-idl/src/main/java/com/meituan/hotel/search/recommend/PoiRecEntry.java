/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.search.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PoiRecEntry implements org.apache.thrift.TBase<PoiRecEntry, PoiRecEntry._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PoiRecEntry");

  private static final org.apache.thrift.protocol.TField POI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poiId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POI_STID_FIELD_DESC = new org.apache.thrift.protocol.TField("poiStid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("deals", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField EXTENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensions", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PoiRecEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PoiRecEntryTupleSchemeFactory());
  }

  public int poiId; // required
  public String poiStid; // optional
  public List<DealEntry> deals; // optional
  public double distance; // optional
  public Map<String,String> extensions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POI_ID((short)1, "poiId"),
    POI_STID((short)2, "poiStid"),
    DEALS((short)3, "deals"),
    DISTANCE((short)4, "distance"),
    EXTENSIONS((short)5, "extensions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POI_ID
          return POI_ID;
        case 2: // POI_STID
          return POI_STID;
        case 3: // DEALS
          return DEALS;
        case 4: // DISTANCE
          return DISTANCE;
        case 5: // EXTENSIONS
          return EXTENSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POIID_ISSET_ID = 0;
  private static final int __DISTANCE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.POI_STID,_Fields.DEALS,_Fields.DISTANCE,_Fields.EXTENSIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POI_ID, new org.apache.thrift.meta_data.FieldMetaData("poiId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POI_STID, new org.apache.thrift.meta_data.FieldMetaData("poiStid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEALS, new org.apache.thrift.meta_data.FieldMetaData("deals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DealEntry.class))));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSIONS, new org.apache.thrift.meta_data.FieldMetaData("extensions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PoiRecEntry.class, metaDataMap);
  }

  public PoiRecEntry() {
    this.poiId = -1;

    this.poiStid = "";

    this.distance = -1;

  }

  public PoiRecEntry(
    int poiId)
  {
    this();
    this.poiId = poiId;
    setPoiIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PoiRecEntry(PoiRecEntry other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.poiId = other.poiId;
    if (other.isSetPoiStid()) {
      this.poiStid = other.poiStid;
    }
    if (other.isSetDeals()) {
      List<DealEntry> __this__deals = new ArrayList<DealEntry>();
      for (DealEntry other_element : other.deals) {
        __this__deals.add(new DealEntry(other_element));
      }
      this.deals = __this__deals;
    }
    this.distance = other.distance;
    if (other.isSetExtensions()) {
      Map<String,String> __this__extensions = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extensions.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extensions_copy_key = other_element_key;

        String __this__extensions_copy_value = other_element_value;

        __this__extensions.put(__this__extensions_copy_key, __this__extensions_copy_value);
      }
      this.extensions = __this__extensions;
    }
  }

  public PoiRecEntry deepCopy() {
    return new PoiRecEntry(this);
  }

  @Override
  public void clear() {
    this.poiId = -1;

    this.poiStid = "";

    this.deals = null;
    this.distance = -1;

    this.extensions = null;
  }

  public int getPoiId() {
    return this.poiId;
  }

  public PoiRecEntry setPoiId(int poiId) {
    this.poiId = poiId;
    setPoiIdIsSet(true);
    return this;
  }

  public void unsetPoiId() {
    __isset_bit_vector.clear(__POIID_ISSET_ID);
  }

  /** Returns true if field poiId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiId() {
    return __isset_bit_vector.get(__POIID_ISSET_ID);
  }

  public void setPoiIdIsSet(boolean value) {
    __isset_bit_vector.set(__POIID_ISSET_ID, value);
  }

  public String getPoiStid() {
    return this.poiStid;
  }

  public PoiRecEntry setPoiStid(String poiStid) {
    this.poiStid = poiStid;
    return this;
  }

  public void unsetPoiStid() {
    this.poiStid = null;
  }

  /** Returns true if field poiStid is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiStid() {
    return this.poiStid != null;
  }

  public void setPoiStidIsSet(boolean value) {
    if (!value) {
      this.poiStid = null;
    }
  }

  public int getDealsSize() {
    return (this.deals == null) ? 0 : this.deals.size();
  }

  public java.util.Iterator<DealEntry> getDealsIterator() {
    return (this.deals == null) ? null : this.deals.iterator();
  }

  public void addToDeals(DealEntry elem) {
    if (this.deals == null) {
      this.deals = new ArrayList<DealEntry>();
    }
    this.deals.add(elem);
  }

  public List<DealEntry> getDeals() {
    return this.deals;
  }

  public PoiRecEntry setDeals(List<DealEntry> deals) {
    this.deals = deals;
    return this;
  }

  public void unsetDeals() {
    this.deals = null;
  }

  /** Returns true if field deals is set (has been assigned a value) and false otherwise */
  public boolean isSetDeals() {
    return this.deals != null;
  }

  public void setDealsIsSet(boolean value) {
    if (!value) {
      this.deals = null;
    }
  }

  public double getDistance() {
    return this.distance;
  }

  public PoiRecEntry setDistance(double distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bit_vector.clear(__DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return __isset_bit_vector.get(__DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCE_ISSET_ID, value);
  }

  public int getExtensionsSize() {
    return (this.extensions == null) ? 0 : this.extensions.size();
  }

  public void putToExtensions(String key, String val) {
    if (this.extensions == null) {
      this.extensions = new HashMap<String,String>();
    }
    this.extensions.put(key, val);
  }

  public Map<String,String> getExtensions() {
    return this.extensions;
  }

  public PoiRecEntry setExtensions(Map<String,String> extensions) {
    this.extensions = extensions;
    return this;
  }

  public void unsetExtensions() {
    this.extensions = null;
  }

  /** Returns true if field extensions is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensions() {
    return this.extensions != null;
  }

  public void setExtensionsIsSet(boolean value) {
    if (!value) {
      this.extensions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POI_ID:
      if (value == null) {
        unsetPoiId();
      } else {
        setPoiId((Integer)value);
      }
      break;

    case POI_STID:
      if (value == null) {
        unsetPoiStid();
      } else {
        setPoiStid((String)value);
      }
      break;

    case DEALS:
      if (value == null) {
        unsetDeals();
      } else {
        setDeals((List<DealEntry>)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Double)value);
      }
      break;

    case EXTENSIONS:
      if (value == null) {
        unsetExtensions();
      } else {
        setExtensions((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POI_ID:
      return Integer.valueOf(getPoiId());

    case POI_STID:
      return getPoiStid();

    case DEALS:
      return getDeals();

    case DISTANCE:
      return Double.valueOf(getDistance());

    case EXTENSIONS:
      return getExtensions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POI_ID:
      return isSetPoiId();
    case POI_STID:
      return isSetPoiStid();
    case DEALS:
      return isSetDeals();
    case DISTANCE:
      return isSetDistance();
    case EXTENSIONS:
      return isSetExtensions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PoiRecEntry)
      return this.equals((PoiRecEntry)that);
    return false;
  }

  public boolean equals(PoiRecEntry that) {
    if (that == null)
      return false;

    boolean this_present_poiId = true;
    boolean that_present_poiId = true;
    if (this_present_poiId || that_present_poiId) {
      if (!(this_present_poiId && that_present_poiId))
        return false;
      if (this.poiId != that.poiId)
        return false;
    }

    boolean this_present_poiStid = true && this.isSetPoiStid();
    boolean that_present_poiStid = true && that.isSetPoiStid();
    if (this_present_poiStid || that_present_poiStid) {
      if (!(this_present_poiStid && that_present_poiStid))
        return false;
      if (!this.poiStid.equals(that.poiStid))
        return false;
    }

    boolean this_present_deals = true && this.isSetDeals();
    boolean that_present_deals = true && that.isSetDeals();
    if (this_present_deals || that_present_deals) {
      if (!(this_present_deals && that_present_deals))
        return false;
      if (!this.deals.equals(that.deals))
        return false;
    }

    boolean this_present_distance = true && this.isSetDistance();
    boolean that_present_distance = true && that.isSetDistance();
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_extensions = true && this.isSetExtensions();
    boolean that_present_extensions = true && that.isSetExtensions();
    if (this_present_extensions || that_present_extensions) {
      if (!(this_present_extensions && that_present_extensions))
        return false;
      if (!this.extensions.equals(that.extensions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PoiRecEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PoiRecEntry typedOther = (PoiRecEntry)other;

    lastComparison = Boolean.valueOf(isSetPoiId()).compareTo(typedOther.isSetPoiId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiId, typedOther.poiId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiStid()).compareTo(typedOther.isSetPoiStid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiStid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiStid, typedOther.poiStid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeals()).compareTo(typedOther.isSetDeals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deals, typedOther.deals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(typedOther.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, typedOther.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensions()).compareTo(typedOther.isSetExtensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensions, typedOther.extensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PoiRecEntry(");
    boolean first = true;

    sb.append("poiId:");
    sb.append(this.poiId);
    first = false;
    if (isSetPoiStid()) {
      if (!first) sb.append(", ");
      sb.append("poiStid:");
      if (this.poiStid == null) {
        sb.append("null");
      } else {
        sb.append(this.poiStid);
      }
      first = false;
    }
    if (isSetDeals()) {
      if (!first) sb.append(", ");
      sb.append("deals:");
      if (this.deals == null) {
        sb.append("null");
      } else {
        sb.append(this.deals);
      }
      first = false;
    }
    if (isSetDistance()) {
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
    }
    if (isSetExtensions()) {
      if (!first) sb.append(", ");
      sb.append("extensions:");
      if (this.extensions == null) {
        sb.append("null");
      } else {
        sb.append(this.extensions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'poiId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PoiRecEntryStandardSchemeFactory implements SchemeFactory {
    public PoiRecEntryStandardScheme getScheme() {
      return new PoiRecEntryStandardScheme();
    }
  }

  private static class PoiRecEntryStandardScheme extends StandardScheme<PoiRecEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PoiRecEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poiId = iprot.readI32();
              struct.setPoiIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POI_STID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poiStid = iprot.readString();
              struct.setPoiStidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.deals = new ArrayList<DealEntry>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  DealEntry _elem22; // required
                  _elem22 = new DealEntry();
                  _elem22.read(iprot);
                  struct.deals.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setDealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distance = iprot.readDouble();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                struct.extensions = new HashMap<String,String>(2*_map23.size);
                for (int _i24 = 0; _i24 < _map23.size; ++_i24)
                {
                  String _key25; // required
                  String _val26; // required
                  _key25 = iprot.readString();
                  _val26 = iprot.readString();
                  struct.extensions.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setExtensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPoiId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'poiId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PoiRecEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POI_ID_FIELD_DESC);
      oprot.writeI32(struct.poiId);
      oprot.writeFieldEnd();
      if (struct.poiStid != null) {
        if (struct.isSetPoiStid()) {
          oprot.writeFieldBegin(POI_STID_FIELD_DESC);
          oprot.writeString(struct.poiStid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deals != null) {
        if (struct.isSetDeals()) {
          oprot.writeFieldBegin(DEALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.deals.size()));
            for (DealEntry _iter27 : struct.deals)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
      }
      if (struct.extensions != null) {
        if (struct.isSetExtensions()) {
          oprot.writeFieldBegin(EXTENSIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extensions.size()));
            for (Map.Entry<String, String> _iter28 : struct.extensions.entrySet())
            {
              oprot.writeString(_iter28.getKey());
              oprot.writeString(_iter28.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PoiRecEntryTupleSchemeFactory implements SchemeFactory {
    public PoiRecEntryTupleScheme getScheme() {
      return new PoiRecEntryTupleScheme();
    }
  }

  private static class PoiRecEntryTupleScheme extends TupleScheme<PoiRecEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PoiRecEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.poiId);
      BitSet optionals = new BitSet();
      if (struct.isSetPoiStid()) {
        optionals.set(0);
      }
      if (struct.isSetDeals()) {
        optionals.set(1);
      }
      if (struct.isSetDistance()) {
        optionals.set(2);
      }
      if (struct.isSetExtensions()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPoiStid()) {
        oprot.writeString(struct.poiStid);
      }
      if (struct.isSetDeals()) {
        {
          oprot.writeI32(struct.deals.size());
          for (DealEntry _iter29 : struct.deals)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeDouble(struct.distance);
      }
      if (struct.isSetExtensions()) {
        {
          oprot.writeI32(struct.extensions.size());
          for (Map.Entry<String, String> _iter30 : struct.extensions.entrySet())
          {
            oprot.writeString(_iter30.getKey());
            oprot.writeString(_iter30.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PoiRecEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.poiId = iprot.readI32();
      struct.setPoiIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.poiStid = iprot.readString();
        struct.setPoiStidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.deals = new ArrayList<DealEntry>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            DealEntry _elem33; // required
            _elem33 = new DealEntry();
            _elem33.read(iprot);
            struct.deals.add(_elem33);
          }
        }
        struct.setDealsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.distance = iprot.readDouble();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extensions = new HashMap<String,String>(2*_map34.size);
          for (int _i35 = 0; _i35 < _map34.size; ++_i35)
          {
            String _key36; // required
            String _val37; // required
            _key36 = iprot.readString();
            _val37 = iprot.readString();
            struct.extensions.put(_key36, _val37);
          }
        }
        struct.setExtensionsIsSet(true);
      }
    }
  }

}

