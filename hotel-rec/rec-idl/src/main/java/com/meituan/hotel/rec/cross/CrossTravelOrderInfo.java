/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.cross;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CrossTravelOrderInfo implements org.apache.thrift.TBase<CrossTravelOrderInfo, CrossTravelOrderInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossTravelOrderInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POIIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("poiids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DEALID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrossTravelOrderInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrossTravelOrderInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see OrderTypeEnum
   */
  public OrderTypeEnum type; // optional
  public long orderid; // optional
  public List<PoiInfo> poiids; // optional
  public long dealid; // optional
  public double price; // optional
  public int num; // optional
  public long orderTime; // optional
  public Map<String,String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OrderTypeEnum
     */
    TYPE((short)1, "type"),
    ORDERID((short)2, "orderid"),
    POIIDS((short)3, "poiids"),
    DEALID((short)4, "dealid"),
    PRICE((short)5, "price"),
    NUM((short)6, "num"),
    ORDER_TIME((short)7, "orderTime"),
    EXTRA_MAP((short)8, "extraMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ORDERID
          return ORDERID;
        case 3: // POIIDS
          return POIIDS;
        case 4: // DEALID
          return DEALID;
        case 5: // PRICE
          return PRICE;
        case 6: // NUM
          return NUM;
        case 7: // ORDER_TIME
          return ORDER_TIME;
        case 8: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __DEALID_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __NUM_ISSET_ID = 3;
  private static final int __ORDERTIME_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.TYPE,_Fields.ORDERID,_Fields.POIIDS,_Fields.DEALID,_Fields.PRICE,_Fields.NUM,_Fields.ORDER_TIME,_Fields.EXTRA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OrderTypeEnum.class)));
    tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POIIDS, new org.apache.thrift.meta_data.FieldMetaData("poiids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoiInfo.class))));
    tmpMap.put(_Fields.DEALID, new org.apache.thrift.meta_data.FieldMetaData("dealid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_TIME, new org.apache.thrift.meta_data.FieldMetaData("orderTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossTravelOrderInfo.class, metaDataMap);
  }

  public CrossTravelOrderInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossTravelOrderInfo(CrossTravelOrderInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.orderid = other.orderid;
    if (other.isSetPoiids()) {
      List<PoiInfo> __this__poiids = new ArrayList<PoiInfo>();
      for (PoiInfo other_element : other.poiids) {
        __this__poiids.add(new PoiInfo(other_element));
      }
      this.poiids = __this__poiids;
    }
    this.dealid = other.dealid;
    this.price = other.price;
    this.num = other.num;
    this.orderTime = other.orderTime;
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraMap_copy_key = other_element_key;

        String __this__extraMap_copy_value = other_element_value;

        __this__extraMap.put(__this__extraMap_copy_key, __this__extraMap_copy_value);
      }
      this.extraMap = __this__extraMap;
    }
  }

  public CrossTravelOrderInfo deepCopy() {
    return new CrossTravelOrderInfo(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setOrderidIsSet(false);
    this.orderid = 0;
    this.poiids = null;
    setDealidIsSet(false);
    this.dealid = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setNumIsSet(false);
    this.num = 0;
    setOrderTimeIsSet(false);
    this.orderTime = 0;
    this.extraMap = null;
  }

  /**
   * 
   * @see OrderTypeEnum
   */
  public OrderTypeEnum getType() {
    return this.type;
  }

  /**
   * 
   * @see OrderTypeEnum
   */
  public CrossTravelOrderInfo setType(OrderTypeEnum type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getOrderid() {
    return this.orderid;
  }

  public CrossTravelOrderInfo setOrderid(long orderid) {
    this.orderid = orderid;
    setOrderidIsSet(true);
    return this;
  }

  public void unsetOrderid() {
    __isset_bit_vector.clear(__ORDERID_ISSET_ID);
  }

  /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderid() {
    return __isset_bit_vector.get(__ORDERID_ISSET_ID);
  }

  public void setOrderidIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERID_ISSET_ID, value);
  }

  public int getPoiidsSize() {
    return (this.poiids == null) ? 0 : this.poiids.size();
  }

  public java.util.Iterator<PoiInfo> getPoiidsIterator() {
    return (this.poiids == null) ? null : this.poiids.iterator();
  }

  public void addToPoiids(PoiInfo elem) {
    if (this.poiids == null) {
      this.poiids = new ArrayList<PoiInfo>();
    }
    this.poiids.add(elem);
  }

  public List<PoiInfo> getPoiids() {
    return this.poiids;
  }

  public CrossTravelOrderInfo setPoiids(List<PoiInfo> poiids) {
    this.poiids = poiids;
    return this;
  }

  public void unsetPoiids() {
    this.poiids = null;
  }

  /** Returns true if field poiids is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiids() {
    return this.poiids != null;
  }

  public void setPoiidsIsSet(boolean value) {
    if (!value) {
      this.poiids = null;
    }
  }

  public long getDealid() {
    return this.dealid;
  }

  public CrossTravelOrderInfo setDealid(long dealid) {
    this.dealid = dealid;
    setDealidIsSet(true);
    return this;
  }

  public void unsetDealid() {
    __isset_bit_vector.clear(__DEALID_ISSET_ID);
  }

  /** Returns true if field dealid is set (has been assigned a value) and false otherwise */
  public boolean isSetDealid() {
    return __isset_bit_vector.get(__DEALID_ISSET_ID);
  }

  public void setDealidIsSet(boolean value) {
    __isset_bit_vector.set(__DEALID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public CrossTravelOrderInfo setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public int getNum() {
    return this.num;
  }

  public CrossTravelOrderInfo setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bit_vector.clear(__NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return __isset_bit_vector.get(__NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ISSET_ID, value);
  }

  public long getOrderTime() {
    return this.orderTime;
  }

  public CrossTravelOrderInfo setOrderTime(long orderTime) {
    this.orderTime = orderTime;
    setOrderTimeIsSet(true);
    return this;
  }

  public void unsetOrderTime() {
    __isset_bit_vector.clear(__ORDERTIME_ISSET_ID);
  }

  /** Returns true if field orderTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTime() {
    return __isset_bit_vector.get(__ORDERTIME_ISSET_ID);
  }

  public void setOrderTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERTIME_ISSET_ID, value);
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public CrossTravelOrderInfo setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((OrderTypeEnum)value);
      }
      break;

    case ORDERID:
      if (value == null) {
        unsetOrderid();
      } else {
        setOrderid((Long)value);
      }
      break;

    case POIIDS:
      if (value == null) {
        unsetPoiids();
      } else {
        setPoiids((List<PoiInfo>)value);
      }
      break;

    case DEALID:
      if (value == null) {
        unsetDealid();
      } else {
        setDealid((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case ORDER_TIME:
      if (value == null) {
        unsetOrderTime();
      } else {
        setOrderTime((Long)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ORDERID:
      return Long.valueOf(getOrderid());

    case POIIDS:
      return getPoiids();

    case DEALID:
      return Long.valueOf(getDealid());

    case PRICE:
      return Double.valueOf(getPrice());

    case NUM:
      return Integer.valueOf(getNum());

    case ORDER_TIME:
      return Long.valueOf(getOrderTime());

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ORDERID:
      return isSetOrderid();
    case POIIDS:
      return isSetPoiids();
    case DEALID:
      return isSetDealid();
    case PRICE:
      return isSetPrice();
    case NUM:
      return isSetNum();
    case ORDER_TIME:
      return isSetOrderTime();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossTravelOrderInfo)
      return this.equals((CrossTravelOrderInfo)that);
    return false;
  }

  public boolean equals(CrossTravelOrderInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_orderid = true && this.isSetOrderid();
    boolean that_present_orderid = true && that.isSetOrderid();
    if (this_present_orderid || that_present_orderid) {
      if (!(this_present_orderid && that_present_orderid))
        return false;
      if (this.orderid != that.orderid)
        return false;
    }

    boolean this_present_poiids = true && this.isSetPoiids();
    boolean that_present_poiids = true && that.isSetPoiids();
    if (this_present_poiids || that_present_poiids) {
      if (!(this_present_poiids && that_present_poiids))
        return false;
      if (!this.poiids.equals(that.poiids))
        return false;
    }

    boolean this_present_dealid = true && this.isSetDealid();
    boolean that_present_dealid = true && that.isSetDealid();
    if (this_present_dealid || that_present_dealid) {
      if (!(this_present_dealid && that_present_dealid))
        return false;
      if (this.dealid != that.dealid)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_orderTime = true && this.isSetOrderTime();
    boolean that_present_orderTime = true && that.isSetOrderTime();
    if (this_present_orderTime || that_present_orderTime) {
      if (!(this_present_orderTime && that_present_orderTime))
        return false;
      if (this.orderTime != that.orderTime)
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CrossTravelOrderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CrossTravelOrderInfo typedOther = (CrossTravelOrderInfo)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(typedOther.isSetOrderid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, typedOther.orderid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiids()).compareTo(typedOther.isSetPoiids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiids, typedOther.poiids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealid()).compareTo(typedOther.isSetDealid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealid, typedOther.dealid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(typedOther.isSetOrderTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, typedOther.orderTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(typedOther.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, typedOther.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrossTravelOrderInfo(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetOrderid()) {
      if (!first) sb.append(", ");
      sb.append("orderid:");
      sb.append(this.orderid);
      first = false;
    }
    if (isSetPoiids()) {
      if (!first) sb.append(", ");
      sb.append("poiids:");
      if (this.poiids == null) {
        sb.append("null");
      } else {
        sb.append(this.poiids);
      }
      first = false;
    }
    if (isSetDealid()) {
      if (!first) sb.append(", ");
      sb.append("dealid:");
      sb.append(this.dealid);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetNum()) {
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
    }
    if (isSetOrderTime()) {
      if (!first) sb.append(", ");
      sb.append("orderTime:");
      sb.append(this.orderTime);
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossTravelOrderInfoStandardSchemeFactory implements SchemeFactory {
    public CrossTravelOrderInfoStandardScheme getScheme() {
      return new CrossTravelOrderInfoStandardScheme();
    }
  }

  private static class CrossTravelOrderInfoStandardScheme extends StandardScheme<CrossTravelOrderInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossTravelOrderInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = OrderTypeEnum.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderid = iprot.readI64();
              struct.setOrderidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POIIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.poiids = new ArrayList<PoiInfo>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  PoiInfo _elem20; // required
                  _elem20 = new PoiInfo();
                  _elem20.read(iprot);
                  struct.poiids.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setPoiidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dealid = iprot.readI64();
              struct.setDealidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderTime = iprot.readI64();
              struct.setOrderTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map21.size);
                for (int _i22 = 0; _i22 < _map21.size; ++_i22)
                {
                  String _key23; // required
                  String _val24; // required
                  _key23 = iprot.readString();
                  _val24 = iprot.readString();
                  struct.extraMap.put(_key23, _val24);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossTravelOrderInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderid()) {
        oprot.writeFieldBegin(ORDERID_FIELD_DESC);
        oprot.writeI64(struct.orderid);
        oprot.writeFieldEnd();
      }
      if (struct.poiids != null) {
        if (struct.isSetPoiids()) {
          oprot.writeFieldBegin(POIIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.poiids.size()));
            for (PoiInfo _iter25 : struct.poiids)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDealid()) {
        oprot.writeFieldBegin(DEALID_FIELD_DESC);
        oprot.writeI64(struct.dealid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum()) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderTime()) {
        oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
        oprot.writeI64(struct.orderTime);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter26 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossTravelOrderInfoTupleSchemeFactory implements SchemeFactory {
    public CrossTravelOrderInfoTupleScheme getScheme() {
      return new CrossTravelOrderInfoTupleScheme();
    }
  }

  private static class CrossTravelOrderInfoTupleScheme extends TupleScheme<CrossTravelOrderInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossTravelOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetOrderid()) {
        optionals.set(1);
      }
      if (struct.isSetPoiids()) {
        optionals.set(2);
      }
      if (struct.isSetDealid()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetNum()) {
        optionals.set(5);
      }
      if (struct.isSetOrderTime()) {
        optionals.set(6);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetOrderid()) {
        oprot.writeI64(struct.orderid);
      }
      if (struct.isSetPoiids()) {
        {
          oprot.writeI32(struct.poiids.size());
          for (PoiInfo _iter27 : struct.poiids)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetDealid()) {
        oprot.writeI64(struct.dealid);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetOrderTime()) {
        oprot.writeI64(struct.orderTime);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter28 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossTravelOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.type = OrderTypeEnum.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderid = iprot.readI64();
        struct.setOrderidIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.poiids = new ArrayList<PoiInfo>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            PoiInfo _elem31; // required
            _elem31 = new PoiInfo();
            _elem31.read(iprot);
            struct.poiids.add(_elem31);
          }
        }
        struct.setPoiidsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dealid = iprot.readI64();
        struct.setDealidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderTime = iprot.readI64();
        struct.setOrderTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // required
            String _val35; // required
            _key34 = iprot.readString();
            _val35 = iprot.readString();
            struct.extraMap.put(_key34, _val35);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

}

