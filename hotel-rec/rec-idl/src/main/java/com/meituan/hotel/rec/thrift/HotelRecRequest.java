/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HotelRecRequest implements org.apache.thrift.TBase<HotelRecRequest, HotelRecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HotelRecRequest");

  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SORTING_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortingMethod", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POI_ON_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("poiOnShow", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SELECT_REC_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("selectRecMsg", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SEARCH_REC_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("searchRecMsg", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField POI_DETAIL_REC_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("poiDetailRecMsg", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CROSS_REC_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("crossRecMsg", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HotelRecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HotelRecRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see RecServiceType
   */
  public RecServiceType serviceType; // required
  public int offset; // optional
  /**
   * 
   * @see SortingMethod
   */
  public SortingMethod sortingMethod; // optional
  public String strategy; // optional
  public List<Integer> poiOnShow; // optional
  public SelectRecExtraMsg selectRecMsg; // optional
  public SearchRecExtraMsg searchRecMsg; // optional
  public PoiDetailRecExtraMsg poiDetailRecMsg; // optional
  public CrossRecExtraMsg crossRecMsg; // optional
  public Map<String,String> extraDataMap; // optional
  public UserRecInfo userInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RecServiceType
     */
    SERVICE_TYPE((short)1, "serviceType"),
    OFFSET((short)2, "offset"),
    /**
     * 
     * @see SortingMethod
     */
    SORTING_METHOD((short)3, "sortingMethod"),
    STRATEGY((short)4, "strategy"),
    POI_ON_SHOW((short)5, "poiOnShow"),
    SELECT_REC_MSG((short)6, "selectRecMsg"),
    SEARCH_REC_MSG((short)7, "searchRecMsg"),
    POI_DETAIL_REC_MSG((short)8, "poiDetailRecMsg"),
    CROSS_REC_MSG((short)9, "crossRecMsg"),
    EXTRA_DATA_MAP((short)10, "extraDataMap"),
    USER_INFO((short)11, "userInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 2: // OFFSET
          return OFFSET;
        case 3: // SORTING_METHOD
          return SORTING_METHOD;
        case 4: // STRATEGY
          return STRATEGY;
        case 5: // POI_ON_SHOW
          return POI_ON_SHOW;
        case 6: // SELECT_REC_MSG
          return SELECT_REC_MSG;
        case 7: // SEARCH_REC_MSG
          return SEARCH_REC_MSG;
        case 8: // POI_DETAIL_REC_MSG
          return POI_DETAIL_REC_MSG;
        case 9: // CROSS_REC_MSG
          return CROSS_REC_MSG;
        case 10: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        case 11: // USER_INFO
          return USER_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.OFFSET,_Fields.SORTING_METHOD,_Fields.STRATEGY,_Fields.POI_ON_SHOW,_Fields.SELECT_REC_MSG,_Fields.SEARCH_REC_MSG,_Fields.POI_DETAIL_REC_MSG,_Fields.CROSS_REC_MSG,_Fields.EXTRA_DATA_MAP,_Fields.USER_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecServiceType.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORTING_METHOD, new org.apache.thrift.meta_data.FieldMetaData("sortingMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortingMethod.class)));
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POI_ON_SHOW, new org.apache.thrift.meta_data.FieldMetaData("poiOnShow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SELECT_REC_MSG, new org.apache.thrift.meta_data.FieldMetaData("selectRecMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SelectRecExtraMsg.class)));
    tmpMap.put(_Fields.SEARCH_REC_MSG, new org.apache.thrift.meta_data.FieldMetaData("searchRecMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchRecExtraMsg.class)));
    tmpMap.put(_Fields.POI_DETAIL_REC_MSG, new org.apache.thrift.meta_data.FieldMetaData("poiDetailRecMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PoiDetailRecExtraMsg.class)));
    tmpMap.put(_Fields.CROSS_REC_MSG, new org.apache.thrift.meta_data.FieldMetaData("crossRecMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossRecExtraMsg.class)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HotelRecRequest.class, metaDataMap);
  }

  public HotelRecRequest() {
    this.offset = 0;

  }

  public HotelRecRequest(
    RecServiceType serviceType)
  {
    this();
    this.serviceType = serviceType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HotelRecRequest(HotelRecRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetServiceType()) {
      this.serviceType = other.serviceType;
    }
    this.offset = other.offset;
    if (other.isSetSortingMethod()) {
      this.sortingMethod = other.sortingMethod;
    }
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    if (other.isSetPoiOnShow()) {
      List<Integer> __this__poiOnShow = new ArrayList<Integer>();
      for (Integer other_element : other.poiOnShow) {
        __this__poiOnShow.add(other_element);
      }
      this.poiOnShow = __this__poiOnShow;
    }
    if (other.isSetSelectRecMsg()) {
      this.selectRecMsg = new SelectRecExtraMsg(other.selectRecMsg);
    }
    if (other.isSetSearchRecMsg()) {
      this.searchRecMsg = new SearchRecExtraMsg(other.searchRecMsg);
    }
    if (other.isSetPoiDetailRecMsg()) {
      this.poiDetailRecMsg = new PoiDetailRecExtraMsg(other.poiDetailRecMsg);
    }
    if (other.isSetCrossRecMsg()) {
      this.crossRecMsg = new CrossRecExtraMsg(other.crossRecMsg);
    }
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
    if (other.isSetUserInfo()) {
      this.userInfo = new UserRecInfo(other.userInfo);
    }
  }

  public HotelRecRequest deepCopy() {
    return new HotelRecRequest(this);
  }

  @Override
  public void clear() {
    this.serviceType = null;
    this.offset = 0;

    this.sortingMethod = null;
    this.strategy = null;
    this.poiOnShow = null;
    this.selectRecMsg = null;
    this.searchRecMsg = null;
    this.poiDetailRecMsg = null;
    this.crossRecMsg = null;
    this.extraDataMap = null;
    this.userInfo = null;
  }

  /**
   * 
   * @see RecServiceType
   */
  public RecServiceType getServiceType() {
    return this.serviceType;
  }

  /**
   * 
   * @see RecServiceType
   */
  public HotelRecRequest setServiceType(RecServiceType serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  public void unsetServiceType() {
    this.serviceType = null;
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return this.serviceType != null;
  }

  public void setServiceTypeIsSet(boolean value) {
    if (!value) {
      this.serviceType = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public HotelRecRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bit_vector.clear(__OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return __isset_bit_vector.get(__OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
  }

  /**
   * 
   * @see SortingMethod
   */
  public SortingMethod getSortingMethod() {
    return this.sortingMethod;
  }

  /**
   * 
   * @see SortingMethod
   */
  public HotelRecRequest setSortingMethod(SortingMethod sortingMethod) {
    this.sortingMethod = sortingMethod;
    return this;
  }

  public void unsetSortingMethod() {
    this.sortingMethod = null;
  }

  /** Returns true if field sortingMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetSortingMethod() {
    return this.sortingMethod != null;
  }

  public void setSortingMethodIsSet(boolean value) {
    if (!value) {
      this.sortingMethod = null;
    }
  }

  public String getStrategy() {
    return this.strategy;
  }

  public HotelRecRequest setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public int getPoiOnShowSize() {
    return (this.poiOnShow == null) ? 0 : this.poiOnShow.size();
  }

  public java.util.Iterator<Integer> getPoiOnShowIterator() {
    return (this.poiOnShow == null) ? null : this.poiOnShow.iterator();
  }

  public void addToPoiOnShow(int elem) {
    if (this.poiOnShow == null) {
      this.poiOnShow = new ArrayList<Integer>();
    }
    this.poiOnShow.add(elem);
  }

  public List<Integer> getPoiOnShow() {
    return this.poiOnShow;
  }

  public HotelRecRequest setPoiOnShow(List<Integer> poiOnShow) {
    this.poiOnShow = poiOnShow;
    return this;
  }

  public void unsetPoiOnShow() {
    this.poiOnShow = null;
  }

  /** Returns true if field poiOnShow is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiOnShow() {
    return this.poiOnShow != null;
  }

  public void setPoiOnShowIsSet(boolean value) {
    if (!value) {
      this.poiOnShow = null;
    }
  }

  public SelectRecExtraMsg getSelectRecMsg() {
    return this.selectRecMsg;
  }

  public HotelRecRequest setSelectRecMsg(SelectRecExtraMsg selectRecMsg) {
    this.selectRecMsg = selectRecMsg;
    return this;
  }

  public void unsetSelectRecMsg() {
    this.selectRecMsg = null;
  }

  /** Returns true if field selectRecMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectRecMsg() {
    return this.selectRecMsg != null;
  }

  public void setSelectRecMsgIsSet(boolean value) {
    if (!value) {
      this.selectRecMsg = null;
    }
  }

  public SearchRecExtraMsg getSearchRecMsg() {
    return this.searchRecMsg;
  }

  public HotelRecRequest setSearchRecMsg(SearchRecExtraMsg searchRecMsg) {
    this.searchRecMsg = searchRecMsg;
    return this;
  }

  public void unsetSearchRecMsg() {
    this.searchRecMsg = null;
  }

  /** Returns true if field searchRecMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchRecMsg() {
    return this.searchRecMsg != null;
  }

  public void setSearchRecMsgIsSet(boolean value) {
    if (!value) {
      this.searchRecMsg = null;
    }
  }

  public PoiDetailRecExtraMsg getPoiDetailRecMsg() {
    return this.poiDetailRecMsg;
  }

  public HotelRecRequest setPoiDetailRecMsg(PoiDetailRecExtraMsg poiDetailRecMsg) {
    this.poiDetailRecMsg = poiDetailRecMsg;
    return this;
  }

  public void unsetPoiDetailRecMsg() {
    this.poiDetailRecMsg = null;
  }

  /** Returns true if field poiDetailRecMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiDetailRecMsg() {
    return this.poiDetailRecMsg != null;
  }

  public void setPoiDetailRecMsgIsSet(boolean value) {
    if (!value) {
      this.poiDetailRecMsg = null;
    }
  }

  public CrossRecExtraMsg getCrossRecMsg() {
    return this.crossRecMsg;
  }

  public HotelRecRequest setCrossRecMsg(CrossRecExtraMsg crossRecMsg) {
    this.crossRecMsg = crossRecMsg;
    return this;
  }

  public void unsetCrossRecMsg() {
    this.crossRecMsg = null;
  }

  /** Returns true if field crossRecMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossRecMsg() {
    return this.crossRecMsg != null;
  }

  public void setCrossRecMsgIsSet(boolean value) {
    if (!value) {
      this.crossRecMsg = null;
    }
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public HotelRecRequest setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public UserRecInfo getUserInfo() {
    return this.userInfo;
  }

  public HotelRecRequest setUserInfo(UserRecInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((RecServiceType)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case SORTING_METHOD:
      if (value == null) {
        unsetSortingMethod();
      } else {
        setSortingMethod((SortingMethod)value);
      }
      break;

    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case POI_ON_SHOW:
      if (value == null) {
        unsetPoiOnShow();
      } else {
        setPoiOnShow((List<Integer>)value);
      }
      break;

    case SELECT_REC_MSG:
      if (value == null) {
        unsetSelectRecMsg();
      } else {
        setSelectRecMsg((SelectRecExtraMsg)value);
      }
      break;

    case SEARCH_REC_MSG:
      if (value == null) {
        unsetSearchRecMsg();
      } else {
        setSearchRecMsg((SearchRecExtraMsg)value);
      }
      break;

    case POI_DETAIL_REC_MSG:
      if (value == null) {
        unsetPoiDetailRecMsg();
      } else {
        setPoiDetailRecMsg((PoiDetailRecExtraMsg)value);
      }
      break;

    case CROSS_REC_MSG:
      if (value == null) {
        unsetCrossRecMsg();
      } else {
        setCrossRecMsg((CrossRecExtraMsg)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((UserRecInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_TYPE:
      return getServiceType();

    case OFFSET:
      return Integer.valueOf(getOffset());

    case SORTING_METHOD:
      return getSortingMethod();

    case STRATEGY:
      return getStrategy();

    case POI_ON_SHOW:
      return getPoiOnShow();

    case SELECT_REC_MSG:
      return getSelectRecMsg();

    case SEARCH_REC_MSG:
      return getSearchRecMsg();

    case POI_DETAIL_REC_MSG:
      return getPoiDetailRecMsg();

    case CROSS_REC_MSG:
      return getCrossRecMsg();

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    case USER_INFO:
      return getUserInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_TYPE:
      return isSetServiceType();
    case OFFSET:
      return isSetOffset();
    case SORTING_METHOD:
      return isSetSortingMethod();
    case STRATEGY:
      return isSetStrategy();
    case POI_ON_SHOW:
      return isSetPoiOnShow();
    case SELECT_REC_MSG:
      return isSetSelectRecMsg();
    case SEARCH_REC_MSG:
      return isSetSearchRecMsg();
    case POI_DETAIL_REC_MSG:
      return isSetPoiDetailRecMsg();
    case CROSS_REC_MSG:
      return isSetCrossRecMsg();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    case USER_INFO:
      return isSetUserInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HotelRecRequest)
      return this.equals((HotelRecRequest)that);
    return false;
  }

  public boolean equals(HotelRecRequest that) {
    if (that == null)
      return false;

    boolean this_present_serviceType = true && this.isSetServiceType();
    boolean that_present_serviceType = true && that.isSetServiceType();
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (!this.serviceType.equals(that.serviceType))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_sortingMethod = true && this.isSetSortingMethod();
    boolean that_present_sortingMethod = true && that.isSetSortingMethod();
    if (this_present_sortingMethod || that_present_sortingMethod) {
      if (!(this_present_sortingMethod && that_present_sortingMethod))
        return false;
      if (!this.sortingMethod.equals(that.sortingMethod))
        return false;
    }

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_poiOnShow = true && this.isSetPoiOnShow();
    boolean that_present_poiOnShow = true && that.isSetPoiOnShow();
    if (this_present_poiOnShow || that_present_poiOnShow) {
      if (!(this_present_poiOnShow && that_present_poiOnShow))
        return false;
      if (!this.poiOnShow.equals(that.poiOnShow))
        return false;
    }

    boolean this_present_selectRecMsg = true && this.isSetSelectRecMsg();
    boolean that_present_selectRecMsg = true && that.isSetSelectRecMsg();
    if (this_present_selectRecMsg || that_present_selectRecMsg) {
      if (!(this_present_selectRecMsg && that_present_selectRecMsg))
        return false;
      if (!this.selectRecMsg.equals(that.selectRecMsg))
        return false;
    }

    boolean this_present_searchRecMsg = true && this.isSetSearchRecMsg();
    boolean that_present_searchRecMsg = true && that.isSetSearchRecMsg();
    if (this_present_searchRecMsg || that_present_searchRecMsg) {
      if (!(this_present_searchRecMsg && that_present_searchRecMsg))
        return false;
      if (!this.searchRecMsg.equals(that.searchRecMsg))
        return false;
    }

    boolean this_present_poiDetailRecMsg = true && this.isSetPoiDetailRecMsg();
    boolean that_present_poiDetailRecMsg = true && that.isSetPoiDetailRecMsg();
    if (this_present_poiDetailRecMsg || that_present_poiDetailRecMsg) {
      if (!(this_present_poiDetailRecMsg && that_present_poiDetailRecMsg))
        return false;
      if (!this.poiDetailRecMsg.equals(that.poiDetailRecMsg))
        return false;
    }

    boolean this_present_crossRecMsg = true && this.isSetCrossRecMsg();
    boolean that_present_crossRecMsg = true && that.isSetCrossRecMsg();
    if (this_present_crossRecMsg || that_present_crossRecMsg) {
      if (!(this_present_crossRecMsg && that_present_crossRecMsg))
        return false;
      if (!this.crossRecMsg.equals(that.crossRecMsg))
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HotelRecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HotelRecRequest typedOther = (HotelRecRequest)other;

    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(typedOther.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, typedOther.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortingMethod()).compareTo(typedOther.isSetSortingMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortingMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortingMethod, typedOther.sortingMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiOnShow()).compareTo(typedOther.isSetPoiOnShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiOnShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiOnShow, typedOther.poiOnShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectRecMsg()).compareTo(typedOther.isSetSelectRecMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectRecMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectRecMsg, typedOther.selectRecMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchRecMsg()).compareTo(typedOther.isSetSearchRecMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchRecMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchRecMsg, typedOther.searchRecMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiDetailRecMsg()).compareTo(typedOther.isSetPoiDetailRecMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiDetailRecMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiDetailRecMsg, typedOther.poiDetailRecMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossRecMsg()).compareTo(typedOther.isSetCrossRecMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossRecMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossRecMsg, typedOther.crossRecMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserInfo()).compareTo(typedOther.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, typedOther.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HotelRecRequest(");
    boolean first = true;

    sb.append("serviceType:");
    if (this.serviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceType);
    }
    first = false;
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetSortingMethod()) {
      if (!first) sb.append(", ");
      sb.append("sortingMethod:");
      if (this.sortingMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.sortingMethod);
      }
      first = false;
    }
    if (isSetStrategy()) {
      if (!first) sb.append(", ");
      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
    }
    if (isSetPoiOnShow()) {
      if (!first) sb.append(", ");
      sb.append("poiOnShow:");
      if (this.poiOnShow == null) {
        sb.append("null");
      } else {
        sb.append(this.poiOnShow);
      }
      first = false;
    }
    if (isSetSelectRecMsg()) {
      if (!first) sb.append(", ");
      sb.append("selectRecMsg:");
      if (this.selectRecMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.selectRecMsg);
      }
      first = false;
    }
    if (isSetSearchRecMsg()) {
      if (!first) sb.append(", ");
      sb.append("searchRecMsg:");
      if (this.searchRecMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.searchRecMsg);
      }
      first = false;
    }
    if (isSetPoiDetailRecMsg()) {
      if (!first) sb.append(", ");
      sb.append("poiDetailRecMsg:");
      if (this.poiDetailRecMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.poiDetailRecMsg);
      }
      first = false;
    }
    if (isSetCrossRecMsg()) {
      if (!first) sb.append(", ");
      sb.append("crossRecMsg:");
      if (this.crossRecMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.crossRecMsg);
      }
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    if (isSetUserInfo()) {
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceType' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HotelRecRequestStandardSchemeFactory implements SchemeFactory {
    public HotelRecRequestStandardScheme getScheme() {
      return new HotelRecRequestStandardScheme();
    }
  }

  private static class HotelRecRequestStandardScheme extends StandardScheme<HotelRecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HotelRecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceType = RecServiceType.findByValue(iprot.readI32());
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORTING_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortingMethod = SortingMethod.findByValue(iprot.readI32());
              struct.setSortingMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POI_ON_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.poiOnShow = new ArrayList<Integer>(_list110.size);
                for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                {
                  int _elem112; // required
                  _elem112 = iprot.readI32();
                  struct.poiOnShow.add(_elem112);
                }
                iprot.readListEnd();
              }
              struct.setPoiOnShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SELECT_REC_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.selectRecMsg = new SelectRecExtraMsg();
              struct.selectRecMsg.read(iprot);
              struct.setSelectRecMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEARCH_REC_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchRecMsg = new SearchRecExtraMsg();
              struct.searchRecMsg.read(iprot);
              struct.setSearchRecMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POI_DETAIL_REC_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.poiDetailRecMsg = new PoiDetailRecExtraMsg();
              struct.poiDetailRecMsg.read(iprot);
              struct.setPoiDetailRecMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CROSS_REC_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.crossRecMsg = new CrossRecExtraMsg();
              struct.crossRecMsg.read(iprot);
              struct.setCrossRecMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map113 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map113.size);
                for (int _i114 = 0; _i114 < _map113.size; ++_i114)
                {
                  String _key115; // required
                  String _val116; // required
                  _key115 = iprot.readString();
                  _val116 = iprot.readString();
                  struct.extraDataMap.put(_key115, _val116);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new UserRecInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HotelRecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceType != null) {
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.sortingMethod != null) {
        if (struct.isSetSortingMethod()) {
          oprot.writeFieldBegin(SORTING_METHOD_FIELD_DESC);
          oprot.writeI32(struct.sortingMethod.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.strategy != null) {
        if (struct.isSetStrategy()) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poiOnShow != null) {
        if (struct.isSetPoiOnShow()) {
          oprot.writeFieldBegin(POI_ON_SHOW_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.poiOnShow.size()));
            for (int _iter117 : struct.poiOnShow)
            {
              oprot.writeI32(_iter117);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.selectRecMsg != null) {
        if (struct.isSetSelectRecMsg()) {
          oprot.writeFieldBegin(SELECT_REC_MSG_FIELD_DESC);
          struct.selectRecMsg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.searchRecMsg != null) {
        if (struct.isSetSearchRecMsg()) {
          oprot.writeFieldBegin(SEARCH_REC_MSG_FIELD_DESC);
          struct.searchRecMsg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poiDetailRecMsg != null) {
        if (struct.isSetPoiDetailRecMsg()) {
          oprot.writeFieldBegin(POI_DETAIL_REC_MSG_FIELD_DESC);
          struct.poiDetailRecMsg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.crossRecMsg != null) {
        if (struct.isSetCrossRecMsg()) {
          oprot.writeFieldBegin(CROSS_REC_MSG_FIELD_DESC);
          struct.crossRecMsg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter118 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.userInfo != null) {
        if (struct.isSetUserInfo()) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HotelRecRequestTupleSchemeFactory implements SchemeFactory {
    public HotelRecRequestTupleScheme getScheme() {
      return new HotelRecRequestTupleScheme();
    }
  }

  private static class HotelRecRequestTupleScheme extends TupleScheme<HotelRecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HotelRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetOffset()) {
        optionals.set(0);
      }
      if (struct.isSetSortingMethod()) {
        optionals.set(1);
      }
      if (struct.isSetStrategy()) {
        optionals.set(2);
      }
      if (struct.isSetPoiOnShow()) {
        optionals.set(3);
      }
      if (struct.isSetSelectRecMsg()) {
        optionals.set(4);
      }
      if (struct.isSetSearchRecMsg()) {
        optionals.set(5);
      }
      if (struct.isSetPoiDetailRecMsg()) {
        optionals.set(6);
      }
      if (struct.isSetCrossRecMsg()) {
        optionals.set(7);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(8);
      }
      if (struct.isSetUserInfo()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetSortingMethod()) {
        oprot.writeI32(struct.sortingMethod.getValue());
      }
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetPoiOnShow()) {
        {
          oprot.writeI32(struct.poiOnShow.size());
          for (int _iter119 : struct.poiOnShow)
          {
            oprot.writeI32(_iter119);
          }
        }
      }
      if (struct.isSetSelectRecMsg()) {
        struct.selectRecMsg.write(oprot);
      }
      if (struct.isSetSearchRecMsg()) {
        struct.searchRecMsg.write(oprot);
      }
      if (struct.isSetPoiDetailRecMsg()) {
        struct.poiDetailRecMsg.write(oprot);
      }
      if (struct.isSetCrossRecMsg()) {
        struct.crossRecMsg.write(oprot);
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter120 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter120.getKey());
            oprot.writeString(_iter120.getValue());
          }
        }
      }
      if (struct.isSetUserInfo()) {
        struct.userInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HotelRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceType = RecServiceType.findByValue(iprot.readI32());
      struct.setServiceTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sortingMethod = SortingMethod.findByValue(iprot.readI32());
        struct.setSortingMethodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.poiOnShow = new ArrayList<Integer>(_list121.size);
          for (int _i122 = 0; _i122 < _list121.size; ++_i122)
          {
            int _elem123; // required
            _elem123 = iprot.readI32();
            struct.poiOnShow.add(_elem123);
          }
        }
        struct.setPoiOnShowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.selectRecMsg = new SelectRecExtraMsg();
        struct.selectRecMsg.read(iprot);
        struct.setSelectRecMsgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.searchRecMsg = new SearchRecExtraMsg();
        struct.searchRecMsg.read(iprot);
        struct.setSearchRecMsgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.poiDetailRecMsg = new PoiDetailRecExtraMsg();
        struct.poiDetailRecMsg.read(iprot);
        struct.setPoiDetailRecMsgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.crossRecMsg = new CrossRecExtraMsg();
        struct.crossRecMsg.read(iprot);
        struct.setCrossRecMsgIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map124.size);
          for (int _i125 = 0; _i125 < _map124.size; ++_i125)
          {
            String _key126; // required
            String _val127; // required
            _key126 = iprot.readString();
            _val127 = iprot.readString();
            struct.extraDataMap.put(_key126, _val127);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
      if (incoming.get(9)) {
        struct.userInfo = new UserRecInfo();
        struct.userInfo.read(iprot);
        struct.setUserInfoIsSet(true);
      }
    }
  }

}

