/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.select;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SelectRecRequest implements org.apache.thrift.TBase<SelectRecRequest, SelectRecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SelectRecRequest");

  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOMMODATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accommodationType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HOTEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelType", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandId", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PRICE_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("priceLow", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PRICE_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("priceHigh", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SORTING_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortingMethod", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DATE_CHECKIN_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCheckin", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DATE_CHECHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("dateChechout", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOCATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("locationType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField ROOM_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("roomTypeList", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField RECEIPT_PROVIDED_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptProvided", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SelectRecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SelectRecRequestTupleSchemeFactory());
  }

  public String strategy; // optional
  public int cityId; // required
  public int roomType; // optional
  public int accommodationType; // optional
  public List<Integer> hotelType; // optional
  public List<Integer> brandId; // optional
  public double lng; // optional
  public double lat; // optional
  public double priceLow; // optional
  public double priceHigh; // optional
  public String uuid; // optional
  public String sortingMethod; // optional
  public String dateCheckin; // optional
  public String dateChechout; // optional
  public String clientType; // optional
  public String appVersion; // optional
  public int locationType; // optional
  public Map<String,String> extraMap; // optional
  public List<Integer> roomTypeList; // optional
  public int businessType; // optional
  public int receiptProvided; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRATEGY((short)1, "strategy"),
    CITY_ID((short)2, "cityId"),
    ROOM_TYPE((short)3, "roomType"),
    ACCOMMODATION_TYPE((short)4, "accommodationType"),
    HOTEL_TYPE((short)5, "hotelType"),
    BRAND_ID((short)6, "brandId"),
    LNG((short)7, "lng"),
    LAT((short)8, "lat"),
    PRICE_LOW((short)9, "priceLow"),
    PRICE_HIGH((short)10, "priceHigh"),
    UUID((short)11, "uuid"),
    SORTING_METHOD((short)12, "sortingMethod"),
    DATE_CHECKIN((short)13, "dateCheckin"),
    DATE_CHECHOUT((short)14, "dateChechout"),
    CLIENT_TYPE((short)15, "clientType"),
    APP_VERSION((short)16, "appVersion"),
    LOCATION_TYPE((short)17, "locationType"),
    EXTRA_MAP((short)18, "extraMap"),
    ROOM_TYPE_LIST((short)19, "roomTypeList"),
    BUSINESS_TYPE((short)20, "businessType"),
    RECEIPT_PROVIDED((short)21, "receiptProvided");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRATEGY
          return STRATEGY;
        case 2: // CITY_ID
          return CITY_ID;
        case 3: // ROOM_TYPE
          return ROOM_TYPE;
        case 4: // ACCOMMODATION_TYPE
          return ACCOMMODATION_TYPE;
        case 5: // HOTEL_TYPE
          return HOTEL_TYPE;
        case 6: // BRAND_ID
          return BRAND_ID;
        case 7: // LNG
          return LNG;
        case 8: // LAT
          return LAT;
        case 9: // PRICE_LOW
          return PRICE_LOW;
        case 10: // PRICE_HIGH
          return PRICE_HIGH;
        case 11: // UUID
          return UUID;
        case 12: // SORTING_METHOD
          return SORTING_METHOD;
        case 13: // DATE_CHECKIN
          return DATE_CHECKIN;
        case 14: // DATE_CHECHOUT
          return DATE_CHECHOUT;
        case 15: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 16: // APP_VERSION
          return APP_VERSION;
        case 17: // LOCATION_TYPE
          return LOCATION_TYPE;
        case 18: // EXTRA_MAP
          return EXTRA_MAP;
        case 19: // ROOM_TYPE_LIST
          return ROOM_TYPE_LIST;
        case 20: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 21: // RECEIPT_PROVIDED
          return RECEIPT_PROVIDED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CITYID_ISSET_ID = 0;
  private static final int __ROOMTYPE_ISSET_ID = 1;
  private static final int __ACCOMMODATIONTYPE_ISSET_ID = 2;
  private static final int __LNG_ISSET_ID = 3;
  private static final int __LAT_ISSET_ID = 4;
  private static final int __PRICELOW_ISSET_ID = 5;
  private static final int __PRICEHIGH_ISSET_ID = 6;
  private static final int __LOCATIONTYPE_ISSET_ID = 7;
  private static final int __BUSINESSTYPE_ISSET_ID = 8;
  private static final int __RECEIPTPROVIDED_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  private _Fields optionals[] = {_Fields.STRATEGY,_Fields.ROOM_TYPE,_Fields.ACCOMMODATION_TYPE,_Fields.HOTEL_TYPE,_Fields.BRAND_ID,_Fields.LNG,_Fields.LAT,_Fields.PRICE_LOW,_Fields.PRICE_HIGH,_Fields.UUID,_Fields.SORTING_METHOD,_Fields.DATE_CHECKIN,_Fields.DATE_CHECHOUT,_Fields.CLIENT_TYPE,_Fields.APP_VERSION,_Fields.LOCATION_TYPE,_Fields.EXTRA_MAP,_Fields.ROOM_TYPE_LIST,_Fields.BUSINESS_TYPE,_Fields.RECEIPT_PROVIDED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOMMODATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accommodationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOTEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hotelType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brandId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_LOW, new org.apache.thrift.meta_data.FieldMetaData("priceLow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_HIGH, new org.apache.thrift.meta_data.FieldMetaData("priceHigh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORTING_METHOD, new org.apache.thrift.meta_data.FieldMetaData("sortingMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_CHECKIN, new org.apache.thrift.meta_data.FieldMetaData("dateCheckin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_CHECHOUT, new org.apache.thrift.meta_data.FieldMetaData("dateChechout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("locationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ROOM_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("roomTypeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIPT_PROVIDED, new org.apache.thrift.meta_data.FieldMetaData("receiptProvided", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SelectRecRequest.class, metaDataMap);
  }

  public SelectRecRequest() {
  }

  public SelectRecRequest(
    int cityId)
  {
    this();
    this.cityId = cityId;
    setCityIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SelectRecRequest(SelectRecRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    this.cityId = other.cityId;
    this.roomType = other.roomType;
    this.accommodationType = other.accommodationType;
    if (other.isSetHotelType()) {
      List<Integer> __this__hotelType = new ArrayList<Integer>();
      for (Integer other_element : other.hotelType) {
        __this__hotelType.add(other_element);
      }
      this.hotelType = __this__hotelType;
    }
    if (other.isSetBrandId()) {
      List<Integer> __this__brandId = new ArrayList<Integer>();
      for (Integer other_element : other.brandId) {
        __this__brandId.add(other_element);
      }
      this.brandId = __this__brandId;
    }
    this.lng = other.lng;
    this.lat = other.lat;
    this.priceLow = other.priceLow;
    this.priceHigh = other.priceHigh;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetSortingMethod()) {
      this.sortingMethod = other.sortingMethod;
    }
    if (other.isSetDateCheckin()) {
      this.dateCheckin = other.dateCheckin;
    }
    if (other.isSetDateChechout()) {
      this.dateChechout = other.dateChechout;
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    this.locationType = other.locationType;
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraMap_copy_key = other_element_key;

        String __this__extraMap_copy_value = other_element_value;

        __this__extraMap.put(__this__extraMap_copy_key, __this__extraMap_copy_value);
      }
      this.extraMap = __this__extraMap;
    }
    if (other.isSetRoomTypeList()) {
      List<Integer> __this__roomTypeList = new ArrayList<Integer>();
      for (Integer other_element : other.roomTypeList) {
        __this__roomTypeList.add(other_element);
      }
      this.roomTypeList = __this__roomTypeList;
    }
    this.businessType = other.businessType;
    this.receiptProvided = other.receiptProvided;
  }

  public SelectRecRequest deepCopy() {
    return new SelectRecRequest(this);
  }

  @Override
  public void clear() {
    this.strategy = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    setRoomTypeIsSet(false);
    this.roomType = 0;
    setAccommodationTypeIsSet(false);
    this.accommodationType = 0;
    this.hotelType = null;
    this.brandId = null;
    setLngIsSet(false);
    this.lng = 0.0;
    setLatIsSet(false);
    this.lat = 0.0;
    setPriceLowIsSet(false);
    this.priceLow = 0.0;
    setPriceHighIsSet(false);
    this.priceHigh = 0.0;
    this.uuid = null;
    this.sortingMethod = null;
    this.dateCheckin = null;
    this.dateChechout = null;
    this.clientType = null;
    this.appVersion = null;
    setLocationTypeIsSet(false);
    this.locationType = 0;
    this.extraMap = null;
    this.roomTypeList = null;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    setReceiptProvidedIsSet(false);
    this.receiptProvided = 0;
  }

  public String getStrategy() {
    return this.strategy;
  }

  public SelectRecRequest setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public int getCityId() {
    return this.cityId;
  }

  public SelectRecRequest setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);
    return this;
  }

  public void unsetCityId() {
    __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public int getRoomType() {
    return this.roomType;
  }

  public SelectRecRequest setRoomType(int roomType) {
    this.roomType = roomType;
    setRoomTypeIsSet(true);
    return this;
  }

  public void unsetRoomType() {
    __isset_bit_vector.clear(__ROOMTYPE_ISSET_ID);
  }

  /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomType() {
    return __isset_bit_vector.get(__ROOMTYPE_ISSET_ID);
  }

  public void setRoomTypeIsSet(boolean value) {
    __isset_bit_vector.set(__ROOMTYPE_ISSET_ID, value);
  }

  public int getAccommodationType() {
    return this.accommodationType;
  }

  public SelectRecRequest setAccommodationType(int accommodationType) {
    this.accommodationType = accommodationType;
    setAccommodationTypeIsSet(true);
    return this;
  }

  public void unsetAccommodationType() {
    __isset_bit_vector.clear(__ACCOMMODATIONTYPE_ISSET_ID);
  }

  /** Returns true if field accommodationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccommodationType() {
    return __isset_bit_vector.get(__ACCOMMODATIONTYPE_ISSET_ID);
  }

  public void setAccommodationTypeIsSet(boolean value) {
    __isset_bit_vector.set(__ACCOMMODATIONTYPE_ISSET_ID, value);
  }

  public int getHotelTypeSize() {
    return (this.hotelType == null) ? 0 : this.hotelType.size();
  }

  public java.util.Iterator<Integer> getHotelTypeIterator() {
    return (this.hotelType == null) ? null : this.hotelType.iterator();
  }

  public void addToHotelType(int elem) {
    if (this.hotelType == null) {
      this.hotelType = new ArrayList<Integer>();
    }
    this.hotelType.add(elem);
  }

  public List<Integer> getHotelType() {
    return this.hotelType;
  }

  public SelectRecRequest setHotelType(List<Integer> hotelType) {
    this.hotelType = hotelType;
    return this;
  }

  public void unsetHotelType() {
    this.hotelType = null;
  }

  /** Returns true if field hotelType is set (has been assigned a value) and false otherwise */
  public boolean isSetHotelType() {
    return this.hotelType != null;
  }

  public void setHotelTypeIsSet(boolean value) {
    if (!value) {
      this.hotelType = null;
    }
  }

  public int getBrandIdSize() {
    return (this.brandId == null) ? 0 : this.brandId.size();
  }

  public java.util.Iterator<Integer> getBrandIdIterator() {
    return (this.brandId == null) ? null : this.brandId.iterator();
  }

  public void addToBrandId(int elem) {
    if (this.brandId == null) {
      this.brandId = new ArrayList<Integer>();
    }
    this.brandId.add(elem);
  }

  public List<Integer> getBrandId() {
    return this.brandId;
  }

  public SelectRecRequest setBrandId(List<Integer> brandId) {
    this.brandId = brandId;
    return this;
  }

  public void unsetBrandId() {
    this.brandId = null;
  }

  /** Returns true if field brandId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return this.brandId != null;
  }

  public void setBrandIdIsSet(boolean value) {
    if (!value) {
      this.brandId = null;
    }
  }

  public double getLng() {
    return this.lng;
  }

  public SelectRecRequest setLng(double lng) {
    this.lng = lng;
    setLngIsSet(true);
    return this;
  }

  public void unsetLng() {
    __isset_bit_vector.clear(__LNG_ISSET_ID);
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return __isset_bit_vector.get(__LNG_ISSET_ID);
  }

  public void setLngIsSet(boolean value) {
    __isset_bit_vector.set(__LNG_ISSET_ID, value);
  }

  public double getLat() {
    return this.lat;
  }

  public SelectRecRequest setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
    return this;
  }

  public void unsetLat() {
    __isset_bit_vector.clear(__LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return __isset_bit_vector.get(__LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bit_vector.set(__LAT_ISSET_ID, value);
  }

  public double getPriceLow() {
    return this.priceLow;
  }

  public SelectRecRequest setPriceLow(double priceLow) {
    this.priceLow = priceLow;
    setPriceLowIsSet(true);
    return this;
  }

  public void unsetPriceLow() {
    __isset_bit_vector.clear(__PRICELOW_ISSET_ID);
  }

  /** Returns true if field priceLow is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceLow() {
    return __isset_bit_vector.get(__PRICELOW_ISSET_ID);
  }

  public void setPriceLowIsSet(boolean value) {
    __isset_bit_vector.set(__PRICELOW_ISSET_ID, value);
  }

  public double getPriceHigh() {
    return this.priceHigh;
  }

  public SelectRecRequest setPriceHigh(double priceHigh) {
    this.priceHigh = priceHigh;
    setPriceHighIsSet(true);
    return this;
  }

  public void unsetPriceHigh() {
    __isset_bit_vector.clear(__PRICEHIGH_ISSET_ID);
  }

  /** Returns true if field priceHigh is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceHigh() {
    return __isset_bit_vector.get(__PRICEHIGH_ISSET_ID);
  }

  public void setPriceHighIsSet(boolean value) {
    __isset_bit_vector.set(__PRICEHIGH_ISSET_ID, value);
  }

  public String getUuid() {
    return this.uuid;
  }

  public SelectRecRequest setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getSortingMethod() {
    return this.sortingMethod;
  }

  public SelectRecRequest setSortingMethod(String sortingMethod) {
    this.sortingMethod = sortingMethod;
    return this;
  }

  public void unsetSortingMethod() {
    this.sortingMethod = null;
  }

  /** Returns true if field sortingMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetSortingMethod() {
    return this.sortingMethod != null;
  }

  public void setSortingMethodIsSet(boolean value) {
    if (!value) {
      this.sortingMethod = null;
    }
  }

  public String getDateCheckin() {
    return this.dateCheckin;
  }

  public SelectRecRequest setDateCheckin(String dateCheckin) {
    this.dateCheckin = dateCheckin;
    return this;
  }

  public void unsetDateCheckin() {
    this.dateCheckin = null;
  }

  /** Returns true if field dateCheckin is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCheckin() {
    return this.dateCheckin != null;
  }

  public void setDateCheckinIsSet(boolean value) {
    if (!value) {
      this.dateCheckin = null;
    }
  }

  public String getDateChechout() {
    return this.dateChechout;
  }

  public SelectRecRequest setDateChechout(String dateChechout) {
    this.dateChechout = dateChechout;
    return this;
  }

  public void unsetDateChechout() {
    this.dateChechout = null;
  }

  /** Returns true if field dateChechout is set (has been assigned a value) and false otherwise */
  public boolean isSetDateChechout() {
    return this.dateChechout != null;
  }

  public void setDateChechoutIsSet(boolean value) {
    if (!value) {
      this.dateChechout = null;
    }
  }

  public String getClientType() {
    return this.clientType;
  }

  public SelectRecRequest setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public SelectRecRequest setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public int getLocationType() {
    return this.locationType;
  }

  public SelectRecRequest setLocationType(int locationType) {
    this.locationType = locationType;
    setLocationTypeIsSet(true);
    return this;
  }

  public void unsetLocationType() {
    __isset_bit_vector.clear(__LOCATIONTYPE_ISSET_ID);
  }

  /** Returns true if field locationType is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationType() {
    return __isset_bit_vector.get(__LOCATIONTYPE_ISSET_ID);
  }

  public void setLocationTypeIsSet(boolean value) {
    __isset_bit_vector.set(__LOCATIONTYPE_ISSET_ID, value);
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public SelectRecRequest setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public int getRoomTypeListSize() {
    return (this.roomTypeList == null) ? 0 : this.roomTypeList.size();
  }

  public java.util.Iterator<Integer> getRoomTypeListIterator() {
    return (this.roomTypeList == null) ? null : this.roomTypeList.iterator();
  }

  public void addToRoomTypeList(int elem) {
    if (this.roomTypeList == null) {
      this.roomTypeList = new ArrayList<Integer>();
    }
    this.roomTypeList.add(elem);
  }

  public List<Integer> getRoomTypeList() {
    return this.roomTypeList;
  }

  public SelectRecRequest setRoomTypeList(List<Integer> roomTypeList) {
    this.roomTypeList = roomTypeList;
    return this;
  }

  public void unsetRoomTypeList() {
    this.roomTypeList = null;
  }

  /** Returns true if field roomTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomTypeList() {
    return this.roomTypeList != null;
  }

  public void setRoomTypeListIsSet(boolean value) {
    if (!value) {
      this.roomTypeList = null;
    }
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public SelectRecRequest setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bit_vector.clear(__BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return __isset_bit_vector.get(__BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSTYPE_ISSET_ID, value);
  }

  public int getReceiptProvided() {
    return this.receiptProvided;
  }

  public SelectRecRequest setReceiptProvided(int receiptProvided) {
    this.receiptProvided = receiptProvided;
    setReceiptProvidedIsSet(true);
    return this;
  }

  public void unsetReceiptProvided() {
    __isset_bit_vector.clear(__RECEIPTPROVIDED_ISSET_ID);
  }

  /** Returns true if field receiptProvided is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiptProvided() {
    return __isset_bit_vector.get(__RECEIPTPROVIDED_ISSET_ID);
  }

  public void setReceiptProvidedIsSet(boolean value) {
    __isset_bit_vector.set(__RECEIPTPROVIDED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;

    case ROOM_TYPE:
      if (value == null) {
        unsetRoomType();
      } else {
        setRoomType((Integer)value);
      }
      break;

    case ACCOMMODATION_TYPE:
      if (value == null) {
        unsetAccommodationType();
      } else {
        setAccommodationType((Integer)value);
      }
      break;

    case HOTEL_TYPE:
      if (value == null) {
        unsetHotelType();
      } else {
        setHotelType((List<Integer>)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((List<Integer>)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((Double)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((Double)value);
      }
      break;

    case PRICE_LOW:
      if (value == null) {
        unsetPriceLow();
      } else {
        setPriceLow((Double)value);
      }
      break;

    case PRICE_HIGH:
      if (value == null) {
        unsetPriceHigh();
      } else {
        setPriceHigh((Double)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case SORTING_METHOD:
      if (value == null) {
        unsetSortingMethod();
      } else {
        setSortingMethod((String)value);
      }
      break;

    case DATE_CHECKIN:
      if (value == null) {
        unsetDateCheckin();
      } else {
        setDateCheckin((String)value);
      }
      break;

    case DATE_CHECHOUT:
      if (value == null) {
        unsetDateChechout();
      } else {
        setDateChechout((String)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case LOCATION_TYPE:
      if (value == null) {
        unsetLocationType();
      } else {
        setLocationType((Integer)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    case ROOM_TYPE_LIST:
      if (value == null) {
        unsetRoomTypeList();
      } else {
        setRoomTypeList((List<Integer>)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case RECEIPT_PROVIDED:
      if (value == null) {
        unsetReceiptProvided();
      } else {
        setReceiptProvided((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRATEGY:
      return getStrategy();

    case CITY_ID:
      return Integer.valueOf(getCityId());

    case ROOM_TYPE:
      return Integer.valueOf(getRoomType());

    case ACCOMMODATION_TYPE:
      return Integer.valueOf(getAccommodationType());

    case HOTEL_TYPE:
      return getHotelType();

    case BRAND_ID:
      return getBrandId();

    case LNG:
      return Double.valueOf(getLng());

    case LAT:
      return Double.valueOf(getLat());

    case PRICE_LOW:
      return Double.valueOf(getPriceLow());

    case PRICE_HIGH:
      return Double.valueOf(getPriceHigh());

    case UUID:
      return getUuid();

    case SORTING_METHOD:
      return getSortingMethod();

    case DATE_CHECKIN:
      return getDateCheckin();

    case DATE_CHECHOUT:
      return getDateChechout();

    case CLIENT_TYPE:
      return getClientType();

    case APP_VERSION:
      return getAppVersion();

    case LOCATION_TYPE:
      return Integer.valueOf(getLocationType());

    case EXTRA_MAP:
      return getExtraMap();

    case ROOM_TYPE_LIST:
      return getRoomTypeList();

    case BUSINESS_TYPE:
      return Integer.valueOf(getBusinessType());

    case RECEIPT_PROVIDED:
      return Integer.valueOf(getReceiptProvided());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRATEGY:
      return isSetStrategy();
    case CITY_ID:
      return isSetCityId();
    case ROOM_TYPE:
      return isSetRoomType();
    case ACCOMMODATION_TYPE:
      return isSetAccommodationType();
    case HOTEL_TYPE:
      return isSetHotelType();
    case BRAND_ID:
      return isSetBrandId();
    case LNG:
      return isSetLng();
    case LAT:
      return isSetLat();
    case PRICE_LOW:
      return isSetPriceLow();
    case PRICE_HIGH:
      return isSetPriceHigh();
    case UUID:
      return isSetUuid();
    case SORTING_METHOD:
      return isSetSortingMethod();
    case DATE_CHECKIN:
      return isSetDateCheckin();
    case DATE_CHECHOUT:
      return isSetDateChechout();
    case CLIENT_TYPE:
      return isSetClientType();
    case APP_VERSION:
      return isSetAppVersion();
    case LOCATION_TYPE:
      return isSetLocationType();
    case EXTRA_MAP:
      return isSetExtraMap();
    case ROOM_TYPE_LIST:
      return isSetRoomTypeList();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case RECEIPT_PROVIDED:
      return isSetReceiptProvided();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SelectRecRequest)
      return this.equals((SelectRecRequest)that);
    return false;
  }

  public boolean equals(SelectRecRequest that) {
    if (that == null)
      return false;

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }

    boolean this_present_roomType = true && this.isSetRoomType();
    boolean that_present_roomType = true && that.isSetRoomType();
    if (this_present_roomType || that_present_roomType) {
      if (!(this_present_roomType && that_present_roomType))
        return false;
      if (this.roomType != that.roomType)
        return false;
    }

    boolean this_present_accommodationType = true && this.isSetAccommodationType();
    boolean that_present_accommodationType = true && that.isSetAccommodationType();
    if (this_present_accommodationType || that_present_accommodationType) {
      if (!(this_present_accommodationType && that_present_accommodationType))
        return false;
      if (this.accommodationType != that.accommodationType)
        return false;
    }

    boolean this_present_hotelType = true && this.isSetHotelType();
    boolean that_present_hotelType = true && that.isSetHotelType();
    if (this_present_hotelType || that_present_hotelType) {
      if (!(this_present_hotelType && that_present_hotelType))
        return false;
      if (!this.hotelType.equals(that.hotelType))
        return false;
    }

    boolean this_present_brandId = true && this.isSetBrandId();
    boolean that_present_brandId = true && that.isSetBrandId();
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (!this.brandId.equals(that.brandId))
        return false;
    }

    boolean this_present_lng = true && this.isSetLng();
    boolean that_present_lng = true && that.isSetLng();
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (this.lng != that.lng)
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_priceLow = true && this.isSetPriceLow();
    boolean that_present_priceLow = true && that.isSetPriceLow();
    if (this_present_priceLow || that_present_priceLow) {
      if (!(this_present_priceLow && that_present_priceLow))
        return false;
      if (this.priceLow != that.priceLow)
        return false;
    }

    boolean this_present_priceHigh = true && this.isSetPriceHigh();
    boolean that_present_priceHigh = true && that.isSetPriceHigh();
    if (this_present_priceHigh || that_present_priceHigh) {
      if (!(this_present_priceHigh && that_present_priceHigh))
        return false;
      if (this.priceHigh != that.priceHigh)
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_sortingMethod = true && this.isSetSortingMethod();
    boolean that_present_sortingMethod = true && that.isSetSortingMethod();
    if (this_present_sortingMethod || that_present_sortingMethod) {
      if (!(this_present_sortingMethod && that_present_sortingMethod))
        return false;
      if (!this.sortingMethod.equals(that.sortingMethod))
        return false;
    }

    boolean this_present_dateCheckin = true && this.isSetDateCheckin();
    boolean that_present_dateCheckin = true && that.isSetDateCheckin();
    if (this_present_dateCheckin || that_present_dateCheckin) {
      if (!(this_present_dateCheckin && that_present_dateCheckin))
        return false;
      if (!this.dateCheckin.equals(that.dateCheckin))
        return false;
    }

    boolean this_present_dateChechout = true && this.isSetDateChechout();
    boolean that_present_dateChechout = true && that.isSetDateChechout();
    if (this_present_dateChechout || that_present_dateChechout) {
      if (!(this_present_dateChechout && that_present_dateChechout))
        return false;
      if (!this.dateChechout.equals(that.dateChechout))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_locationType = true && this.isSetLocationType();
    boolean that_present_locationType = true && that.isSetLocationType();
    if (this_present_locationType || that_present_locationType) {
      if (!(this_present_locationType && that_present_locationType))
        return false;
      if (this.locationType != that.locationType)
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    boolean this_present_roomTypeList = true && this.isSetRoomTypeList();
    boolean that_present_roomTypeList = true && that.isSetRoomTypeList();
    if (this_present_roomTypeList || that_present_roomTypeList) {
      if (!(this_present_roomTypeList && that_present_roomTypeList))
        return false;
      if (!this.roomTypeList.equals(that.roomTypeList))
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_receiptProvided = true && this.isSetReceiptProvided();
    boolean that_present_receiptProvided = true && that.isSetReceiptProvided();
    if (this_present_receiptProvided || that_present_receiptProvided) {
      if (!(this_present_receiptProvided && that_present_receiptProvided))
        return false;
      if (this.receiptProvided != that.receiptProvided)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SelectRecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SelectRecRequest typedOther = (SelectRecRequest)other;

    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(typedOther.isSetRoomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, typedOther.roomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccommodationType()).compareTo(typedOther.isSetAccommodationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccommodationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accommodationType, typedOther.accommodationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotelType()).compareTo(typedOther.isSetHotelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelType, typedOther.hotelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(typedOther.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandId, typedOther.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceLow()).compareTo(typedOther.isSetPriceLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceLow, typedOther.priceLow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceHigh()).compareTo(typedOther.isSetPriceHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceHigh, typedOther.priceHigh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortingMethod()).compareTo(typedOther.isSetSortingMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortingMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortingMethod, typedOther.sortingMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCheckin()).compareTo(typedOther.isSetDateCheckin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCheckin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCheckin, typedOther.dateCheckin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateChechout()).compareTo(typedOther.isSetDateChechout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateChechout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateChechout, typedOther.dateChechout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationType()).compareTo(typedOther.isSetLocationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationType, typedOther.locationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(typedOther.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, typedOther.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomTypeList()).compareTo(typedOther.isSetRoomTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomTypeList, typedOther.roomTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(typedOther.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, typedOther.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiptProvided()).compareTo(typedOther.isSetReceiptProvided());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiptProvided()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptProvided, typedOther.receiptProvided);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SelectRecRequest(");
    boolean first = true;

    if (isSetStrategy()) {
      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (isSetRoomType()) {
      if (!first) sb.append(", ");
      sb.append("roomType:");
      sb.append(this.roomType);
      first = false;
    }
    if (isSetAccommodationType()) {
      if (!first) sb.append(", ");
      sb.append("accommodationType:");
      sb.append(this.accommodationType);
      first = false;
    }
    if (isSetHotelType()) {
      if (!first) sb.append(", ");
      sb.append("hotelType:");
      if (this.hotelType == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelType);
      }
      first = false;
    }
    if (isSetBrandId()) {
      if (!first) sb.append(", ");
      sb.append("brandId:");
      if (this.brandId == null) {
        sb.append("null");
      } else {
        sb.append(this.brandId);
      }
      first = false;
    }
    if (isSetLng()) {
      if (!first) sb.append(", ");
      sb.append("lng:");
      sb.append(this.lng);
      first = false;
    }
    if (isSetLat()) {
      if (!first) sb.append(", ");
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
    }
    if (isSetPriceLow()) {
      if (!first) sb.append(", ");
      sb.append("priceLow:");
      sb.append(this.priceLow);
      first = false;
    }
    if (isSetPriceHigh()) {
      if (!first) sb.append(", ");
      sb.append("priceHigh:");
      sb.append(this.priceHigh);
      first = false;
    }
    if (isSetUuid()) {
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    if (isSetSortingMethod()) {
      if (!first) sb.append(", ");
      sb.append("sortingMethod:");
      if (this.sortingMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.sortingMethod);
      }
      first = false;
    }
    if (isSetDateCheckin()) {
      if (!first) sb.append(", ");
      sb.append("dateCheckin:");
      if (this.dateCheckin == null) {
        sb.append("null");
      } else {
        sb.append(this.dateCheckin);
      }
      first = false;
    }
    if (isSetDateChechout()) {
      if (!first) sb.append(", ");
      sb.append("dateChechout:");
      if (this.dateChechout == null) {
        sb.append("null");
      } else {
        sb.append(this.dateChechout);
      }
      first = false;
    }
    if (isSetClientType()) {
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetLocationType()) {
      if (!first) sb.append(", ");
      sb.append("locationType:");
      sb.append(this.locationType);
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    if (isSetRoomTypeList()) {
      if (!first) sb.append(", ");
      sb.append("roomTypeList:");
      if (this.roomTypeList == null) {
        sb.append("null");
      } else {
        sb.append(this.roomTypeList);
      }
      first = false;
    }
    if (isSetBusinessType()) {
      if (!first) sb.append(", ");
      sb.append("businessType:");
      sb.append(this.businessType);
      first = false;
    }
    if (isSetReceiptProvided()) {
      if (!first) sb.append(", ");
      sb.append("receiptProvided:");
      sb.append(this.receiptProvided);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SelectRecRequestStandardSchemeFactory implements SchemeFactory {
    public SelectRecRequestStandardScheme getScheme() {
      return new SelectRecRequestStandardScheme();
    }
  }

  private static class SelectRecRequestStandardScheme extends StandardScheme<SelectRecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SelectRecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityId = iprot.readI32();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomType = iprot.readI32();
              struct.setRoomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOMMODATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accommodationType = iprot.readI32();
              struct.setAccommodationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOTEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.hotelType = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.hotelType.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setHotelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.brandId = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5; // required
                  _elem5 = iprot.readI32();
                  struct.brandId.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setBrandIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lng = iprot.readDouble();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lat = iprot.readDouble();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRICE_LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceLow = iprot.readDouble();
              struct.setPriceLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRICE_HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceHigh = iprot.readDouble();
              struct.setPriceHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SORTING_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortingMethod = iprot.readString();
              struct.setSortingMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATE_CHECKIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateCheckin = iprot.readString();
              struct.setDateCheckinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATE_CHECHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateChechout = iprot.readString();
              struct.setDateChechoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOCATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationType = iprot.readI32();
              struct.setLocationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  String _key8; // required
                  String _val9; // required
                  _key8 = iprot.readString();
                  _val9 = iprot.readString();
                  struct.extraMap.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROOM_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.roomTypeList = new ArrayList<Integer>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  int _elem12; // required
                  _elem12 = iprot.readI32();
                  struct.roomTypeList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setRoomTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RECEIPT_PROVIDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiptProvided = iprot.readI32();
              struct.setReceiptProvidedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SelectRecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.strategy != null) {
        if (struct.isSetStrategy()) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
      oprot.writeI32(struct.cityId);
      oprot.writeFieldEnd();
      if (struct.isSetRoomType()) {
        oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.roomType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccommodationType()) {
        oprot.writeFieldBegin(ACCOMMODATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.accommodationType);
        oprot.writeFieldEnd();
      }
      if (struct.hotelType != null) {
        if (struct.isSetHotelType()) {
          oprot.writeFieldBegin(HOTEL_TYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.hotelType.size()));
            for (int _iter13 : struct.hotelType)
            {
              oprot.writeI32(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.brandId != null) {
        if (struct.isSetBrandId()) {
          oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brandId.size()));
            for (int _iter14 : struct.brandId)
            {
              oprot.writeI32(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLng()) {
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeDouble(struct.lng);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLat()) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceLow()) {
        oprot.writeFieldBegin(PRICE_LOW_FIELD_DESC);
        oprot.writeDouble(struct.priceLow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceHigh()) {
        oprot.writeFieldBegin(PRICE_HIGH_FIELD_DESC);
        oprot.writeDouble(struct.priceHigh);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        if (struct.isSetUuid()) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortingMethod != null) {
        if (struct.isSetSortingMethod()) {
          oprot.writeFieldBegin(SORTING_METHOD_FIELD_DESC);
          oprot.writeString(struct.sortingMethod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateCheckin != null) {
        if (struct.isSetDateCheckin()) {
          oprot.writeFieldBegin(DATE_CHECKIN_FIELD_DESC);
          oprot.writeString(struct.dateCheckin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateChechout != null) {
        if (struct.isSetDateChechout()) {
          oprot.writeFieldBegin(DATE_CHECHOUT_FIELD_DESC);
          oprot.writeString(struct.dateChechout);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientType != null) {
        if (struct.isSetClientType()) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLocationType()) {
        oprot.writeFieldBegin(LOCATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.locationType);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter15 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.roomTypeList != null) {
        if (struct.isSetRoomTypeList()) {
          oprot.writeFieldBegin(ROOM_TYPE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.roomTypeList.size()));
            for (int _iter16 : struct.roomTypeList)
            {
              oprot.writeI32(_iter16);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBusinessType()) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReceiptProvided()) {
        oprot.writeFieldBegin(RECEIPT_PROVIDED_FIELD_DESC);
        oprot.writeI32(struct.receiptProvided);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SelectRecRequestTupleSchemeFactory implements SchemeFactory {
    public SelectRecRequestTupleScheme getScheme() {
      return new SelectRecRequestTupleScheme();
    }
  }

  private static class SelectRecRequestTupleScheme extends TupleScheme<SelectRecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SelectRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStrategy()) {
        optionals.set(0);
      }
      if (struct.isSetCityId()) {
        optionals.set(1);
      }
      if (struct.isSetRoomType()) {
        optionals.set(2);
      }
      if (struct.isSetAccommodationType()) {
        optionals.set(3);
      }
      if (struct.isSetHotelType()) {
        optionals.set(4);
      }
      if (struct.isSetBrandId()) {
        optionals.set(5);
      }
      if (struct.isSetLng()) {
        optionals.set(6);
      }
      if (struct.isSetLat()) {
        optionals.set(7);
      }
      if (struct.isSetPriceLow()) {
        optionals.set(8);
      }
      if (struct.isSetPriceHigh()) {
        optionals.set(9);
      }
      if (struct.isSetUuid()) {
        optionals.set(10);
      }
      if (struct.isSetSortingMethod()) {
        optionals.set(11);
      }
      if (struct.isSetDateCheckin()) {
        optionals.set(12);
      }
      if (struct.isSetDateChechout()) {
        optionals.set(13);
      }
      if (struct.isSetClientType()) {
        optionals.set(14);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(15);
      }
      if (struct.isSetLocationType()) {
        optionals.set(16);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(17);
      }
      if (struct.isSetRoomTypeList()) {
        optionals.set(18);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(19);
      }
      if (struct.isSetReceiptProvided()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetCityId()) {
        oprot.writeI32(struct.cityId);
      }
      if (struct.isSetRoomType()) {
        oprot.writeI32(struct.roomType);
      }
      if (struct.isSetAccommodationType()) {
        oprot.writeI32(struct.accommodationType);
      }
      if (struct.isSetHotelType()) {
        {
          oprot.writeI32(struct.hotelType.size());
          for (int _iter17 : struct.hotelType)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetBrandId()) {
        {
          oprot.writeI32(struct.brandId.size());
          for (int _iter18 : struct.brandId)
          {
            oprot.writeI32(_iter18);
          }
        }
      }
      if (struct.isSetLng()) {
        oprot.writeDouble(struct.lng);
      }
      if (struct.isSetLat()) {
        oprot.writeDouble(struct.lat);
      }
      if (struct.isSetPriceLow()) {
        oprot.writeDouble(struct.priceLow);
      }
      if (struct.isSetPriceHigh()) {
        oprot.writeDouble(struct.priceHigh);
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetSortingMethod()) {
        oprot.writeString(struct.sortingMethod);
      }
      if (struct.isSetDateCheckin()) {
        oprot.writeString(struct.dateCheckin);
      }
      if (struct.isSetDateChechout()) {
        oprot.writeString(struct.dateChechout);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetLocationType()) {
        oprot.writeI32(struct.locationType);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter19 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
        }
      }
      if (struct.isSetRoomTypeList()) {
        {
          oprot.writeI32(struct.roomTypeList.size());
          for (int _iter20 : struct.roomTypeList)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetReceiptProvided()) {
        oprot.writeI32(struct.receiptProvided);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SelectRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cityId = iprot.readI32();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.roomType = iprot.readI32();
        struct.setRoomTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accommodationType = iprot.readI32();
        struct.setAccommodationTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.hotelType = new ArrayList<Integer>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            int _elem23; // required
            _elem23 = iprot.readI32();
            struct.hotelType.add(_elem23);
          }
        }
        struct.setHotelTypeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brandId = new ArrayList<Integer>(_list24.size);
          for (int _i25 = 0; _i25 < _list24.size; ++_i25)
          {
            int _elem26; // required
            _elem26 = iprot.readI32();
            struct.brandId.add(_elem26);
          }
        }
        struct.setBrandIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lng = iprot.readDouble();
        struct.setLngIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lat = iprot.readDouble();
        struct.setLatIsSet(true);
      }
      if (incoming.get(8)) {
        struct.priceLow = iprot.readDouble();
        struct.setPriceLowIsSet(true);
      }
      if (incoming.get(9)) {
        struct.priceHigh = iprot.readDouble();
        struct.setPriceHighIsSet(true);
      }
      if (incoming.get(10)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sortingMethod = iprot.readString();
        struct.setSortingMethodIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dateCheckin = iprot.readString();
        struct.setDateCheckinIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dateChechout = iprot.readString();
        struct.setDateChechoutIsSet(true);
      }
      if (incoming.get(14)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.locationType = iprot.readI32();
        struct.setLocationTypeIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map27.size);
          for (int _i28 = 0; _i28 < _map27.size; ++_i28)
          {
            String _key29; // required
            String _val30; // required
            _key29 = iprot.readString();
            _val30 = iprot.readString();
            struct.extraMap.put(_key29, _val30);
          }
        }
        struct.setExtraMapIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.roomTypeList = new ArrayList<Integer>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            int _elem33; // required
            _elem33 = iprot.readI32();
            struct.roomTypeList.add(_elem33);
          }
        }
        struct.setRoomTypeListIsSet(true);
      }
      if (incoming.get(19)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.receiptProvided = iprot.readI32();
        struct.setReceiptProvidedIsSet(true);
      }
    }
  }

}

