/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.search.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RerankStidInfo implements org.apache.thrift.TBase<RerankStidInfo, RerankStidInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RerankStidInfo");

  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ALG_FIELD_DESC = new org.apache.thrift.protocol.TField("alg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SMZ001_FIELD_DESC = new org.apache.thrift.protocol.TField("smz001", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KV_FIELD_DESC = new org.apache.thrift.protocol.TField("kv", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RerankStidInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RerankStidInfoTupleSchemeFactory());
  }

  public String strategy; // required
  public String alg; // optional
  public String smz001; // optional
  public Map<String,String> kv; // optional
  public Map<String,String> ext; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRATEGY((short)1, "strategy"),
    ALG((short)2, "alg"),
    SMZ001((short)3, "smz001"),
    KV((short)4, "kv"),
    EXT((short)5, "ext");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRATEGY
          return STRATEGY;
        case 2: // ALG
          return ALG;
        case 3: // SMZ001
          return SMZ001;
        case 4: // KV
          return KV;
        case 5: // EXT
          return EXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ALG,_Fields.SMZ001,_Fields.KV,_Fields.EXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALG, new org.apache.thrift.meta_data.FieldMetaData("alg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMZ001, new org.apache.thrift.meta_data.FieldMetaData("smz001", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KV, new org.apache.thrift.meta_data.FieldMetaData("kv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RerankStidInfo.class, metaDataMap);
  }

  public RerankStidInfo() {
  }

  public RerankStidInfo(
    String strategy)
  {
    this();
    this.strategy = strategy;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RerankStidInfo(RerankStidInfo other) {
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    if (other.isSetAlg()) {
      this.alg = other.alg;
    }
    if (other.isSetSmz001()) {
      this.smz001 = other.smz001;
    }
    if (other.isSetKv()) {
      Map<String,String> __this__kv = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.kv.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__kv_copy_key = other_element_key;

        String __this__kv_copy_value = other_element_value;

        __this__kv.put(__this__kv_copy_key, __this__kv_copy_value);
      }
      this.kv = __this__kv;
    }
    if (other.isSetExt()) {
      Map<String,String> __this__ext = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.ext.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__ext_copy_key = other_element_key;

        String __this__ext_copy_value = other_element_value;

        __this__ext.put(__this__ext_copy_key, __this__ext_copy_value);
      }
      this.ext = __this__ext;
    }
  }

  public RerankStidInfo deepCopy() {
    return new RerankStidInfo(this);
  }

  @Override
  public void clear() {
    this.strategy = null;
    this.alg = null;
    this.smz001 = null;
    this.kv = null;
    this.ext = null;
  }

  public String getStrategy() {
    return this.strategy;
  }

  public RerankStidInfo setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public String getAlg() {
    return this.alg;
  }

  public RerankStidInfo setAlg(String alg) {
    this.alg = alg;
    return this;
  }

  public void unsetAlg() {
    this.alg = null;
  }

  /** Returns true if field alg is set (has been assigned a value) and false otherwise */
  public boolean isSetAlg() {
    return this.alg != null;
  }

  public void setAlgIsSet(boolean value) {
    if (!value) {
      this.alg = null;
    }
  }

  public String getSmz001() {
    return this.smz001;
  }

  public RerankStidInfo setSmz001(String smz001) {
    this.smz001 = smz001;
    return this;
  }

  public void unsetSmz001() {
    this.smz001 = null;
  }

  /** Returns true if field smz001 is set (has been assigned a value) and false otherwise */
  public boolean isSetSmz001() {
    return this.smz001 != null;
  }

  public void setSmz001IsSet(boolean value) {
    if (!value) {
      this.smz001 = null;
    }
  }

  public int getKvSize() {
    return (this.kv == null) ? 0 : this.kv.size();
  }

  public void putToKv(String key, String val) {
    if (this.kv == null) {
      this.kv = new HashMap<String,String>();
    }
    this.kv.put(key, val);
  }

  public Map<String,String> getKv() {
    return this.kv;
  }

  public RerankStidInfo setKv(Map<String,String> kv) {
    this.kv = kv;
    return this;
  }

  public void unsetKv() {
    this.kv = null;
  }

  /** Returns true if field kv is set (has been assigned a value) and false otherwise */
  public boolean isSetKv() {
    return this.kv != null;
  }

  public void setKvIsSet(boolean value) {
    if (!value) {
      this.kv = null;
    }
  }

  public int getExtSize() {
    return (this.ext == null) ? 0 : this.ext.size();
  }

  public void putToExt(String key, String val) {
    if (this.ext == null) {
      this.ext = new HashMap<String,String>();
    }
    this.ext.put(key, val);
  }

  public Map<String,String> getExt() {
    return this.ext;
  }

  public RerankStidInfo setExt(Map<String,String> ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case ALG:
      if (value == null) {
        unsetAlg();
      } else {
        setAlg((String)value);
      }
      break;

    case SMZ001:
      if (value == null) {
        unsetSmz001();
      } else {
        setSmz001((String)value);
      }
      break;

    case KV:
      if (value == null) {
        unsetKv();
      } else {
        setKv((Map<String,String>)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRATEGY:
      return getStrategy();

    case ALG:
      return getAlg();

    case SMZ001:
      return getSmz001();

    case KV:
      return getKv();

    case EXT:
      return getExt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRATEGY:
      return isSetStrategy();
    case ALG:
      return isSetAlg();
    case SMZ001:
      return isSetSmz001();
    case KV:
      return isSetKv();
    case EXT:
      return isSetExt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RerankStidInfo)
      return this.equals((RerankStidInfo)that);
    return false;
  }

  public boolean equals(RerankStidInfo that) {
    if (that == null)
      return false;

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_alg = true && this.isSetAlg();
    boolean that_present_alg = true && that.isSetAlg();
    if (this_present_alg || that_present_alg) {
      if (!(this_present_alg && that_present_alg))
        return false;
      if (!this.alg.equals(that.alg))
        return false;
    }

    boolean this_present_smz001 = true && this.isSetSmz001();
    boolean that_present_smz001 = true && that.isSetSmz001();
    if (this_present_smz001 || that_present_smz001) {
      if (!(this_present_smz001 && that_present_smz001))
        return false;
      if (!this.smz001.equals(that.smz001))
        return false;
    }

    boolean this_present_kv = true && this.isSetKv();
    boolean that_present_kv = true && that.isSetKv();
    if (this_present_kv || that_present_kv) {
      if (!(this_present_kv && that_present_kv))
        return false;
      if (!this.kv.equals(that.kv))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RerankStidInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RerankStidInfo typedOther = (RerankStidInfo)other;

    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlg()).compareTo(typedOther.isSetAlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alg, typedOther.alg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmz001()).compareTo(typedOther.isSetSmz001());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmz001()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smz001, typedOther.smz001);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKv()).compareTo(typedOther.isSetKv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kv, typedOther.kv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(typedOther.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, typedOther.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RerankStidInfo(");
    boolean first = true;

    sb.append("strategy:");
    if (this.strategy == null) {
      sb.append("null");
    } else {
      sb.append(this.strategy);
    }
    first = false;
    if (isSetAlg()) {
      if (!first) sb.append(", ");
      sb.append("alg:");
      if (this.alg == null) {
        sb.append("null");
      } else {
        sb.append(this.alg);
      }
      first = false;
    }
    if (isSetSmz001()) {
      if (!first) sb.append(", ");
      sb.append("smz001:");
      if (this.smz001 == null) {
        sb.append("null");
      } else {
        sb.append(this.smz001);
      }
      first = false;
    }
    if (isSetKv()) {
      if (!first) sb.append(", ");
      sb.append("kv:");
      if (this.kv == null) {
        sb.append("null");
      } else {
        sb.append(this.kv);
      }
      first = false;
    }
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (strategy == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategy' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RerankStidInfoStandardSchemeFactory implements SchemeFactory {
    public RerankStidInfoStandardScheme getScheme() {
      return new RerankStidInfoStandardScheme();
    }
  }

  private static class RerankStidInfoStandardScheme extends StandardScheme<RerankStidInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RerankStidInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alg = iprot.readString();
              struct.setAlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SMZ001
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smz001 = iprot.readString();
              struct.setSmz001IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KV
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.kv = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.kv.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setKvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.ext = new HashMap<String,String>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6; // required
                  String _val7; // required
                  _key6 = iprot.readString();
                  _val7 = iprot.readString();
                  struct.ext.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RerankStidInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.strategy != null) {
        oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
        oprot.writeString(struct.strategy);
        oprot.writeFieldEnd();
      }
      if (struct.alg != null) {
        if (struct.isSetAlg()) {
          oprot.writeFieldBegin(ALG_FIELD_DESC);
          oprot.writeString(struct.alg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.smz001 != null) {
        if (struct.isSetSmz001()) {
          oprot.writeFieldBegin(SMZ001_FIELD_DESC);
          oprot.writeString(struct.smz001);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kv != null) {
        if (struct.isSetKv()) {
          oprot.writeFieldBegin(KV_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.kv.size()));
            for (Map.Entry<String, String> _iter8 : struct.kv.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.ext.size()));
            for (Map.Entry<String, String> _iter9 : struct.ext.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              oprot.writeString(_iter9.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RerankStidInfoTupleSchemeFactory implements SchemeFactory {
    public RerankStidInfoTupleScheme getScheme() {
      return new RerankStidInfoTupleScheme();
    }
  }

  private static class RerankStidInfoTupleScheme extends TupleScheme<RerankStidInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RerankStidInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.strategy);
      BitSet optionals = new BitSet();
      if (struct.isSetAlg()) {
        optionals.set(0);
      }
      if (struct.isSetSmz001()) {
        optionals.set(1);
      }
      if (struct.isSetKv()) {
        optionals.set(2);
      }
      if (struct.isSetExt()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAlg()) {
        oprot.writeString(struct.alg);
      }
      if (struct.isSetSmz001()) {
        oprot.writeString(struct.smz001);
      }
      if (struct.isSetKv()) {
        {
          oprot.writeI32(struct.kv.size());
          for (Map.Entry<String, String> _iter10 : struct.kv.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetExt()) {
        {
          oprot.writeI32(struct.ext.size());
          for (Map.Entry<String, String> _iter11 : struct.ext.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RerankStidInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.strategy = iprot.readString();
      struct.setStrategyIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.alg = iprot.readString();
        struct.setAlgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.smz001 = iprot.readString();
        struct.setSmz001IsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.kv = new HashMap<String,String>(2*_map12.size);
          for (int _i13 = 0; _i13 < _map12.size; ++_i13)
          {
            String _key14; // required
            String _val15; // required
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            struct.kv.put(_key14, _val15);
          }
        }
        struct.setKvIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ext = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18; // required
            String _val19; // required
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.ext.put(_key18, _val19);
          }
        }
        struct.setExtIsSet(true);
      }
    }
  }

}

