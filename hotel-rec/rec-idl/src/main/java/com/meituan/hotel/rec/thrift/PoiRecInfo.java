/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PoiRecInfo implements org.apache.thrift.TBase<PoiRecInfo, PoiRecInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PoiRecInfo");

  private static final org.apache.thrift.protocol.TField POI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poiId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dealList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField GOOD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("goodList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CT_POI_FIELD_DESC = new org.apache.thrift.protocol.TField("ct_poi", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("st_id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DISTANCE_TO_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceToUser", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DISTANCE_TO_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceToRequest", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField POI_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("poiLocation", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraDataMap", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PoiRecInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PoiRecInfoTupleSchemeFactory());
  }

  public int poiId; // required
  public List<DealRecInfo> dealList; // optional
  public List<DealRecInfo> goodList; // optional
  public String ct_poi; // optional
  public String st_id; // optional
  public double distanceToUser; // optional
  public double distanceToRequest; // optional
  public Location poiLocation; // optional
  public Map<String,String> extraDataMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POI_ID((short)1, "poiId"),
    DEAL_LIST((short)2, "dealList"),
    GOOD_LIST((short)3, "goodList"),
    CT_POI((short)4, "ct_poi"),
    ST_ID((short)5, "st_id"),
    DISTANCE_TO_USER((short)6, "distanceToUser"),
    DISTANCE_TO_REQUEST((short)7, "distanceToRequest"),
    POI_LOCATION((short)8, "poiLocation"),
    EXTRA_DATA_MAP((short)9, "extraDataMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POI_ID
          return POI_ID;
        case 2: // DEAL_LIST
          return DEAL_LIST;
        case 3: // GOOD_LIST
          return GOOD_LIST;
        case 4: // CT_POI
          return CT_POI;
        case 5: // ST_ID
          return ST_ID;
        case 6: // DISTANCE_TO_USER
          return DISTANCE_TO_USER;
        case 7: // DISTANCE_TO_REQUEST
          return DISTANCE_TO_REQUEST;
        case 8: // POI_LOCATION
          return POI_LOCATION;
        case 9: // EXTRA_DATA_MAP
          return EXTRA_DATA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POIID_ISSET_ID = 0;
  private static final int __DISTANCETOUSER_ISSET_ID = 1;
  private static final int __DISTANCETOREQUEST_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.DEAL_LIST,_Fields.GOOD_LIST,_Fields.CT_POI,_Fields.ST_ID,_Fields.DISTANCE_TO_USER,_Fields.DISTANCE_TO_REQUEST,_Fields.POI_LOCATION,_Fields.EXTRA_DATA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POI_ID, new org.apache.thrift.meta_data.FieldMetaData("poiId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("dealList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DealRecInfo.class))));
    tmpMap.put(_Fields.GOOD_LIST, new org.apache.thrift.meta_data.FieldMetaData("goodList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DealRecInfo.class))));
    tmpMap.put(_Fields.CT_POI, new org.apache.thrift.meta_data.FieldMetaData("ct_poi", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ST_ID, new org.apache.thrift.meta_data.FieldMetaData("st_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE_TO_USER, new org.apache.thrift.meta_data.FieldMetaData("distanceToUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISTANCE_TO_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("distanceToRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POI_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("poiLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.EXTRA_DATA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraDataMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PoiRecInfo.class, metaDataMap);
  }

  public PoiRecInfo() {
    this.ct_poi = "";

    this.st_id = "";

    this.distanceToUser = -1;

    this.distanceToRequest = -1;

  }

  public PoiRecInfo(
    int poiId)
  {
    this();
    this.poiId = poiId;
    setPoiIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PoiRecInfo(PoiRecInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.poiId = other.poiId;
    if (other.isSetDealList()) {
      List<DealRecInfo> __this__dealList = new ArrayList<DealRecInfo>();
      for (DealRecInfo other_element : other.dealList) {
        __this__dealList.add(new DealRecInfo(other_element));
      }
      this.dealList = __this__dealList;
    }
    if (other.isSetGoodList()) {
      List<DealRecInfo> __this__goodList = new ArrayList<DealRecInfo>();
      for (DealRecInfo other_element : other.goodList) {
        __this__goodList.add(new DealRecInfo(other_element));
      }
      this.goodList = __this__goodList;
    }
    if (other.isSetCt_poi()) {
      this.ct_poi = other.ct_poi;
    }
    if (other.isSetSt_id()) {
      this.st_id = other.st_id;
    }
    this.distanceToUser = other.distanceToUser;
    this.distanceToRequest = other.distanceToRequest;
    if (other.isSetPoiLocation()) {
      this.poiLocation = new Location(other.poiLocation);
    }
    if (other.isSetExtraDataMap()) {
      Map<String,String> __this__extraDataMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraDataMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraDataMap_copy_key = other_element_key;

        String __this__extraDataMap_copy_value = other_element_value;

        __this__extraDataMap.put(__this__extraDataMap_copy_key, __this__extraDataMap_copy_value);
      }
      this.extraDataMap = __this__extraDataMap;
    }
  }

  public PoiRecInfo deepCopy() {
    return new PoiRecInfo(this);
  }

  @Override
  public void clear() {
    setPoiIdIsSet(false);
    this.poiId = 0;
    this.dealList = null;
    this.goodList = null;
    this.ct_poi = "";

    this.st_id = "";

    this.distanceToUser = -1;

    this.distanceToRequest = -1;

    this.poiLocation = null;
    this.extraDataMap = null;
  }

  public int getPoiId() {
    return this.poiId;
  }

  public PoiRecInfo setPoiId(int poiId) {
    this.poiId = poiId;
    setPoiIdIsSet(true);
    return this;
  }

  public void unsetPoiId() {
    __isset_bit_vector.clear(__POIID_ISSET_ID);
  }

  /** Returns true if field poiId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiId() {
    return __isset_bit_vector.get(__POIID_ISSET_ID);
  }

  public void setPoiIdIsSet(boolean value) {
    __isset_bit_vector.set(__POIID_ISSET_ID, value);
  }

  public int getDealListSize() {
    return (this.dealList == null) ? 0 : this.dealList.size();
  }

  public java.util.Iterator<DealRecInfo> getDealListIterator() {
    return (this.dealList == null) ? null : this.dealList.iterator();
  }

  public void addToDealList(DealRecInfo elem) {
    if (this.dealList == null) {
      this.dealList = new ArrayList<DealRecInfo>();
    }
    this.dealList.add(elem);
  }

  public List<DealRecInfo> getDealList() {
    return this.dealList;
  }

  public PoiRecInfo setDealList(List<DealRecInfo> dealList) {
    this.dealList = dealList;
    return this;
  }

  public void unsetDealList() {
    this.dealList = null;
  }

  /** Returns true if field dealList is set (has been assigned a value) and false otherwise */
  public boolean isSetDealList() {
    return this.dealList != null;
  }

  public void setDealListIsSet(boolean value) {
    if (!value) {
      this.dealList = null;
    }
  }

  public int getGoodListSize() {
    return (this.goodList == null) ? 0 : this.goodList.size();
  }

  public java.util.Iterator<DealRecInfo> getGoodListIterator() {
    return (this.goodList == null) ? null : this.goodList.iterator();
  }

  public void addToGoodList(DealRecInfo elem) {
    if (this.goodList == null) {
      this.goodList = new ArrayList<DealRecInfo>();
    }
    this.goodList.add(elem);
  }

  public List<DealRecInfo> getGoodList() {
    return this.goodList;
  }

  public PoiRecInfo setGoodList(List<DealRecInfo> goodList) {
    this.goodList = goodList;
    return this;
  }

  public void unsetGoodList() {
    this.goodList = null;
  }

  /** Returns true if field goodList is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodList() {
    return this.goodList != null;
  }

  public void setGoodListIsSet(boolean value) {
    if (!value) {
      this.goodList = null;
    }
  }

  public String getCt_poi() {
    return this.ct_poi;
  }

  public PoiRecInfo setCt_poi(String ct_poi) {
    this.ct_poi = ct_poi;
    return this;
  }

  public void unsetCt_poi() {
    this.ct_poi = null;
  }

  /** Returns true if field ct_poi is set (has been assigned a value) and false otherwise */
  public boolean isSetCt_poi() {
    return this.ct_poi != null;
  }

  public void setCt_poiIsSet(boolean value) {
    if (!value) {
      this.ct_poi = null;
    }
  }

  public String getSt_id() {
    return this.st_id;
  }

  public PoiRecInfo setSt_id(String st_id) {
    this.st_id = st_id;
    return this;
  }

  public void unsetSt_id() {
    this.st_id = null;
  }

  /** Returns true if field st_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSt_id() {
    return this.st_id != null;
  }

  public void setSt_idIsSet(boolean value) {
    if (!value) {
      this.st_id = null;
    }
  }

  public double getDistanceToUser() {
    return this.distanceToUser;
  }

  public PoiRecInfo setDistanceToUser(double distanceToUser) {
    this.distanceToUser = distanceToUser;
    setDistanceToUserIsSet(true);
    return this;
  }

  public void unsetDistanceToUser() {
    __isset_bit_vector.clear(__DISTANCETOUSER_ISSET_ID);
  }

  /** Returns true if field distanceToUser is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceToUser() {
    return __isset_bit_vector.get(__DISTANCETOUSER_ISSET_ID);
  }

  public void setDistanceToUserIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETOUSER_ISSET_ID, value);
  }

  public double getDistanceToRequest() {
    return this.distanceToRequest;
  }

  public PoiRecInfo setDistanceToRequest(double distanceToRequest) {
    this.distanceToRequest = distanceToRequest;
    setDistanceToRequestIsSet(true);
    return this;
  }

  public void unsetDistanceToRequest() {
    __isset_bit_vector.clear(__DISTANCETOREQUEST_ISSET_ID);
  }

  /** Returns true if field distanceToRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceToRequest() {
    return __isset_bit_vector.get(__DISTANCETOREQUEST_ISSET_ID);
  }

  public void setDistanceToRequestIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETOREQUEST_ISSET_ID, value);
  }

  public Location getPoiLocation() {
    return this.poiLocation;
  }

  public PoiRecInfo setPoiLocation(Location poiLocation) {
    this.poiLocation = poiLocation;
    return this;
  }

  public void unsetPoiLocation() {
    this.poiLocation = null;
  }

  /** Returns true if field poiLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiLocation() {
    return this.poiLocation != null;
  }

  public void setPoiLocationIsSet(boolean value) {
    if (!value) {
      this.poiLocation = null;
    }
  }

  public int getExtraDataMapSize() {
    return (this.extraDataMap == null) ? 0 : this.extraDataMap.size();
  }

  public void putToExtraDataMap(String key, String val) {
    if (this.extraDataMap == null) {
      this.extraDataMap = new HashMap<String,String>();
    }
    this.extraDataMap.put(key, val);
  }

  public Map<String,String> getExtraDataMap() {
    return this.extraDataMap;
  }

  public PoiRecInfo setExtraDataMap(Map<String,String> extraDataMap) {
    this.extraDataMap = extraDataMap;
    return this;
  }

  public void unsetExtraDataMap() {
    this.extraDataMap = null;
  }

  /** Returns true if field extraDataMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraDataMap() {
    return this.extraDataMap != null;
  }

  public void setExtraDataMapIsSet(boolean value) {
    if (!value) {
      this.extraDataMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POI_ID:
      if (value == null) {
        unsetPoiId();
      } else {
        setPoiId((Integer)value);
      }
      break;

    case DEAL_LIST:
      if (value == null) {
        unsetDealList();
      } else {
        setDealList((List<DealRecInfo>)value);
      }
      break;

    case GOOD_LIST:
      if (value == null) {
        unsetGoodList();
      } else {
        setGoodList((List<DealRecInfo>)value);
      }
      break;

    case CT_POI:
      if (value == null) {
        unsetCt_poi();
      } else {
        setCt_poi((String)value);
      }
      break;

    case ST_ID:
      if (value == null) {
        unsetSt_id();
      } else {
        setSt_id((String)value);
      }
      break;

    case DISTANCE_TO_USER:
      if (value == null) {
        unsetDistanceToUser();
      } else {
        setDistanceToUser((Double)value);
      }
      break;

    case DISTANCE_TO_REQUEST:
      if (value == null) {
        unsetDistanceToRequest();
      } else {
        setDistanceToRequest((Double)value);
      }
      break;

    case POI_LOCATION:
      if (value == null) {
        unsetPoiLocation();
      } else {
        setPoiLocation((Location)value);
      }
      break;

    case EXTRA_DATA_MAP:
      if (value == null) {
        unsetExtraDataMap();
      } else {
        setExtraDataMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POI_ID:
      return Integer.valueOf(getPoiId());

    case DEAL_LIST:
      return getDealList();

    case GOOD_LIST:
      return getGoodList();

    case CT_POI:
      return getCt_poi();

    case ST_ID:
      return getSt_id();

    case DISTANCE_TO_USER:
      return Double.valueOf(getDistanceToUser());

    case DISTANCE_TO_REQUEST:
      return Double.valueOf(getDistanceToRequest());

    case POI_LOCATION:
      return getPoiLocation();

    case EXTRA_DATA_MAP:
      return getExtraDataMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POI_ID:
      return isSetPoiId();
    case DEAL_LIST:
      return isSetDealList();
    case GOOD_LIST:
      return isSetGoodList();
    case CT_POI:
      return isSetCt_poi();
    case ST_ID:
      return isSetSt_id();
    case DISTANCE_TO_USER:
      return isSetDistanceToUser();
    case DISTANCE_TO_REQUEST:
      return isSetDistanceToRequest();
    case POI_LOCATION:
      return isSetPoiLocation();
    case EXTRA_DATA_MAP:
      return isSetExtraDataMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PoiRecInfo)
      return this.equals((PoiRecInfo)that);
    return false;
  }

  public boolean equals(PoiRecInfo that) {
    if (that == null)
      return false;

    boolean this_present_poiId = true;
    boolean that_present_poiId = true;
    if (this_present_poiId || that_present_poiId) {
      if (!(this_present_poiId && that_present_poiId))
        return false;
      if (this.poiId != that.poiId)
        return false;
    }

    boolean this_present_dealList = true && this.isSetDealList();
    boolean that_present_dealList = true && that.isSetDealList();
    if (this_present_dealList || that_present_dealList) {
      if (!(this_present_dealList && that_present_dealList))
        return false;
      if (!this.dealList.equals(that.dealList))
        return false;
    }

    boolean this_present_goodList = true && this.isSetGoodList();
    boolean that_present_goodList = true && that.isSetGoodList();
    if (this_present_goodList || that_present_goodList) {
      if (!(this_present_goodList && that_present_goodList))
        return false;
      if (!this.goodList.equals(that.goodList))
        return false;
    }

    boolean this_present_ct_poi = true && this.isSetCt_poi();
    boolean that_present_ct_poi = true && that.isSetCt_poi();
    if (this_present_ct_poi || that_present_ct_poi) {
      if (!(this_present_ct_poi && that_present_ct_poi))
        return false;
      if (!this.ct_poi.equals(that.ct_poi))
        return false;
    }

    boolean this_present_st_id = true && this.isSetSt_id();
    boolean that_present_st_id = true && that.isSetSt_id();
    if (this_present_st_id || that_present_st_id) {
      if (!(this_present_st_id && that_present_st_id))
        return false;
      if (!this.st_id.equals(that.st_id))
        return false;
    }

    boolean this_present_distanceToUser = true && this.isSetDistanceToUser();
    boolean that_present_distanceToUser = true && that.isSetDistanceToUser();
    if (this_present_distanceToUser || that_present_distanceToUser) {
      if (!(this_present_distanceToUser && that_present_distanceToUser))
        return false;
      if (this.distanceToUser != that.distanceToUser)
        return false;
    }

    boolean this_present_distanceToRequest = true && this.isSetDistanceToRequest();
    boolean that_present_distanceToRequest = true && that.isSetDistanceToRequest();
    if (this_present_distanceToRequest || that_present_distanceToRequest) {
      if (!(this_present_distanceToRequest && that_present_distanceToRequest))
        return false;
      if (this.distanceToRequest != that.distanceToRequest)
        return false;
    }

    boolean this_present_poiLocation = true && this.isSetPoiLocation();
    boolean that_present_poiLocation = true && that.isSetPoiLocation();
    if (this_present_poiLocation || that_present_poiLocation) {
      if (!(this_present_poiLocation && that_present_poiLocation))
        return false;
      if (!this.poiLocation.equals(that.poiLocation))
        return false;
    }

    boolean this_present_extraDataMap = true && this.isSetExtraDataMap();
    boolean that_present_extraDataMap = true && that.isSetExtraDataMap();
    if (this_present_extraDataMap || that_present_extraDataMap) {
      if (!(this_present_extraDataMap && that_present_extraDataMap))
        return false;
      if (!this.extraDataMap.equals(that.extraDataMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PoiRecInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PoiRecInfo typedOther = (PoiRecInfo)other;

    lastComparison = Boolean.valueOf(isSetPoiId()).compareTo(typedOther.isSetPoiId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiId, typedOther.poiId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealList()).compareTo(typedOther.isSetDealList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealList, typedOther.dealList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodList()).compareTo(typedOther.isSetGoodList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodList, typedOther.goodList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCt_poi()).compareTo(typedOther.isSetCt_poi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCt_poi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ct_poi, typedOther.ct_poi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSt_id()).compareTo(typedOther.isSetSt_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSt_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.st_id, typedOther.st_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceToUser()).compareTo(typedOther.isSetDistanceToUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceToUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceToUser, typedOther.distanceToUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceToRequest()).compareTo(typedOther.isSetDistanceToRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceToRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceToRequest, typedOther.distanceToRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoiLocation()).compareTo(typedOther.isSetPoiLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiLocation, typedOther.poiLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraDataMap()).compareTo(typedOther.isSetExtraDataMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraDataMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraDataMap, typedOther.extraDataMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PoiRecInfo(");
    boolean first = true;

    sb.append("poiId:");
    sb.append(this.poiId);
    first = false;
    if (isSetDealList()) {
      if (!first) sb.append(", ");
      sb.append("dealList:");
      if (this.dealList == null) {
        sb.append("null");
      } else {
        sb.append(this.dealList);
      }
      first = false;
    }
    if (isSetGoodList()) {
      if (!first) sb.append(", ");
      sb.append("goodList:");
      if (this.goodList == null) {
        sb.append("null");
      } else {
        sb.append(this.goodList);
      }
      first = false;
    }
    if (isSetCt_poi()) {
      if (!first) sb.append(", ");
      sb.append("ct_poi:");
      if (this.ct_poi == null) {
        sb.append("null");
      } else {
        sb.append(this.ct_poi);
      }
      first = false;
    }
    if (isSetSt_id()) {
      if (!first) sb.append(", ");
      sb.append("st_id:");
      if (this.st_id == null) {
        sb.append("null");
      } else {
        sb.append(this.st_id);
      }
      first = false;
    }
    if (isSetDistanceToUser()) {
      if (!first) sb.append(", ");
      sb.append("distanceToUser:");
      sb.append(this.distanceToUser);
      first = false;
    }
    if (isSetDistanceToRequest()) {
      if (!first) sb.append(", ");
      sb.append("distanceToRequest:");
      sb.append(this.distanceToRequest);
      first = false;
    }
    if (isSetPoiLocation()) {
      if (!first) sb.append(", ");
      sb.append("poiLocation:");
      if (this.poiLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.poiLocation);
      }
      first = false;
    }
    if (isSetExtraDataMap()) {
      if (!first) sb.append(", ");
      sb.append("extraDataMap:");
      if (this.extraDataMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraDataMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'poiId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PoiRecInfoStandardSchemeFactory implements SchemeFactory {
    public PoiRecInfoStandardScheme getScheme() {
      return new PoiRecInfoStandardScheme();
    }
  }

  private static class PoiRecInfoStandardScheme extends StandardScheme<PoiRecInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PoiRecInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poiId = iprot.readI32();
              struct.setPoiIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.dealList = new ArrayList<DealRecInfo>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  DealRecInfo _elem12; // required
                  _elem12 = new DealRecInfo();
                  _elem12.read(iprot);
                  struct.dealList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setDealListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GOOD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.goodList = new ArrayList<DealRecInfo>(_list13.size);
                for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                {
                  DealRecInfo _elem15; // required
                  _elem15 = new DealRecInfo();
                  _elem15.read(iprot);
                  struct.goodList.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setGoodListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CT_POI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ct_poi = iprot.readString();
              struct.setCt_poiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.st_id = iprot.readString();
              struct.setSt_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISTANCE_TO_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceToUser = iprot.readDouble();
              struct.setDistanceToUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISTANCE_TO_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceToRequest = iprot.readDouble();
              struct.setDistanceToRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POI_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.poiLocation = new Location();
              struct.poiLocation.read(iprot);
              struct.setPoiLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA_DATA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.extraDataMap = new HashMap<String,String>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  String _key18; // required
                  String _val19; // required
                  _key18 = iprot.readString();
                  _val19 = iprot.readString();
                  struct.extraDataMap.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setExtraDataMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPoiId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'poiId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PoiRecInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POI_ID_FIELD_DESC);
      oprot.writeI32(struct.poiId);
      oprot.writeFieldEnd();
      if (struct.dealList != null) {
        if (struct.isSetDealList()) {
          oprot.writeFieldBegin(DEAL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dealList.size()));
            for (DealRecInfo _iter20 : struct.dealList)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.goodList != null) {
        if (struct.isSetGoodList()) {
          oprot.writeFieldBegin(GOOD_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.goodList.size()));
            for (DealRecInfo _iter21 : struct.goodList)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ct_poi != null) {
        if (struct.isSetCt_poi()) {
          oprot.writeFieldBegin(CT_POI_FIELD_DESC);
          oprot.writeString(struct.ct_poi);
          oprot.writeFieldEnd();
        }
      }
      if (struct.st_id != null) {
        if (struct.isSetSt_id()) {
          oprot.writeFieldBegin(ST_ID_FIELD_DESC);
          oprot.writeString(struct.st_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistanceToUser()) {
        oprot.writeFieldBegin(DISTANCE_TO_USER_FIELD_DESC);
        oprot.writeDouble(struct.distanceToUser);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDistanceToRequest()) {
        oprot.writeFieldBegin(DISTANCE_TO_REQUEST_FIELD_DESC);
        oprot.writeDouble(struct.distanceToRequest);
        oprot.writeFieldEnd();
      }
      if (struct.poiLocation != null) {
        if (struct.isSetPoiLocation()) {
          oprot.writeFieldBegin(POI_LOCATION_FIELD_DESC);
          struct.poiLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraDataMap != null) {
        if (struct.isSetExtraDataMap()) {
          oprot.writeFieldBegin(EXTRA_DATA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraDataMap.size()));
            for (Map.Entry<String, String> _iter22 : struct.extraDataMap.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PoiRecInfoTupleSchemeFactory implements SchemeFactory {
    public PoiRecInfoTupleScheme getScheme() {
      return new PoiRecInfoTupleScheme();
    }
  }

  private static class PoiRecInfoTupleScheme extends TupleScheme<PoiRecInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PoiRecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.poiId);
      BitSet optionals = new BitSet();
      if (struct.isSetDealList()) {
        optionals.set(0);
      }
      if (struct.isSetGoodList()) {
        optionals.set(1);
      }
      if (struct.isSetCt_poi()) {
        optionals.set(2);
      }
      if (struct.isSetSt_id()) {
        optionals.set(3);
      }
      if (struct.isSetDistanceToUser()) {
        optionals.set(4);
      }
      if (struct.isSetDistanceToRequest()) {
        optionals.set(5);
      }
      if (struct.isSetPoiLocation()) {
        optionals.set(6);
      }
      if (struct.isSetExtraDataMap()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDealList()) {
        {
          oprot.writeI32(struct.dealList.size());
          for (DealRecInfo _iter23 : struct.dealList)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetGoodList()) {
        {
          oprot.writeI32(struct.goodList.size());
          for (DealRecInfo _iter24 : struct.goodList)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetCt_poi()) {
        oprot.writeString(struct.ct_poi);
      }
      if (struct.isSetSt_id()) {
        oprot.writeString(struct.st_id);
      }
      if (struct.isSetDistanceToUser()) {
        oprot.writeDouble(struct.distanceToUser);
      }
      if (struct.isSetDistanceToRequest()) {
        oprot.writeDouble(struct.distanceToRequest);
      }
      if (struct.isSetPoiLocation()) {
        struct.poiLocation.write(oprot);
      }
      if (struct.isSetExtraDataMap()) {
        {
          oprot.writeI32(struct.extraDataMap.size());
          for (Map.Entry<String, String> _iter25 : struct.extraDataMap.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PoiRecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.poiId = iprot.readI32();
      struct.setPoiIdIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dealList = new ArrayList<DealRecInfo>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            DealRecInfo _elem28; // required
            _elem28 = new DealRecInfo();
            _elem28.read(iprot);
            struct.dealList.add(_elem28);
          }
        }
        struct.setDealListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.goodList = new ArrayList<DealRecInfo>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            DealRecInfo _elem31; // required
            _elem31 = new DealRecInfo();
            _elem31.read(iprot);
            struct.goodList.add(_elem31);
          }
        }
        struct.setGoodListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ct_poi = iprot.readString();
        struct.setCt_poiIsSet(true);
      }
      if (incoming.get(3)) {
        struct.st_id = iprot.readString();
        struct.setSt_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.distanceToUser = iprot.readDouble();
        struct.setDistanceToUserIsSet(true);
      }
      if (incoming.get(5)) {
        struct.distanceToRequest = iprot.readDouble();
        struct.setDistanceToRequestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.poiLocation = new Location();
        struct.poiLocation.read(iprot);
        struct.setPoiLocationIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraDataMap = new HashMap<String,String>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // required
            String _val35; // required
            _key34 = iprot.readString();
            _val35 = iprot.readString();
            struct.extraDataMap.put(_key34, _val35);
          }
        }
        struct.setExtraDataMapIsSet(true);
      }
    }
  }

}

