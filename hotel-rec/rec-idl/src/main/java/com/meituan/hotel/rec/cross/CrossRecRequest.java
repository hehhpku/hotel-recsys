/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.cross;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CrossRecRequest implements org.apache.thrift.TBase<CrossRecRequest, CrossRecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossRecRequest");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REC_SCENE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recSceneType", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("userLng", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("userLat", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ORDER_CITYID_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrderCityid", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_RES_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userResCityId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HOTEL_ORDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelOrderInfo", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TRAVEL_ORDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("travelOrderInfo", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TICKET_ORDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketOrderInfo", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UNUSED_TRAVEL_POIID_FIELD_DESC = new org.apache.thrift.protocol.TField("unusedTravelPoiid", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrossRecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrossRecRequestTupleSchemeFactory());
  }

  public long userId; // required
  public List<RecSceneTypeEnum> recSceneType; // required
  public String strategy; // optional
  public double userLng; // optional
  public double userLat; // optional
  public int userOrderCityid; // optional
  public int userResCityId; // optional
  public List<CrossHotelOrderInfo> hotelOrderInfo; // optional
  public List<CrossTravelOrderInfo> travelOrderInfo; // optional
  public List<CrossTicketOrderInfo> ticketOrderInfo; // optional
  public String uuid; // optional
  public String clientType; // optional
  public String appVersion; // optional
  public List<Long> unusedTravelPoiid; // optional
  public Map<String,String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    REC_SCENE_TYPE((short)2, "recSceneType"),
    STRATEGY((short)3, "strategy"),
    USER_LNG((short)4, "userLng"),
    USER_LAT((short)5, "userLat"),
    USER_ORDER_CITYID((short)6, "userOrderCityid"),
    USER_RES_CITY_ID((short)7, "userResCityId"),
    HOTEL_ORDER_INFO((short)8, "hotelOrderInfo"),
    TRAVEL_ORDER_INFO((short)9, "travelOrderInfo"),
    TICKET_ORDER_INFO((short)10, "ticketOrderInfo"),
    UUID((short)11, "uuid"),
    CLIENT_TYPE((short)12, "clientType"),
    APP_VERSION((short)13, "appVersion"),
    UNUSED_TRAVEL_POIID((short)14, "unusedTravelPoiid"),
    EXTRA_MAP((short)15, "extraMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // REC_SCENE_TYPE
          return REC_SCENE_TYPE;
        case 3: // STRATEGY
          return STRATEGY;
        case 4: // USER_LNG
          return USER_LNG;
        case 5: // USER_LAT
          return USER_LAT;
        case 6: // USER_ORDER_CITYID
          return USER_ORDER_CITYID;
        case 7: // USER_RES_CITY_ID
          return USER_RES_CITY_ID;
        case 8: // HOTEL_ORDER_INFO
          return HOTEL_ORDER_INFO;
        case 9: // TRAVEL_ORDER_INFO
          return TRAVEL_ORDER_INFO;
        case 10: // TICKET_ORDER_INFO
          return TICKET_ORDER_INFO;
        case 11: // UUID
          return UUID;
        case 12: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 13: // APP_VERSION
          return APP_VERSION;
        case 14: // UNUSED_TRAVEL_POIID
          return UNUSED_TRAVEL_POIID;
        case 15: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __USERLNG_ISSET_ID = 1;
  private static final int __USERLAT_ISSET_ID = 2;
  private static final int __USERORDERCITYID_ISSET_ID = 3;
  private static final int __USERRESCITYID_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.STRATEGY,_Fields.USER_LNG,_Fields.USER_LAT,_Fields.USER_ORDER_CITYID,_Fields.USER_RES_CITY_ID,_Fields.HOTEL_ORDER_INFO,_Fields.TRAVEL_ORDER_INFO,_Fields.TICKET_ORDER_INFO,_Fields.UUID,_Fields.CLIENT_TYPE,_Fields.APP_VERSION,_Fields.UNUSED_TRAVEL_POIID,_Fields.EXTRA_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REC_SCENE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recSceneType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecSceneTypeEnum.class))));
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LNG, new org.apache.thrift.meta_data.FieldMetaData("userLng", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_LAT, new org.apache.thrift.meta_data.FieldMetaData("userLat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_ORDER_CITYID, new org.apache.thrift.meta_data.FieldMetaData("userOrderCityid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_RES_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("userResCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOTEL_ORDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("hotelOrderInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossHotelOrderInfo.class))));
    tmpMap.put(_Fields.TRAVEL_ORDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("travelOrderInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossTravelOrderInfo.class))));
    tmpMap.put(_Fields.TICKET_ORDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("ticketOrderInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossTicketOrderInfo.class))));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNUSED_TRAVEL_POIID, new org.apache.thrift.meta_data.FieldMetaData("unusedTravelPoiid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossRecRequest.class, metaDataMap);
  }

  public CrossRecRequest() {
  }

  public CrossRecRequest(
    long userId,
    List<RecSceneTypeEnum> recSceneType)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.recSceneType = recSceneType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossRecRequest(CrossRecRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetRecSceneType()) {
      List<RecSceneTypeEnum> __this__recSceneType = new ArrayList<RecSceneTypeEnum>();
      for (RecSceneTypeEnum other_element : other.recSceneType) {
        __this__recSceneType.add(other_element);
      }
      this.recSceneType = __this__recSceneType;
    }
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    this.userLng = other.userLng;
    this.userLat = other.userLat;
    this.userOrderCityid = other.userOrderCityid;
    this.userResCityId = other.userResCityId;
    if (other.isSetHotelOrderInfo()) {
      List<CrossHotelOrderInfo> __this__hotelOrderInfo = new ArrayList<CrossHotelOrderInfo>();
      for (CrossHotelOrderInfo other_element : other.hotelOrderInfo) {
        __this__hotelOrderInfo.add(new CrossHotelOrderInfo(other_element));
      }
      this.hotelOrderInfo = __this__hotelOrderInfo;
    }
    if (other.isSetTravelOrderInfo()) {
      List<CrossTravelOrderInfo> __this__travelOrderInfo = new ArrayList<CrossTravelOrderInfo>();
      for (CrossTravelOrderInfo other_element : other.travelOrderInfo) {
        __this__travelOrderInfo.add(new CrossTravelOrderInfo(other_element));
      }
      this.travelOrderInfo = __this__travelOrderInfo;
    }
    if (other.isSetTicketOrderInfo()) {
      List<CrossTicketOrderInfo> __this__ticketOrderInfo = new ArrayList<CrossTicketOrderInfo>();
      for (CrossTicketOrderInfo other_element : other.ticketOrderInfo) {
        __this__ticketOrderInfo.add(new CrossTicketOrderInfo(other_element));
      }
      this.ticketOrderInfo = __this__ticketOrderInfo;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    if (other.isSetUnusedTravelPoiid()) {
      List<Long> __this__unusedTravelPoiid = new ArrayList<Long>();
      for (Long other_element : other.unusedTravelPoiid) {
        __this__unusedTravelPoiid.add(other_element);
      }
      this.unusedTravelPoiid = __this__unusedTravelPoiid;
    }
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraMap_copy_key = other_element_key;

        String __this__extraMap_copy_value = other_element_value;

        __this__extraMap.put(__this__extraMap_copy_key, __this__extraMap_copy_value);
      }
      this.extraMap = __this__extraMap;
    }
  }

  public CrossRecRequest deepCopy() {
    return new CrossRecRequest(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.recSceneType = null;
    this.strategy = null;
    setUserLngIsSet(false);
    this.userLng = 0.0;
    setUserLatIsSet(false);
    this.userLat = 0.0;
    setUserOrderCityidIsSet(false);
    this.userOrderCityid = 0;
    setUserResCityIdIsSet(false);
    this.userResCityId = 0;
    this.hotelOrderInfo = null;
    this.travelOrderInfo = null;
    this.ticketOrderInfo = null;
    this.uuid = null;
    this.clientType = null;
    this.appVersion = null;
    this.unusedTravelPoiid = null;
    this.extraMap = null;
  }

  public long getUserId() {
    return this.userId;
  }

  public CrossRecRequest setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public int getRecSceneTypeSize() {
    return (this.recSceneType == null) ? 0 : this.recSceneType.size();
  }

  public java.util.Iterator<RecSceneTypeEnum> getRecSceneTypeIterator() {
    return (this.recSceneType == null) ? null : this.recSceneType.iterator();
  }

  public void addToRecSceneType(RecSceneTypeEnum elem) {
    if (this.recSceneType == null) {
      this.recSceneType = new ArrayList<RecSceneTypeEnum>();
    }
    this.recSceneType.add(elem);
  }

  public List<RecSceneTypeEnum> getRecSceneType() {
    return this.recSceneType;
  }

  public CrossRecRequest setRecSceneType(List<RecSceneTypeEnum> recSceneType) {
    this.recSceneType = recSceneType;
    return this;
  }

  public void unsetRecSceneType() {
    this.recSceneType = null;
  }

  /** Returns true if field recSceneType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecSceneType() {
    return this.recSceneType != null;
  }

  public void setRecSceneTypeIsSet(boolean value) {
    if (!value) {
      this.recSceneType = null;
    }
  }

  public String getStrategy() {
    return this.strategy;
  }

  public CrossRecRequest setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public double getUserLng() {
    return this.userLng;
  }

  public CrossRecRequest setUserLng(double userLng) {
    this.userLng = userLng;
    setUserLngIsSet(true);
    return this;
  }

  public void unsetUserLng() {
    __isset_bit_vector.clear(__USERLNG_ISSET_ID);
  }

  /** Returns true if field userLng is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLng() {
    return __isset_bit_vector.get(__USERLNG_ISSET_ID);
  }

  public void setUserLngIsSet(boolean value) {
    __isset_bit_vector.set(__USERLNG_ISSET_ID, value);
  }

  public double getUserLat() {
    return this.userLat;
  }

  public CrossRecRequest setUserLat(double userLat) {
    this.userLat = userLat;
    setUserLatIsSet(true);
    return this;
  }

  public void unsetUserLat() {
    __isset_bit_vector.clear(__USERLAT_ISSET_ID);
  }

  /** Returns true if field userLat is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLat() {
    return __isset_bit_vector.get(__USERLAT_ISSET_ID);
  }

  public void setUserLatIsSet(boolean value) {
    __isset_bit_vector.set(__USERLAT_ISSET_ID, value);
  }

  public int getUserOrderCityid() {
    return this.userOrderCityid;
  }

  public CrossRecRequest setUserOrderCityid(int userOrderCityid) {
    this.userOrderCityid = userOrderCityid;
    setUserOrderCityidIsSet(true);
    return this;
  }

  public void unsetUserOrderCityid() {
    __isset_bit_vector.clear(__USERORDERCITYID_ISSET_ID);
  }

  /** Returns true if field userOrderCityid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserOrderCityid() {
    return __isset_bit_vector.get(__USERORDERCITYID_ISSET_ID);
  }

  public void setUserOrderCityidIsSet(boolean value) {
    __isset_bit_vector.set(__USERORDERCITYID_ISSET_ID, value);
  }

  public int getUserResCityId() {
    return this.userResCityId;
  }

  public CrossRecRequest setUserResCityId(int userResCityId) {
    this.userResCityId = userResCityId;
    setUserResCityIdIsSet(true);
    return this;
  }

  public void unsetUserResCityId() {
    __isset_bit_vector.clear(__USERRESCITYID_ISSET_ID);
  }

  /** Returns true if field userResCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserResCityId() {
    return __isset_bit_vector.get(__USERRESCITYID_ISSET_ID);
  }

  public void setUserResCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERRESCITYID_ISSET_ID, value);
  }

  public int getHotelOrderInfoSize() {
    return (this.hotelOrderInfo == null) ? 0 : this.hotelOrderInfo.size();
  }

  public java.util.Iterator<CrossHotelOrderInfo> getHotelOrderInfoIterator() {
    return (this.hotelOrderInfo == null) ? null : this.hotelOrderInfo.iterator();
  }

  public void addToHotelOrderInfo(CrossHotelOrderInfo elem) {
    if (this.hotelOrderInfo == null) {
      this.hotelOrderInfo = new ArrayList<CrossHotelOrderInfo>();
    }
    this.hotelOrderInfo.add(elem);
  }

  public List<CrossHotelOrderInfo> getHotelOrderInfo() {
    return this.hotelOrderInfo;
  }

  public CrossRecRequest setHotelOrderInfo(List<CrossHotelOrderInfo> hotelOrderInfo) {
    this.hotelOrderInfo = hotelOrderInfo;
    return this;
  }

  public void unsetHotelOrderInfo() {
    this.hotelOrderInfo = null;
  }

  /** Returns true if field hotelOrderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetHotelOrderInfo() {
    return this.hotelOrderInfo != null;
  }

  public void setHotelOrderInfoIsSet(boolean value) {
    if (!value) {
      this.hotelOrderInfo = null;
    }
  }

  public int getTravelOrderInfoSize() {
    return (this.travelOrderInfo == null) ? 0 : this.travelOrderInfo.size();
  }

  public java.util.Iterator<CrossTravelOrderInfo> getTravelOrderInfoIterator() {
    return (this.travelOrderInfo == null) ? null : this.travelOrderInfo.iterator();
  }

  public void addToTravelOrderInfo(CrossTravelOrderInfo elem) {
    if (this.travelOrderInfo == null) {
      this.travelOrderInfo = new ArrayList<CrossTravelOrderInfo>();
    }
    this.travelOrderInfo.add(elem);
  }

  public List<CrossTravelOrderInfo> getTravelOrderInfo() {
    return this.travelOrderInfo;
  }

  public CrossRecRequest setTravelOrderInfo(List<CrossTravelOrderInfo> travelOrderInfo) {
    this.travelOrderInfo = travelOrderInfo;
    return this;
  }

  public void unsetTravelOrderInfo() {
    this.travelOrderInfo = null;
  }

  /** Returns true if field travelOrderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTravelOrderInfo() {
    return this.travelOrderInfo != null;
  }

  public void setTravelOrderInfoIsSet(boolean value) {
    if (!value) {
      this.travelOrderInfo = null;
    }
  }

  public int getTicketOrderInfoSize() {
    return (this.ticketOrderInfo == null) ? 0 : this.ticketOrderInfo.size();
  }

  public java.util.Iterator<CrossTicketOrderInfo> getTicketOrderInfoIterator() {
    return (this.ticketOrderInfo == null) ? null : this.ticketOrderInfo.iterator();
  }

  public void addToTicketOrderInfo(CrossTicketOrderInfo elem) {
    if (this.ticketOrderInfo == null) {
      this.ticketOrderInfo = new ArrayList<CrossTicketOrderInfo>();
    }
    this.ticketOrderInfo.add(elem);
  }

  public List<CrossTicketOrderInfo> getTicketOrderInfo() {
    return this.ticketOrderInfo;
  }

  public CrossRecRequest setTicketOrderInfo(List<CrossTicketOrderInfo> ticketOrderInfo) {
    this.ticketOrderInfo = ticketOrderInfo;
    return this;
  }

  public void unsetTicketOrderInfo() {
    this.ticketOrderInfo = null;
  }

  /** Returns true if field ticketOrderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketOrderInfo() {
    return this.ticketOrderInfo != null;
  }

  public void setTicketOrderInfoIsSet(boolean value) {
    if (!value) {
      this.ticketOrderInfo = null;
    }
  }

  public String getUuid() {
    return this.uuid;
  }

  public CrossRecRequest setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getClientType() {
    return this.clientType;
  }

  public CrossRecRequest setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public CrossRecRequest setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public int getUnusedTravelPoiidSize() {
    return (this.unusedTravelPoiid == null) ? 0 : this.unusedTravelPoiid.size();
  }

  public java.util.Iterator<Long> getUnusedTravelPoiidIterator() {
    return (this.unusedTravelPoiid == null) ? null : this.unusedTravelPoiid.iterator();
  }

  public void addToUnusedTravelPoiid(long elem) {
    if (this.unusedTravelPoiid == null) {
      this.unusedTravelPoiid = new ArrayList<Long>();
    }
    this.unusedTravelPoiid.add(elem);
  }

  public List<Long> getUnusedTravelPoiid() {
    return this.unusedTravelPoiid;
  }

  public CrossRecRequest setUnusedTravelPoiid(List<Long> unusedTravelPoiid) {
    this.unusedTravelPoiid = unusedTravelPoiid;
    return this;
  }

  public void unsetUnusedTravelPoiid() {
    this.unusedTravelPoiid = null;
  }

  /** Returns true if field unusedTravelPoiid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnusedTravelPoiid() {
    return this.unusedTravelPoiid != null;
  }

  public void setUnusedTravelPoiidIsSet(boolean value) {
    if (!value) {
      this.unusedTravelPoiid = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public CrossRecRequest setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REC_SCENE_TYPE:
      if (value == null) {
        unsetRecSceneType();
      } else {
        setRecSceneType((List<RecSceneTypeEnum>)value);
      }
      break;

    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case USER_LNG:
      if (value == null) {
        unsetUserLng();
      } else {
        setUserLng((Double)value);
      }
      break;

    case USER_LAT:
      if (value == null) {
        unsetUserLat();
      } else {
        setUserLat((Double)value);
      }
      break;

    case USER_ORDER_CITYID:
      if (value == null) {
        unsetUserOrderCityid();
      } else {
        setUserOrderCityid((Integer)value);
      }
      break;

    case USER_RES_CITY_ID:
      if (value == null) {
        unsetUserResCityId();
      } else {
        setUserResCityId((Integer)value);
      }
      break;

    case HOTEL_ORDER_INFO:
      if (value == null) {
        unsetHotelOrderInfo();
      } else {
        setHotelOrderInfo((List<CrossHotelOrderInfo>)value);
      }
      break;

    case TRAVEL_ORDER_INFO:
      if (value == null) {
        unsetTravelOrderInfo();
      } else {
        setTravelOrderInfo((List<CrossTravelOrderInfo>)value);
      }
      break;

    case TICKET_ORDER_INFO:
      if (value == null) {
        unsetTicketOrderInfo();
      } else {
        setTicketOrderInfo((List<CrossTicketOrderInfo>)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case UNUSED_TRAVEL_POIID:
      if (value == null) {
        unsetUnusedTravelPoiid();
      } else {
        setUnusedTravelPoiid((List<Long>)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case REC_SCENE_TYPE:
      return getRecSceneType();

    case STRATEGY:
      return getStrategy();

    case USER_LNG:
      return Double.valueOf(getUserLng());

    case USER_LAT:
      return Double.valueOf(getUserLat());

    case USER_ORDER_CITYID:
      return Integer.valueOf(getUserOrderCityid());

    case USER_RES_CITY_ID:
      return Integer.valueOf(getUserResCityId());

    case HOTEL_ORDER_INFO:
      return getHotelOrderInfo();

    case TRAVEL_ORDER_INFO:
      return getTravelOrderInfo();

    case TICKET_ORDER_INFO:
      return getTicketOrderInfo();

    case UUID:
      return getUuid();

    case CLIENT_TYPE:
      return getClientType();

    case APP_VERSION:
      return getAppVersion();

    case UNUSED_TRAVEL_POIID:
      return getUnusedTravelPoiid();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case REC_SCENE_TYPE:
      return isSetRecSceneType();
    case STRATEGY:
      return isSetStrategy();
    case USER_LNG:
      return isSetUserLng();
    case USER_LAT:
      return isSetUserLat();
    case USER_ORDER_CITYID:
      return isSetUserOrderCityid();
    case USER_RES_CITY_ID:
      return isSetUserResCityId();
    case HOTEL_ORDER_INFO:
      return isSetHotelOrderInfo();
    case TRAVEL_ORDER_INFO:
      return isSetTravelOrderInfo();
    case TICKET_ORDER_INFO:
      return isSetTicketOrderInfo();
    case UUID:
      return isSetUuid();
    case CLIENT_TYPE:
      return isSetClientType();
    case APP_VERSION:
      return isSetAppVersion();
    case UNUSED_TRAVEL_POIID:
      return isSetUnusedTravelPoiid();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossRecRequest)
      return this.equals((CrossRecRequest)that);
    return false;
  }

  public boolean equals(CrossRecRequest that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_recSceneType = true && this.isSetRecSceneType();
    boolean that_present_recSceneType = true && that.isSetRecSceneType();
    if (this_present_recSceneType || that_present_recSceneType) {
      if (!(this_present_recSceneType && that_present_recSceneType))
        return false;
      if (!this.recSceneType.equals(that.recSceneType))
        return false;
    }

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_userLng = true && this.isSetUserLng();
    boolean that_present_userLng = true && that.isSetUserLng();
    if (this_present_userLng || that_present_userLng) {
      if (!(this_present_userLng && that_present_userLng))
        return false;
      if (this.userLng != that.userLng)
        return false;
    }

    boolean this_present_userLat = true && this.isSetUserLat();
    boolean that_present_userLat = true && that.isSetUserLat();
    if (this_present_userLat || that_present_userLat) {
      if (!(this_present_userLat && that_present_userLat))
        return false;
      if (this.userLat != that.userLat)
        return false;
    }

    boolean this_present_userOrderCityid = true && this.isSetUserOrderCityid();
    boolean that_present_userOrderCityid = true && that.isSetUserOrderCityid();
    if (this_present_userOrderCityid || that_present_userOrderCityid) {
      if (!(this_present_userOrderCityid && that_present_userOrderCityid))
        return false;
      if (this.userOrderCityid != that.userOrderCityid)
        return false;
    }

    boolean this_present_userResCityId = true && this.isSetUserResCityId();
    boolean that_present_userResCityId = true && that.isSetUserResCityId();
    if (this_present_userResCityId || that_present_userResCityId) {
      if (!(this_present_userResCityId && that_present_userResCityId))
        return false;
      if (this.userResCityId != that.userResCityId)
        return false;
    }

    boolean this_present_hotelOrderInfo = true && this.isSetHotelOrderInfo();
    boolean that_present_hotelOrderInfo = true && that.isSetHotelOrderInfo();
    if (this_present_hotelOrderInfo || that_present_hotelOrderInfo) {
      if (!(this_present_hotelOrderInfo && that_present_hotelOrderInfo))
        return false;
      if (!this.hotelOrderInfo.equals(that.hotelOrderInfo))
        return false;
    }

    boolean this_present_travelOrderInfo = true && this.isSetTravelOrderInfo();
    boolean that_present_travelOrderInfo = true && that.isSetTravelOrderInfo();
    if (this_present_travelOrderInfo || that_present_travelOrderInfo) {
      if (!(this_present_travelOrderInfo && that_present_travelOrderInfo))
        return false;
      if (!this.travelOrderInfo.equals(that.travelOrderInfo))
        return false;
    }

    boolean this_present_ticketOrderInfo = true && this.isSetTicketOrderInfo();
    boolean that_present_ticketOrderInfo = true && that.isSetTicketOrderInfo();
    if (this_present_ticketOrderInfo || that_present_ticketOrderInfo) {
      if (!(this_present_ticketOrderInfo && that_present_ticketOrderInfo))
        return false;
      if (!this.ticketOrderInfo.equals(that.ticketOrderInfo))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_unusedTravelPoiid = true && this.isSetUnusedTravelPoiid();
    boolean that_present_unusedTravelPoiid = true && that.isSetUnusedTravelPoiid();
    if (this_present_unusedTravelPoiid || that_present_unusedTravelPoiid) {
      if (!(this_present_unusedTravelPoiid && that_present_unusedTravelPoiid))
        return false;
      if (!this.unusedTravelPoiid.equals(that.unusedTravelPoiid))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CrossRecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CrossRecRequest typedOther = (CrossRecRequest)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecSceneType()).compareTo(typedOther.isSetRecSceneType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecSceneType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recSceneType, typedOther.recSceneType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLng()).compareTo(typedOther.isSetUserLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLng, typedOther.userLng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLat()).compareTo(typedOther.isSetUserLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLat, typedOther.userLat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserOrderCityid()).compareTo(typedOther.isSetUserOrderCityid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserOrderCityid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOrderCityid, typedOther.userOrderCityid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserResCityId()).compareTo(typedOther.isSetUserResCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserResCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userResCityId, typedOther.userResCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotelOrderInfo()).compareTo(typedOther.isSetHotelOrderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotelOrderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelOrderInfo, typedOther.hotelOrderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTravelOrderInfo()).compareTo(typedOther.isSetTravelOrderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTravelOrderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.travelOrderInfo, typedOther.travelOrderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketOrderInfo()).compareTo(typedOther.isSetTicketOrderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketOrderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketOrderInfo, typedOther.ticketOrderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnusedTravelPoiid()).compareTo(typedOther.isSetUnusedTravelPoiid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnusedTravelPoiid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unusedTravelPoiid, typedOther.unusedTravelPoiid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(typedOther.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, typedOther.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrossRecRequest(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recSceneType:");
    if (this.recSceneType == null) {
      sb.append("null");
    } else {
      sb.append(this.recSceneType);
    }
    first = false;
    if (isSetStrategy()) {
      if (!first) sb.append(", ");
      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
    }
    if (isSetUserLng()) {
      if (!first) sb.append(", ");
      sb.append("userLng:");
      sb.append(this.userLng);
      first = false;
    }
    if (isSetUserLat()) {
      if (!first) sb.append(", ");
      sb.append("userLat:");
      sb.append(this.userLat);
      first = false;
    }
    if (isSetUserOrderCityid()) {
      if (!first) sb.append(", ");
      sb.append("userOrderCityid:");
      sb.append(this.userOrderCityid);
      first = false;
    }
    if (isSetUserResCityId()) {
      if (!first) sb.append(", ");
      sb.append("userResCityId:");
      sb.append(this.userResCityId);
      first = false;
    }
    if (isSetHotelOrderInfo()) {
      if (!first) sb.append(", ");
      sb.append("hotelOrderInfo:");
      if (this.hotelOrderInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelOrderInfo);
      }
      first = false;
    }
    if (isSetTravelOrderInfo()) {
      if (!first) sb.append(", ");
      sb.append("travelOrderInfo:");
      if (this.travelOrderInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.travelOrderInfo);
      }
      first = false;
    }
    if (isSetTicketOrderInfo()) {
      if (!first) sb.append(", ");
      sb.append("ticketOrderInfo:");
      if (this.ticketOrderInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketOrderInfo);
      }
      first = false;
    }
    if (isSetUuid()) {
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    if (isSetClientType()) {
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetUnusedTravelPoiid()) {
      if (!first) sb.append(", ");
      sb.append("unusedTravelPoiid:");
      if (this.unusedTravelPoiid == null) {
        sb.append("null");
      } else {
        sb.append(this.unusedTravelPoiid);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossRecRequestStandardSchemeFactory implements SchemeFactory {
    public CrossRecRequestStandardScheme getScheme() {
      return new CrossRecRequestStandardScheme();
    }
  }

  private static class CrossRecRequestStandardScheme extends StandardScheme<CrossRecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossRecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REC_SCENE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.recSceneType = new ArrayList<RecSceneTypeEnum>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  RecSceneTypeEnum _elem48; // required
                  _elem48 = RecSceneTypeEnum.findByValue(iprot.readI32());
                  struct.recSceneType.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setRecSceneTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userLng = iprot.readDouble();
              struct.setUserLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userLat = iprot.readDouble();
              struct.setUserLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ORDER_CITYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userOrderCityid = iprot.readI32();
              struct.setUserOrderCityidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_RES_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userResCityId = iprot.readI32();
              struct.setUserResCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOTEL_ORDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.hotelOrderInfo = new ArrayList<CrossHotelOrderInfo>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  CrossHotelOrderInfo _elem51; // required
                  _elem51 = new CrossHotelOrderInfo();
                  _elem51.read(iprot);
                  struct.hotelOrderInfo.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setHotelOrderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRAVEL_ORDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.travelOrderInfo = new ArrayList<CrossTravelOrderInfo>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  CrossTravelOrderInfo _elem54; // required
                  _elem54 = new CrossTravelOrderInfo();
                  _elem54.read(iprot);
                  struct.travelOrderInfo.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setTravelOrderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TICKET_ORDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.ticketOrderInfo = new ArrayList<CrossTicketOrderInfo>(_list55.size);
                for (int _i56 = 0; _i56 < _list55.size; ++_i56)
                {
                  CrossTicketOrderInfo _elem57; // required
                  _elem57 = new CrossTicketOrderInfo();
                  _elem57.read(iprot);
                  struct.ticketOrderInfo.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTicketOrderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UNUSED_TRAVEL_POIID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.unusedTravelPoiid = new ArrayList<Long>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  long _elem60; // required
                  _elem60 = iprot.readI64();
                  struct.unusedTravelPoiid.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setUnusedTravelPoiidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map61.size);
                for (int _i62 = 0; _i62 < _map61.size; ++_i62)
                {
                  String _key63; // required
                  String _val64; // required
                  _key63 = iprot.readString();
                  _val64 = iprot.readString();
                  struct.extraMap.put(_key63, _val64);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossRecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.recSceneType != null) {
        oprot.writeFieldBegin(REC_SCENE_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recSceneType.size()));
          for (RecSceneTypeEnum _iter65 : struct.recSceneType)
          {
            oprot.writeI32(_iter65.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.strategy != null) {
        if (struct.isSetStrategy()) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserLng()) {
        oprot.writeFieldBegin(USER_LNG_FIELD_DESC);
        oprot.writeDouble(struct.userLng);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserLat()) {
        oprot.writeFieldBegin(USER_LAT_FIELD_DESC);
        oprot.writeDouble(struct.userLat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserOrderCityid()) {
        oprot.writeFieldBegin(USER_ORDER_CITYID_FIELD_DESC);
        oprot.writeI32(struct.userOrderCityid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserResCityId()) {
        oprot.writeFieldBegin(USER_RES_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.userResCityId);
        oprot.writeFieldEnd();
      }
      if (struct.hotelOrderInfo != null) {
        if (struct.isSetHotelOrderInfo()) {
          oprot.writeFieldBegin(HOTEL_ORDER_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hotelOrderInfo.size()));
            for (CrossHotelOrderInfo _iter66 : struct.hotelOrderInfo)
            {
              _iter66.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.travelOrderInfo != null) {
        if (struct.isSetTravelOrderInfo()) {
          oprot.writeFieldBegin(TRAVEL_ORDER_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.travelOrderInfo.size()));
            for (CrossTravelOrderInfo _iter67 : struct.travelOrderInfo)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketOrderInfo != null) {
        if (struct.isSetTicketOrderInfo()) {
          oprot.writeFieldBegin(TICKET_ORDER_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ticketOrderInfo.size()));
            for (CrossTicketOrderInfo _iter68 : struct.ticketOrderInfo)
            {
              _iter68.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.uuid != null) {
        if (struct.isSetUuid()) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientType != null) {
        if (struct.isSetClientType()) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unusedTravelPoiid != null) {
        if (struct.isSetUnusedTravelPoiid()) {
          oprot.writeFieldBegin(UNUSED_TRAVEL_POIID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.unusedTravelPoiid.size()));
            for (long _iter69 : struct.unusedTravelPoiid)
            {
              oprot.writeI64(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter70 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              oprot.writeString(_iter70.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossRecRequestTupleSchemeFactory implements SchemeFactory {
    public CrossRecRequestTupleScheme getScheme() {
      return new CrossRecRequestTupleScheme();
    }
  }

  private static class CrossRecRequestTupleScheme extends TupleScheme<CrossRecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetRecSceneType()) {
        optionals.set(1);
      }
      if (struct.isSetStrategy()) {
        optionals.set(2);
      }
      if (struct.isSetUserLng()) {
        optionals.set(3);
      }
      if (struct.isSetUserLat()) {
        optionals.set(4);
      }
      if (struct.isSetUserOrderCityid()) {
        optionals.set(5);
      }
      if (struct.isSetUserResCityId()) {
        optionals.set(6);
      }
      if (struct.isSetHotelOrderInfo()) {
        optionals.set(7);
      }
      if (struct.isSetTravelOrderInfo()) {
        optionals.set(8);
      }
      if (struct.isSetTicketOrderInfo()) {
        optionals.set(9);
      }
      if (struct.isSetUuid()) {
        optionals.set(10);
      }
      if (struct.isSetClientType()) {
        optionals.set(11);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(12);
      }
      if (struct.isSetUnusedTravelPoiid()) {
        optionals.set(13);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRecSceneType()) {
        {
          oprot.writeI32(struct.recSceneType.size());
          for (RecSceneTypeEnum _iter71 : struct.recSceneType)
          {
            oprot.writeI32(_iter71.getValue());
          }
        }
      }
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetUserLng()) {
        oprot.writeDouble(struct.userLng);
      }
      if (struct.isSetUserLat()) {
        oprot.writeDouble(struct.userLat);
      }
      if (struct.isSetUserOrderCityid()) {
        oprot.writeI32(struct.userOrderCityid);
      }
      if (struct.isSetUserResCityId()) {
        oprot.writeI32(struct.userResCityId);
      }
      if (struct.isSetHotelOrderInfo()) {
        {
          oprot.writeI32(struct.hotelOrderInfo.size());
          for (CrossHotelOrderInfo _iter72 : struct.hotelOrderInfo)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetTravelOrderInfo()) {
        {
          oprot.writeI32(struct.travelOrderInfo.size());
          for (CrossTravelOrderInfo _iter73 : struct.travelOrderInfo)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetTicketOrderInfo()) {
        {
          oprot.writeI32(struct.ticketOrderInfo.size());
          for (CrossTicketOrderInfo _iter74 : struct.ticketOrderInfo)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetUnusedTravelPoiid()) {
        {
          oprot.writeI32(struct.unusedTravelPoiid.size());
          for (long _iter75 : struct.unusedTravelPoiid)
          {
            oprot.writeI64(_iter75);
          }
        }
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter76 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter76.getKey());
            oprot.writeString(_iter76.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossRecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.recSceneType = new ArrayList<RecSceneTypeEnum>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            RecSceneTypeEnum _elem79; // required
            _elem79 = RecSceneTypeEnum.findByValue(iprot.readI32());
            struct.recSceneType.add(_elem79);
          }
        }
        struct.setRecSceneTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userLng = iprot.readDouble();
        struct.setUserLngIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userLat = iprot.readDouble();
        struct.setUserLatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userOrderCityid = iprot.readI32();
        struct.setUserOrderCityidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userResCityId = iprot.readI32();
        struct.setUserResCityIdIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hotelOrderInfo = new ArrayList<CrossHotelOrderInfo>(_list80.size);
          for (int _i81 = 0; _i81 < _list80.size; ++_i81)
          {
            CrossHotelOrderInfo _elem82; // required
            _elem82 = new CrossHotelOrderInfo();
            _elem82.read(iprot);
            struct.hotelOrderInfo.add(_elem82);
          }
        }
        struct.setHotelOrderInfoIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.travelOrderInfo = new ArrayList<CrossTravelOrderInfo>(_list83.size);
          for (int _i84 = 0; _i84 < _list83.size; ++_i84)
          {
            CrossTravelOrderInfo _elem85; // required
            _elem85 = new CrossTravelOrderInfo();
            _elem85.read(iprot);
            struct.travelOrderInfo.add(_elem85);
          }
        }
        struct.setTravelOrderInfoIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ticketOrderInfo = new ArrayList<CrossTicketOrderInfo>(_list86.size);
          for (int _i87 = 0; _i87 < _list86.size; ++_i87)
          {
            CrossTicketOrderInfo _elem88; // required
            _elem88 = new CrossTicketOrderInfo();
            _elem88.read(iprot);
            struct.ticketOrderInfo.add(_elem88);
          }
        }
        struct.setTicketOrderInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.unusedTravelPoiid = new ArrayList<Long>(_list89.size);
          for (int _i90 = 0; _i90 < _list89.size; ++_i90)
          {
            long _elem91; // required
            _elem91 = iprot.readI64();
            struct.unusedTravelPoiid.add(_elem91);
          }
        }
        struct.setUnusedTravelPoiidIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map92.size);
          for (int _i93 = 0; _i93 < _map92.size; ++_i93)
          {
            String _key94; // required
            String _val95; // required
            _key94 = iprot.readString();
            _val95 = iprot.readString();
            struct.extraMap.put(_key94, _val95);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

}

