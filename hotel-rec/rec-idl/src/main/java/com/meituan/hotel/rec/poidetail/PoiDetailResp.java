/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.hotel.rec.poidetail;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PoiDetailResp implements org.apache.thrift.TBase<PoiDetailResp, PoiDetailResp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PoiDetailResp");

  private static final org.apache.thrift.protocol.TField POI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poiId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DISTANCE_TO_POI_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceToPoi", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCE_TO_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceToUser", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField STID_FIELD_DESC = new org.apache.thrift.protocol.TField("stid", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PoiDetailRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PoiDetailRespTupleSchemeFactory());
  }

  public int poiId; // required
  public double distanceToPoi; // optional
  public double distanceToUser; // optional
  public Map<String,String> extraMap; // optional
  public String stid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POI_ID((short)1, "poiId"),
    DISTANCE_TO_POI((short)2, "distanceToPoi"),
    DISTANCE_TO_USER((short)3, "distanceToUser"),
    EXTRA_MAP((short)4, "extraMap"),
    STID((short)5, "stid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POI_ID
          return POI_ID;
        case 2: // DISTANCE_TO_POI
          return DISTANCE_TO_POI;
        case 3: // DISTANCE_TO_USER
          return DISTANCE_TO_USER;
        case 4: // EXTRA_MAP
          return EXTRA_MAP;
        case 5: // STID
          return STID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POIID_ISSET_ID = 0;
  private static final int __DISTANCETOPOI_ISSET_ID = 1;
  private static final int __DISTANCETOUSER_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.DISTANCE_TO_POI,_Fields.DISTANCE_TO_USER,_Fields.EXTRA_MAP,_Fields.STID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POI_ID, new org.apache.thrift.meta_data.FieldMetaData("poiId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTANCE_TO_POI, new org.apache.thrift.meta_data.FieldMetaData("distanceToPoi", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISTANCE_TO_USER, new org.apache.thrift.meta_data.FieldMetaData("distanceToUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STID, new org.apache.thrift.meta_data.FieldMetaData("stid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PoiDetailResp.class, metaDataMap);
  }

  public PoiDetailResp() {
  }

  public PoiDetailResp(
    int poiId)
  {
    this();
    this.poiId = poiId;
    setPoiIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PoiDetailResp(PoiDetailResp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.poiId = other.poiId;
    this.distanceToPoi = other.distanceToPoi;
    this.distanceToUser = other.distanceToUser;
    if (other.isSetExtraMap()) {
      Map<String,String> __this__extraMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraMap_copy_key = other_element_key;

        String __this__extraMap_copy_value = other_element_value;

        __this__extraMap.put(__this__extraMap_copy_key, __this__extraMap_copy_value);
      }
      this.extraMap = __this__extraMap;
    }
    if (other.isSetStid()) {
      this.stid = other.stid;
    }
  }

  public PoiDetailResp deepCopy() {
    return new PoiDetailResp(this);
  }

  @Override
  public void clear() {
    setPoiIdIsSet(false);
    this.poiId = 0;
    setDistanceToPoiIsSet(false);
    this.distanceToPoi = 0.0;
    setDistanceToUserIsSet(false);
    this.distanceToUser = 0.0;
    this.extraMap = null;
    this.stid = null;
  }

  public int getPoiId() {
    return this.poiId;
  }

  public PoiDetailResp setPoiId(int poiId) {
    this.poiId = poiId;
    setPoiIdIsSet(true);
    return this;
  }

  public void unsetPoiId() {
    __isset_bit_vector.clear(__POIID_ISSET_ID);
  }

  /** Returns true if field poiId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoiId() {
    return __isset_bit_vector.get(__POIID_ISSET_ID);
  }

  public void setPoiIdIsSet(boolean value) {
    __isset_bit_vector.set(__POIID_ISSET_ID, value);
  }

  public double getDistanceToPoi() {
    return this.distanceToPoi;
  }

  public PoiDetailResp setDistanceToPoi(double distanceToPoi) {
    this.distanceToPoi = distanceToPoi;
    setDistanceToPoiIsSet(true);
    return this;
  }

  public void unsetDistanceToPoi() {
    __isset_bit_vector.clear(__DISTANCETOPOI_ISSET_ID);
  }

  /** Returns true if field distanceToPoi is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceToPoi() {
    return __isset_bit_vector.get(__DISTANCETOPOI_ISSET_ID);
  }

  public void setDistanceToPoiIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETOPOI_ISSET_ID, value);
  }

  public double getDistanceToUser() {
    return this.distanceToUser;
  }

  public PoiDetailResp setDistanceToUser(double distanceToUser) {
    this.distanceToUser = distanceToUser;
    setDistanceToUserIsSet(true);
    return this;
  }

  public void unsetDistanceToUser() {
    __isset_bit_vector.clear(__DISTANCETOUSER_ISSET_ID);
  }

  /** Returns true if field distanceToUser is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceToUser() {
    return __isset_bit_vector.get(__DISTANCETOUSER_ISSET_ID);
  }

  public void setDistanceToUserIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETOUSER_ISSET_ID, value);
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(String key, String val) {
    if (this.extraMap == null) {
      this.extraMap = new HashMap<String,String>();
    }
    this.extraMap.put(key, val);
  }

  public Map<String,String> getExtraMap() {
    return this.extraMap;
  }

  public PoiDetailResp setExtraMap(Map<String,String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  public String getStid() {
    return this.stid;
  }

  public PoiDetailResp setStid(String stid) {
    this.stid = stid;
    return this;
  }

  public void unsetStid() {
    this.stid = null;
  }

  /** Returns true if field stid is set (has been assigned a value) and false otherwise */
  public boolean isSetStid() {
    return this.stid != null;
  }

  public void setStidIsSet(boolean value) {
    if (!value) {
      this.stid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POI_ID:
      if (value == null) {
        unsetPoiId();
      } else {
        setPoiId((Integer)value);
      }
      break;

    case DISTANCE_TO_POI:
      if (value == null) {
        unsetDistanceToPoi();
      } else {
        setDistanceToPoi((Double)value);
      }
      break;

    case DISTANCE_TO_USER:
      if (value == null) {
        unsetDistanceToUser();
      } else {
        setDistanceToUser((Double)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((Map<String,String>)value);
      }
      break;

    case STID:
      if (value == null) {
        unsetStid();
      } else {
        setStid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POI_ID:
      return Integer.valueOf(getPoiId());

    case DISTANCE_TO_POI:
      return Double.valueOf(getDistanceToPoi());

    case DISTANCE_TO_USER:
      return Double.valueOf(getDistanceToUser());

    case EXTRA_MAP:
      return getExtraMap();

    case STID:
      return getStid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POI_ID:
      return isSetPoiId();
    case DISTANCE_TO_POI:
      return isSetDistanceToPoi();
    case DISTANCE_TO_USER:
      return isSetDistanceToUser();
    case EXTRA_MAP:
      return isSetExtraMap();
    case STID:
      return isSetStid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PoiDetailResp)
      return this.equals((PoiDetailResp)that);
    return false;
  }

  public boolean equals(PoiDetailResp that) {
    if (that == null)
      return false;

    boolean this_present_poiId = true;
    boolean that_present_poiId = true;
    if (this_present_poiId || that_present_poiId) {
      if (!(this_present_poiId && that_present_poiId))
        return false;
      if (this.poiId != that.poiId)
        return false;
    }

    boolean this_present_distanceToPoi = true && this.isSetDistanceToPoi();
    boolean that_present_distanceToPoi = true && that.isSetDistanceToPoi();
    if (this_present_distanceToPoi || that_present_distanceToPoi) {
      if (!(this_present_distanceToPoi && that_present_distanceToPoi))
        return false;
      if (this.distanceToPoi != that.distanceToPoi)
        return false;
    }

    boolean this_present_distanceToUser = true && this.isSetDistanceToUser();
    boolean that_present_distanceToUser = true && that.isSetDistanceToUser();
    if (this_present_distanceToUser || that_present_distanceToUser) {
      if (!(this_present_distanceToUser && that_present_distanceToUser))
        return false;
      if (this.distanceToUser != that.distanceToUser)
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    boolean this_present_stid = true && this.isSetStid();
    boolean that_present_stid = true && that.isSetStid();
    if (this_present_stid || that_present_stid) {
      if (!(this_present_stid && that_present_stid))
        return false;
      if (!this.stid.equals(that.stid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PoiDetailResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PoiDetailResp typedOther = (PoiDetailResp)other;

    lastComparison = Boolean.valueOf(isSetPoiId()).compareTo(typedOther.isSetPoiId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoiId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poiId, typedOther.poiId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceToPoi()).compareTo(typedOther.isSetDistanceToPoi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceToPoi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceToPoi, typedOther.distanceToPoi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceToUser()).compareTo(typedOther.isSetDistanceToUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceToUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceToUser, typedOther.distanceToUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraMap()).compareTo(typedOther.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, typedOther.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStid()).compareTo(typedOther.isSetStid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stid, typedOther.stid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PoiDetailResp(");
    boolean first = true;

    sb.append("poiId:");
    sb.append(this.poiId);
    first = false;
    if (isSetDistanceToPoi()) {
      if (!first) sb.append(", ");
      sb.append("distanceToPoi:");
      sb.append(this.distanceToPoi);
      first = false;
    }
    if (isSetDistanceToUser()) {
      if (!first) sb.append(", ");
      sb.append("distanceToUser:");
      sb.append(this.distanceToUser);
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    if (isSetStid()) {
      if (!first) sb.append(", ");
      sb.append("stid:");
      if (this.stid == null) {
        sb.append("null");
      } else {
        sb.append(this.stid);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'poiId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PoiDetailRespStandardSchemeFactory implements SchemeFactory {
    public PoiDetailRespStandardScheme getScheme() {
      return new PoiDetailRespStandardScheme();
    }
  }

  private static class PoiDetailRespStandardScheme extends StandardScheme<PoiDetailResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PoiDetailResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poiId = iprot.readI32();
              struct.setPoiIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISTANCE_TO_POI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceToPoi = iprot.readDouble();
              struct.setDistanceToPoiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCE_TO_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceToUser = iprot.readDouble();
              struct.setDistanceToUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.extraMap = new HashMap<String,String>(2*_map26.size);
                for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                {
                  String _key28; // required
                  String _val29; // required
                  _key28 = iprot.readString();
                  _val29 = iprot.readString();
                  struct.extraMap.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stid = iprot.readString();
              struct.setStidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPoiId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'poiId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PoiDetailResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POI_ID_FIELD_DESC);
      oprot.writeI32(struct.poiId);
      oprot.writeFieldEnd();
      if (struct.isSetDistanceToPoi()) {
        oprot.writeFieldBegin(DISTANCE_TO_POI_FIELD_DESC);
        oprot.writeDouble(struct.distanceToPoi);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDistanceToUser()) {
        oprot.writeFieldBegin(DISTANCE_TO_USER_FIELD_DESC);
        oprot.writeDouble(struct.distanceToUser);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (Map.Entry<String, String> _iter30 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              oprot.writeString(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stid != null) {
        if (struct.isSetStid()) {
          oprot.writeFieldBegin(STID_FIELD_DESC);
          oprot.writeString(struct.stid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PoiDetailRespTupleSchemeFactory implements SchemeFactory {
    public PoiDetailRespTupleScheme getScheme() {
      return new PoiDetailRespTupleScheme();
    }
  }

  private static class PoiDetailRespTupleScheme extends TupleScheme<PoiDetailResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PoiDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.poiId);
      BitSet optionals = new BitSet();
      if (struct.isSetDistanceToPoi()) {
        optionals.set(0);
      }
      if (struct.isSetDistanceToUser()) {
        optionals.set(1);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(2);
      }
      if (struct.isSetStid()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDistanceToPoi()) {
        oprot.writeDouble(struct.distanceToPoi);
      }
      if (struct.isSetDistanceToUser()) {
        oprot.writeDouble(struct.distanceToUser);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (Map.Entry<String, String> _iter31 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            oprot.writeString(_iter31.getValue());
          }
        }
      }
      if (struct.isSetStid()) {
        oprot.writeString(struct.stid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PoiDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.poiId = iprot.readI32();
      struct.setPoiIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.distanceToPoi = iprot.readDouble();
        struct.setDistanceToPoiIsSet(true);
      }
      if (incoming.get(1)) {
        struct.distanceToUser = iprot.readDouble();
        struct.setDistanceToUserIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraMap = new HashMap<String,String>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // required
            String _val35; // required
            _key34 = iprot.readString();
            _val35 = iprot.readString();
            struct.extraMap.put(_key34, _val35);
          }
        }
        struct.setExtraMapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stid = iprot.readString();
        struct.setStidIsSet(true);
      }
    }
  }

}

